harness/harness-core/100-migrator/container/scripts/replace_configs.sh:
   14    if [[ "" != "$CONFIG_VALUE" ]]; then
   15:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   16    fi

   21  
   22: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   23  
   24  if [[ "" != "$LOGGING_LEVEL" ]]; then
   25:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   26  fi

   32      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   33:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   34    done

   37  if [[ "" != "$SERVER_PORT" ]]; then
   38:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
   39  else
   40:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "9090"
   41  fi

   43  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
   44:   yq write -i $CONFIG_FILE grpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
   45  fi

   47  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
   48:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
   49  fi

   51  if [[ "" != "$UI_SERVER_URL" ]]; then
   52:   yq write -i $CONFIG_FILE portal.url "$UI_SERVER_URL"
   53  fi

   55  if [[ "" != "$AUTHTOKENEXPIRYINMILLIS" ]]; then
   56:   yq write -i $CONFIG_FILE portal.authTokenExpiryInMillis "$AUTHTOKENEXPIRYINMILLIS"
   57  fi

   59  if [[ "" != "$EXTERNAL_GRAPHQL_RATE_LIMIT" ]]; then
   60:   yq write -i $CONFIG_FILE portal.externalGraphQLRateLimitPerMinute "$EXTERNAL_GRAPHQL_RATE_LIMIT"
   61  fi

   63  if [[ "" != "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT" ]]; then
   64:   yq write -i $CONFIG_FILE portal.customDashGraphQLRateLimitPerMinute "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT"
   65  fi

   67  if [[ "" != "$ALLOWED_ORIGINS" ]]; then
   68:   yq write -i $CONFIG_FILE portal.allowedOrigins "$ALLOWED_ORIGINS"
   69  fi

   71  if [[ "" != "$STORE_REQUEST_PAYLOAD" ]]; then
   72:   yq write -i $CONFIG_FILE auditConfig.storeRequestPayload "$STORE_REQUEST_PAYLOAD"
   73  fi

   75  if [[ "" != "$STORE_RESPONSE_PAYLOAD" ]]; then
   76:   yq write -i $CONFIG_FILE auditConfig.storeResponsePayload "$STORE_RESPONSE_PAYLOAD"
   77  fi

   79  if [[ "" != "$MONGO_URI" ]]; then
   80:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   81  fi

   83  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   84:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   85  fi

   87  if [[ "" != "$MONGO_SSL_CONFIG" ]]; then
   88:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoSSLEnabled "$MONGO_SSL_CONFIG"
   89  fi

   91  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PATH" ]]; then
   92:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoTrustStorePath "$MONGO_SSL_CA_TRUST_STORE_PATH"
   93  fi

   95  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PASSWORD" ]]; then
   96:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoTrustStorePassword "$MONGO_SSL_CA_TRUST_STORE_PASSWORD"
   97  fi

   99  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
  100:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
  101  fi

  103  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
  104:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
  105  fi

  107  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
  108:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
  109  fi

  111  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
  112:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
  113  fi

  115  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  116:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  117  fi

  119  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
  120:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
  121  fi

  123  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
  124:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
  125  else

  129  if [[ "" != "$CF_CLIENT_API_KEY" ]]; then
  130:   yq write -i $CONFIG_FILE cfClientConfig.apiKey "$CF_CLIENT_API_KEY"
  131  fi

  133  if [[ "" != "$CF_CLIENT_CONFIG_URL" ]]; then
  134:   yq write -i $CONFIG_FILE cfClientConfig.configUrl "$CF_CLIENT_CONFIG_URL"
  135  fi

  137  if [[ "" != "$CF_CLIENT_EVENT_URL" ]]; then
  138:   yq write -i $CONFIG_FILE cfClientConfig.eventUrl "$CF_CLIENT_EVENT_URL"
  139  fi

  141  if [[ "" != "$CF_CLIENT_ANALYTICS_ENABLED" ]]; then
  142:   yq write -i $CONFIG_FILE cfClientConfig.analyticsEnabled "$CF_CLIENT_ANALYTICS_ENABLED"
  143  fi

  145  if [[ "" != "$CF_CLIENT_CONNECTION_TIMEOUT" ]]; then
  146:   yq write -i $CONFIG_FILE cfClientConfig.connectionTimeout "$CF_CLIENT_CONNECTION_TIMEOUT"
  147  fi

  149  if [[ "" != "$CF_CLIENT_READ_TIMEOUT" ]]; then
  150:   yq write -i $CONFIG_FILE cfClientConfig.readTimeout "$CF_CLIENT_READ_TIMEOUT"
  151  fi

  153  if [[ "" != "$CF_MIGRATION_ENABLED" ]]; then
  154:   yq write -i $CONFIG_FILE cfMigrationConfig.enabled "$CF_MIGRATION_ENABLED"
  155  fi

  157  if [[ "" != "$CF_MIGRATION_ADMIN_URL" ]]; then
  158:   yq write -i $CONFIG_FILE cfMigrationConfig.adminUrl "$CF_MIGRATION_ADMIN_URL"
  159  fi

  161  if [[ "" != "$CF_MIGRATION_API_KEY" ]]; then
  162:   yq write -i $CONFIG_FILE cfMigrationConfig.apiKey "$CF_MIGRATION_API_KEY"
  163  fi

  165  if [[ "" != "$CF_MIGRATION_ACCOUNT" ]]; then
  166:   yq write -i $CONFIG_FILE cfMigrationConfig.account "$CF_MIGRATION_ACCOUNT"
  167  fi

  169  if [[ "" != "$CF_MIGRATION_ORG" ]]; then
  170:   yq write -i $CONFIG_FILE cfMigrationConfig.org "$CF_MIGRATION_ORG"
  171  fi

  173  if [[ "" != "$CF_MIGRATION_PROJECT" ]]; then
  174:   yq write -i $CONFIG_FILE cfMigrationConfig.project "$CF_MIGRATION_PROJECT"
  175  fi

  177  if [[ "" != "$CF_MIGRATION_ENVIRONMENT" ]]; then
  178:   yq write -i $CONFIG_FILE cfMigrationConfig.environment "$CF_MIGRATION_ENVIRONMENT"
  179  fi

  185  if [[ "" != "$ELASTICSEARCH_URI" ]]; then
  186:   yq write -i $CONFIG_FILE elasticsearch.uri "$ELASTICSEARCH_URI"
  187  fi

  189  if [[ "" != "$ELASTICSEARCH_INDEX_SUFFIX" ]]; then
  190:   yq write -i $CONFIG_FILE elasticsearch.indexSuffix "$ELASTICSEARCH_INDEX_SUFFIX"
  191  fi

  193  if [[ "" != "$ELASTICSEARCH_MONGO_TAG_NAME" ]]; then
  194:  yq write -i $CONFIG_FILE elasticsearch.mongoTagKey "$ELASTICSEARCH_MONGO_TAG_NAME"
  195  fi

  197  if [[ "" != "$ELASTICSEARCH_MONGO_TAG_VALUE" ]]; then
  198:  yq write -i $CONFIG_FILE elasticsearch.mongoTagValue "$ELASTICSEARCH_MONGO_TAG_VALUE"
  199  fi

  201  if [[ "" != "$MONGO_LOCK_URI" ]]; then
  202:   yq write -i $CONFIG_FILE mongo.locksUri "${MONGO_LOCK_URI//\\&/&}"
  203  fi
  204  
  205: yq write -i $CONFIG_FILE server.requestLog.appenders[0].threshold "TRACE"
  206  

  209    yq delete -i $CONFIG_FILE logging.appenders[0]
  210:   yq write -i $CONFIG_FILE logging.appenders[0].stackdriverLogEnabled "true"
  211  else

  213      yq delete -i $CONFIG_FILE logging.appenders[1]
  214:     yq write -i $CONFIG_FILE logging.appenders[1].currentLogFilename "/opt/harness/logs/portal.log"
  215:     yq write -i $CONFIG_FILE logging.appenders[1].archivedLogFilenamePattern "/opt/harness/logs/portal.%d.%i.log"
  216    else

  222  if [[ "" != "$WATCHER_METADATA_URL" ]]; then
  223:   yq write -i $CONFIG_FILE watcherMetadataUrl "$WATCHER_METADATA_URL"
  224  fi

  226  if [[ "" != "$DELEGATE_METADATA_URL" ]]; then
  227:   yq write -i $CONFIG_FILE delegateMetadataUrl "$DELEGATE_METADATA_URL"
  228  fi

  230  if [[ "" != "$API_URL" ]]; then
  231:   yq write -i $CONFIG_FILE apiUrl "$API_URL"
  232  fi

  234  if [[ "" != "$ENV_PATH" ]]; then
  235:   yq write -i $CONFIG_FILE envPath "$ENV_PATH"
  236  fi

  238  if [[ "" != "$DEPLOY_MODE" ]]; then
  239:   yq write -i $CONFIG_FILE deployMode "$DEPLOY_MODE"
  240  fi

  242  if [[ "" != "$KUBECTL_VERSION" ]]; then
  243:   yq write -i $CONFIG_FILE kubectlVersion "$KUBECTL_VERSION"
  244  fi
  245  
  246: yq write -i $NEWRELIC_FILE common.license_key "$NEWRELIC_LICENSE_KEY"
  247  
  248  if [[ "$DISABLE_NEW_RELIC" == "true" ]]; then
  249:   yq write -i $NEWRELIC_FILE common.agent_enabled false
  250  fi

  252  if [[ "" != "$jwtPasswordSecret" ]]; then
  253:   yq write -i $CONFIG_FILE portal.jwtPasswordSecret "$jwtPasswordSecret"
  254  fi

  256  if [[ "" != "$jwtExternalServiceSecret" ]]; then
  257:   yq write -i $CONFIG_FILE portal.jwtExternalServiceSecret "$jwtExternalServiceSecret"
  258  fi

  260  if [[ "" != "$jwtZendeskSecret" ]]; then
  261:   yq write -i $CONFIG_FILE portal.jwtZendeskSecret "$jwtZendeskSecret"
  262  fi

  264  if [[ "" != "$jwtMultiAuthSecret" ]]; then
  265:   yq write -i $CONFIG_FILE portal.jwtMultiAuthSecret "$jwtMultiAuthSecret"
  266  fi

  268  if [[ "" != "$jwtSsoRedirectSecret" ]]; then
  269:   yq write -i $CONFIG_FILE portal.jwtSsoRedirectSecret "$jwtSsoRedirectSecret"
  270  fi

  272  if [[ "" != "$jwtAuthSecret" ]]; then
  273:   yq write -i $CONFIG_FILE portal.jwtAuthSecret "$jwtAuthSecret"
  274  fi

  276  if [[ "" != "$jwtMarketPlaceSecret" ]]; then
  277:   yq write -i $CONFIG_FILE portal.jwtMarketPlaceSecret "$jwtMarketPlaceSecret"
  278  fi

  280  if [[ "" != "$jwtIdentityServiceSecret" ]]; then
  281:   yq write -i $CONFIG_FILE portal.jwtIdentityServiceSecret "$jwtIdentityServiceSecret"
  282  fi

  284  if [[ "" != "$jwtDataHandlerSecret" ]]; then
  285:   yq write -i $CONFIG_FILE portal.jwtDataHandlerSecret "$jwtDataHandlerSecret"
  286  fi

  288  if [[ "" != "$jwtNextGenManagerSecret" ]]; then
  289:   yq write -i $CONFIG_FILE portal.jwtNextGenManagerSecret "$jwtNextGenManagerSecret"
  290  fi

  293  if [[ "" != "$FEATURES" ]]; then
  294:   yq write -i $CONFIG_FILE featuresEnabled "$FEATURES"
  295  fi

  297  if [[ "" != "$SAMPLE_TARGET_ENV" ]]; then
  298:   yq write -i $CONFIG_FILE sampleTargetEnv "$SAMPLE_TARGET_ENV"
  299  fi

  301  if [[ "" != "$SAMPLE_TARGET_STATUS_HOST" ]]; then
  302:   yq write -i $CONFIG_FILE sampleTargetStatusHost "$SAMPLE_TARGET_STATUS_HOST"
  303  fi

  305  if [[ "" != "$GLOBAL_WHITELIST" ]]; then
  306:   yq write -i $CONFIG_FILE globalWhitelistConfig.filters "$GLOBAL_WHITELIST"
  307  fi

  309  if [[ "" != "$SMTP_HOST" ]]; then
  310:   yq write -i $CONFIG_FILE smtp.host "$SMTP_HOST"
  311  fi

  313  if [[ "" != "$SMTP_USERNAME" ]]; then
  314:   yq write -i $CONFIG_FILE smtp.username "$SMTP_USERNAME"
  315  fi

  317  if [[ "" != "$SMTP_PASSWORD" ]]; then
  318:   yq write -i $CONFIG_FILE smtp.password "$SMTP_PASSWORD"
  319  fi

  321  if [[ "" != "$SMTP_USE_SSL" ]]; then
  322:   yq write -i $CONFIG_FILE smtp.useSSL "$SMTP_USE_SSL"
  323  fi

  325  if [[ "" != "$MARKETO_ENABLED" ]]; then
  326:   yq write -i $CONFIG_FILE marketoConfig.enabled "$MARKETO_ENABLED"
  327  fi

  329  if [[ "" != "$MARKETO_URL" ]]; then
  330:   yq write -i $CONFIG_FILE marketoConfig.url "$MARKETO_URL"
  331  fi

  333  if [[ "" != "$MARKETO_CLIENT_ID" ]]; then
  334:   yq write -i $CONFIG_FILE marketoConfig.clientId "$MARKETO_CLIENT_ID"
  335  fi

  337  if [[ "" != "$MARKETO_CLIENT_SECRET" ]]; then
  338:   yq write -i $CONFIG_FILE marketoConfig.clientSecret "$MARKETO_CLIENT_SECRET"
  339  fi

  341  if [[ "" != "$SEGMENT_ENABLED" ]]; then
  342:   yq write -i $CONFIG_FILE segmentConfig.enabled "$SEGMENT_ENABLED"
  343  fi

  345  if [[ "" != "$SEGMENT_URL" ]]; then
  346:   yq write -i $CONFIG_FILE segmentConfig.url "$SEGMENT_URL"
  347  fi

  349  if [[ "" != "$SEGMENT_APIKEY" ]]; then
  350:   yq write -i $CONFIG_FILE segmentConfig.apiKey "$SEGMENT_APIKEY"
  351  fi

  353  if [[ "" != "$SALESFORCE_USERNAME" ]]; then
  354:   yq write -i $CONFIG_FILE salesforceConfig.userName "$SALESFORCE_USERNAME"
  355  fi

  357  if [[ "" != "$SALESFORCE_PASSWORD" ]]; then
  358:   yq write -i $CONFIG_FILE salesforceConfig.password "$SALESFORCE_PASSWORD"
  359  fi

  361  if [[ "" != "$SALESFORCE_CONSUMER_KEY" ]]; then
  362:   yq write -i $CONFIG_FILE salesforceConfig.consumerKey "$SALESFORCE_CONSUMER_KEY"
  363  fi

  365  if [[ "" != "$SALESFORCE_CONSUMER_SECRET" ]]; then
  366:   yq write -i $CONFIG_FILE salesforceConfig.consumerSecret "$SALESFORCE_CONSUMER_SECRET"
  367  fi

  369  if [[ "" != "$SALESFORCE_GRANT_TYPE" ]]; then
  370:   yq write -i $CONFIG_FILE salesforceConfig.grantType "$SALESFORCE_GRANT_TYPE"
  371  fi

  373  if [[ "" != "$SALESFORCE_LOGIN_INSTANCE_DOMAIN" ]]; then
  374:   yq write -i $CONFIG_FILE salesforceConfig.loginInstanceDomain "$SALESFORCE_LOGIN_INSTANCE_DOMAIN"
  375  fi

  377  if [[ "" != "$SALESFORCE_API_VERSION" ]]; then
  378:   yq write -i $CONFIG_FILE salesforceConfig.apiVersion "$SALESFORCE_API_VERSION"
  379  fi

  381  if [[ "" != "$SALESFORCE_INTEGRATION_ENABLED" ]]; then
  382:   yq write -i $CONFIG_FILE salesforceConfig.enabled "$SALESFORCE_INTEGRATION_ENABLED"
  383  fi

  385  if [[ "" != "$CE_SETUP_CONFIG_AWS_ACCOUNT_ID" ]]; then
  386:   yq write -i $CONFIG_FILE ceSetUpConfig.awsAccountId "$CE_SETUP_CONFIG_AWS_ACCOUNT_ID"
  387  fi

  389  if [[ "" != "$CE_SETUP_CONFIG_AWS_S3_BUCKET_NAME" ]]; then
  390:   yq write -i $CONFIG_FILE ceSetUpConfig.awsS3BucketName "$CE_SETUP_CONFIG_AWS_S3_BUCKET_NAME"
  391  fi

  393  if [[ "" != "$CE_SETUP_CONFIG_GCP_PROJECT_ID" ]]; then
  394:   yq write -i $CONFIG_FILE ceSetUpConfig.gcpProjectId "$CE_SETUP_CONFIG_GCP_PROJECT_ID"
  395  fi

  397  if [[ "" != "$CE_SETUP_CONFIG_AWS_ROLE_NAME" ]]; then
  398:   yq write -i $CONFIG_FILE ceSetUpConfig.awsRoleName "$CE_SETUP_CONFIG_AWS_ROLE_NAME"
  399  fi

  401  if [[ "" != "$CE_SETUP_CONFIG_SAMPLE_ACCOUNT_ID" ]]; then
  402:   yq write -i $CONFIG_FILE ceSetUpConfig.sampleAccountId "$CE_SETUP_CONFIG_SAMPLE_ACCOUNT_ID"
  403  fi

  405  if [[ "" != "$CE_SETUP_CONFIG_AWS_ACCESS_KEY" ]]; then
  406:   yq write -i $CONFIG_FILE ceSetUpConfig.awsAccessKey "$CE_SETUP_CONFIG_AWS_ACCESS_KEY"
  407  fi

  409  if [[ "" != "$CE_SETUP_CONFIG_AWS_SECRET_KEY" ]]; then
  410:   yq write -i $CONFIG_FILE ceSetUpConfig.awsSecretKey "$CE_SETUP_CONFIG_AWS_SECRET_KEY"
  411  fi

  413  if [[ "" != "$CE_SETUP_CONFIG_MASTER_CLOUD_FORMATION" ]]; then
  414:   yq write -i $CONFIG_FILE ceSetUpConfig.masterAccountCloudFormationTemplateLink "$CE_SETUP_CONFIG_MASTER_CLOUD_FORMATION"
  415  fi

  417  if [[ "" != "$CE_SETUP_CONFIG_LINKED_CLOUD_FORMATION" ]]; then
  418:   yq write -i $CONFIG_FILE ceSetUpConfig.linkedAccountCloudFormationTemplateLink "$CE_SETUP_CONFIG_LINKED_CLOUD_FORMATION"
  419  fi

  421  if [[ "" != "$CE_SETUP_CONFIG_AZURE_CLIENTSECRET" ]]; then
  422:   yq write -i $CONFIG_FILE ceSetUpConfig.azureAppClientSecret "$CE_SETUP_CONFIG_AZURE_CLIENTSECRET"
  423  fi

  425  if [[ "" != "$CE_SETUP_CONFIG_AZURE_CLIENTID" ]]; then
  426:   yq write -i $CONFIG_FILE ceSetUpConfig.azureAppClientId "$CE_SETUP_CONFIG_AZURE_CLIENTID"
  427  fi

  429  if [[ "" != "$DATADOG_ENABLED" ]]; then
  430:   yq write -i $CONFIG_FILE datadogConfig.enabled "$DATADOG_ENABLED"
  431  fi

  433  if [[ "" != "$DATADOG_APIKEY" ]]; then
  434:   yq write -i $CONFIG_FILE datadogConfig.apiKey "$DATADOG_APIKEY"
  435  fi

  437  if [[ "" != "$DELEGATE_DOCKER_IMAGE" ]]; then
  438:   yq write -i $CONFIG_FILE portal.delegateDockerImage "$DELEGATE_DOCKER_IMAGE"
  439  fi

  441  if [[ "" != "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT" ]]; then
  442:   yq write -i $CONFIG_FILE portal.optionalDelegateTaskRejectAtLimit "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT"
  443  fi

  445  if [[ "" != "$EXECUTION_LOG_DATA_STORE" ]]; then
  446:   yq write -i $CONFIG_FILE executionLogStorageMode "$EXECUTION_LOG_DATA_STORE"
  447  fi

  449  if [[ "" != "$FILE_STORAGE" ]]; then
  450:   yq write -i $CONFIG_FILE fileStorageMode "$FILE_STORAGE"
  451  fi

  453  if [[ "" != "$CLUSTER_NAME" ]]; then
  454:   yq write -i $CONFIG_FILE clusterName "$CLUSTER_NAME"
  455  fi

  457  if [[ "" != "$DEPLOYMENT_CLUSTER_NAME" ]]; then
  458:   yq write -i $CONFIG_FILE deploymentClusterName "$DEPLOYMENT_CLUSTER_NAME"
  459  fi

  461  if [[ "" != "$BACKGROUND_SCHEDULER_CLUSTERED" ]]; then
  462:   yq write -i $CONFIG_FILE backgroundScheduler.clustered "$BACKGROUND_SCHEDULER_CLUSTERED"
  463  fi

  465  if [[ "" != "$ENABLE_CRONS" ]]; then
  466:   yq write -i $CONFIG_FILE enableIterators "$ENABLE_CRONS"
  467:   yq write -i $CONFIG_FILE backgroundScheduler.enabled "$ENABLE_CRONS"
  468:   yq write -i $CONFIG_FILE serviceScheduler.enabled "$ENABLE_CRONS"
  469  fi

  471  if [[ "" != "$ALLOW_TRIAL_REGISTRATION" ]]; then
  472:   yq write -i $CONFIG_FILE trialRegistrationAllowed "$ALLOW_TRIAL_REGISTRATION"
  473  fi

  475  if [[ "" != "$EVENTS_FRAMEWORK_AVAILABLE_IN_ONPREM" ]]; then
  476:   yq write -i $CONFIG_FILE eventsFrameworkAvailableInOnPrem "$EVENTS_FRAMEWORK_AVAILABLE_IN_ONPREM"
  477  else
  478:   yq write -i $CONFIG_FILE eventsFrameworkAvailableInOnPrem "false"
  479  fi

  481  if [[ "" != "$ALLOW_TRIAL_REGISTRATION_FOR_BUGATHON" ]]; then
  482:   yq write -i $CONFIG_FILE trialRegistrationAllowedForBugathon "$ALLOW_TRIAL_REGISTRATION_FOR_BUGATHON"
  483  fi

  485  if [[ "" != "$GITHUB_OAUTH_CLIENT" ]]; then
  486:   yq write -i $CONFIG_FILE githubConfig.clientId "$GITHUB_OAUTH_CLIENT"
  487  fi

  489  if [[ "" != "$GITHUB_OAUTH_SECRET" ]]; then
  490:   yq write -i $CONFIG_FILE githubConfig.clientSecret "$GITHUB_OAUTH_SECRET"
  491  fi

  493  if [[ "" != "$GITHUB_OAUTH_CALLBACK_URL" ]]; then
  494:   yq write -i $CONFIG_FILE githubConfig.callbackUrl "$GITHUB_OAUTH_CALLBACK_URL"
  495  fi

  497  if [[ "" != "$AZURE_OAUTH_CLIENT" ]]; then
  498:   yq write -i $CONFIG_FILE azureConfig.clientId "$AZURE_OAUTH_CLIENT"
  499  fi

  501  if [[ "" != "$AZURE_OAUTH_SECRET" ]]; then
  502:   yq write -i $CONFIG_FILE azureConfig.clientSecret "$AZURE_OAUTH_SECRET"
  503  fi

  505  if [[ "" != "$AZURE_OAUTH_CALLBACK_URL" ]]; then
  506:   yq write -i $CONFIG_FILE azureConfig.callbackUrl "$AZURE_OAUTH_CALLBACK_URL"
  507  fi

  509  if [[ "" != "$GOOGLE_OAUTH_CLIENT" ]]; then
  510:   yq write -i $CONFIG_FILE googleConfig.clientId "$GOOGLE_OAUTH_CLIENT"
  511  fi

  513  if [[ "" != "$GOOGLE_OAUTH_SECRET" ]]; then
  514:   yq write -i $CONFIG_FILE googleConfig.clientSecret "$GOOGLE_OAUTH_SECRET"
  515  fi

  517  if [[ "" != "$GOOGLE_OAUTH_CALLBACK_URL" ]]; then
  518:   yq write -i $CONFIG_FILE googleConfig.callbackUrl "$GOOGLE_OAUTH_CALLBACK_URL"
  519  fi

  521  if [[ "" != "$BITBUCKET_OAUTH_CLIENT" ]]; then
  522:   yq write -i $CONFIG_FILE bitbucketConfig.clientId "$BITBUCKET_OAUTH_CLIENT"
  523  fi

  525  if [[ "" != "$BITBUCKET_OAUTH_SECRET" ]]; then
  526:   yq write -i $CONFIG_FILE bitbucketConfig.clientSecret "$BITBUCKET_OAUTH_SECRET"
  527  fi

  529  if [[ "" != "$BITBUCKET_OAUTH_CALLBACK_URL" ]]; then
  530:   yq write -i $CONFIG_FILE bitbucketConfig.callbackUrl "$BITBUCKET_OAUTH_CALLBACK_URL"
  531  fi

  533  if [[ "" != "$GITLAB_OAUTH_CLIENT" ]]; then
  534:   yq write -i $CONFIG_FILE gitlabConfig.clientId "$GITLAB_OAUTH_CLIENT"
  535  fi

  537  if [[ "" != "$GITLAB_OAUTH_SECRET" ]]; then
  538:   yq write -i $CONFIG_FILE gitlabConfig.clientSecret "$GITLAB_OAUTH_SECRET"
  539  fi

  541  if [[ "" != "$GITLAB_OAUTH_CALLBACK_URL" ]]; then
  542:   yq write -i $CONFIG_FILE gitlabConfig.callbackUrl "$GITLAB_OAUTH_CALLBACK_URL"
  543  fi

  545  if [[ "" != "$LINKEDIN_OAUTH_CLIENT" ]]; then
  546:   yq write -i $CONFIG_FILE linkedinConfig.clientId "$LINKEDIN_OAUTH_CLIENT"
  547  fi

  549  if [[ "" != "$LINKEDIN_OAUTH_SECRET" ]]; then
  550:   yq write -i $CONFIG_FILE linkedinConfig.clientSecret "$LINKEDIN_OAUTH_SECRET"
  551  fi

  553  if [[ "" != "$LINKEDIN_OAUTH_CALLBACK_URL" ]]; then
  554:   yq write -i $CONFIG_FILE linkedinConfig.callbackUrl "$LINKEDIN_OAUTH_CALLBACK_URL"
  555  fi

  557  if [[ "" != "$AWS_MARKETPLACE_ACCESSKEY" ]]; then
  558:   yq write -i $CONFIG_FILE mktPlaceConfig.awsAccessKey "$AWS_MARKETPLACE_ACCESSKEY"
  559  fi

  561  if [[ "" != "$AWS_MARKETPLACE_SECRETKEY" ]]; then
  562:   yq write -i $CONFIG_FILE mktPlaceConfig.awsSecretKey "$AWS_MARKETPLACE_SECRETKEY"
  563  fi

  565  if [[ "" != "$AWS_MARKETPLACE_PRODUCTCODE" ]]; then
  566:   yq write -i $CONFIG_FILE mktPlaceConfig.awsMarketPlaceProductCode "$AWS_MARKETPLACE_PRODUCTCODE"
  567  fi

  569  if [[ "" != "$AWS_MARKETPLACE_CE_PRODUCTCODE" ]]; then
  570:   yq write -i $CONFIG_FILE mktPlaceConfig.awsMarketPlaceCeProductCode "$AWS_MARKETPLACE_CE_PRODUCTCODE"
  571  fi

  573  if [[ "" != "$ALLOW_BLACKLISTED_EMAIL_DOMAINS" ]]; then
  574:   yq write -i $CONFIG_FILE blacklistedEmailDomainsAllowed "$ALLOW_BLACKLISTED_EMAIL_DOMAINS"
  575  fi

  577  if [[ "" != "$ALLOW_PWNED_PASSWORDS" ]]; then
  578:   yq write -i $CONFIG_FILE pwnedPasswordsAllowed "$ALLOW_PWNED_PASSWORDS"
  579  fi

  581  if [[ "" != "$TIMESCALEDB_URI" ]]; then
  582:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALEDB_URI"
  583  fi

  585  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
  586:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
  587  fi

  589  if [[ "" != "$TIMESCALEDB_PASSWORD" ]]; then
  590:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALEDB_PASSWORD"
  591  fi

  593  if [[ "" != "$TIMESCALEDB_CONNECT_TIMEOUT" ]]; then
  594:   yq write -i $CONFIG_FILE timescaledb.connectTimeout "$TIMESCALEDB_CONNECT_TIMEOUT"
  595  fi

  597  if [[ "" != "$TIMESCALEDB_SOCKET_TIMEOUT" ]]; then
  598:   yq write -i $CONFIG_FILE timescaledb.socketTimeout "$TIMESCALEDB_SOCKET_TIMEOUT"
  599  fi

  601  if [[ "" != "$TIMESCALEDB_LOGUNCLOSED" ]]; then
  602:   yq write -i $CONFIG_FILE timescaledb.logUnclosedConnections "$TIMESCALEDB_LOGUNCLOSED"
  603  fi

  605  if [[ "" != "$TIMESCALEDB_LOGGERLEVEL" ]]; then
  606:   yq write -i $CONFIG_FILE timescaledb.loggerLevel "$TIMESCALEDB_LOGGERLEVEL"
  607  fi

  609  if [[ "$TIMESCALEDB_HEALTH_CHECK_NEEDED" == "true" ]]; then
  610:   yq write -i $CONFIG_FILE timescaledb.isHealthCheckNeeded "$TIMESCALEDB_HEALTH_CHECK_NEEDED"
  611  fi

  613  if [[ "$SEARCH_ENABLED" == "true" ]]; then
  614:   yq write -i $CONFIG_FILE searchEnabled true
  615  fi

  617  if [[ "$GRAPHQL_ENABLED" == "false" ]]; then
  618:   yq write -i $CONFIG_FILE graphQLEnabled false
  619  fi

  621  if [[ "$MONGO_DEBUGGING_ENABLED" == "true" ]]; then
  622:   yq write -i $CONFIG_FILE logging.loggers.[org.mongodb.morphia.query] TRACE
  623:   yq write -i $CONFIG_FILE logging.loggers.connection TRACE
  624  fi

  626  if [[ "" != "$AZURE_MARKETPLACE_ACCESSKEY" ]]; then
  627:   yq write -i $CONFIG_FILE mktPlaceConfig.azureMarketplaceAccessKey "$AZURE_MARKETPLACE_ACCESSKEY"
  628  fi

  630  if [[ "" != "$AZURE_MARKETPLACE_SECRETKEY" ]]; then
  631:   yq write -i $CONFIG_FILE mktPlaceConfig.azureMarketplaceSecretKey "$AZURE_MARKETPLACE_SECRETKEY"
  632  fi

  638      WORKER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
  639:     yq write -i $CONFIG_FILE workers.active.[$WORKER] "${WORKER_FLAG}"
  640    done

  647      PUBLISHER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
  648:     yq write -i $CONFIG_FILE publishers.active.[$PUBLISHER] "${PUBLISHER_FLAG}"
  649    done

  652  if [[ "" != "$DISTRIBUTED_LOCK_IMPLEMENTATION" ]]; then
  653:   yq write -i $CONFIG_FILE distributedLockImplementation "$DISTRIBUTED_LOCK_IMPLEMENTATION"
  654  fi

  656  if [[ "" != "$ATMOSPHERE_BACKEND" ]]; then
  657:   yq write -i $CONFIG_FILE atmosphereBroadcaster "$ATMOSPHERE_BACKEND"
  658  fi

  662  if [[ "" != "$REDIS_URL" ]]; then
  663:   yq write -i $CONFIG_FILE redisLockConfig.redisUrl "$REDIS_URL"
  664:   yq write -i $CONFIG_FILE redisAtmosphereConfig.redisUrl "$REDIS_URL"
  665:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$REDIS_URL"
  666  fi

  668  if [[ "$REDIS_SENTINEL" == "true" ]]; then
  669:   yq write -i $CONFIG_FILE redisLockConfig.sentinel true
  670:   yq write -i $CONFIG_FILE redisAtmosphereConfig.sentinel true
  671    yq delete -i $REDISSON_CACHE_FILE singleServerConfig

  674  if [[ "" != "$REDIS_MASTER_NAME" ]]; then
  675:   yq write -i $CONFIG_FILE redisLockConfig.masterName "$REDIS_MASTER_NAME"
  676:   yq write -i $CONFIG_FILE redisAtmosphereConfig.masterName "$REDIS_MASTER_NAME"
  677:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$REDIS_MASTER_NAME"
  678  fi

  683    for REDIS_SENTINEL_URL in "${REDIS_SENTINEL_URLS[@]}"; do
  684:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  685:     yq write -i $CONFIG_FILE redisAtmosphereConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  686:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[+] "${REDIS_SENTINEL_URL}"
  687      INDEX=$(expr $INDEX + 1)

  691  if [[ "" != "$REDIS_ENV_NAMESPACE" ]]; then
  692:     yq write -i $CONFIG_FILE redisLockConfig.envNamespace "$REDIS_ENV_NAMESPACE"
  693:     yq write -i $CONFIG_FILE redisAtmosphereConfig.envNamespace "$REDIS_ENV_NAMESPACE"
  694  fi

  696  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  697:   yq write -i $CONFIG_FILE redisLockConfig.nettyThreads "$REDIS_NETTY_THREADS"
  698:   yq write -i $CONFIG_FILE redisAtmosphereConfig.nettyThreads "$REDIS_NETTY_THREADS"
  699:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  700  fi

  702  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  703:   yq write -i $CONFIG_FILE redisLockConfig.useScriptCache false
  704:   yq write -i $CONFIG_FILE redisAtmosphereConfig.useScriptCache false
  705:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  706  fi

  708  if [[ "" != "$CACHE_NAMESPACE" ]]; then
  709:     yq write -i $CONFIG_FILE cacheConfig.cacheNamespace "$CACHE_NAMESPACE"
  710  fi

  712  if [[ "" != "$CACHE_BACKEND" ]]; then
  713:     yq write -i $CONFIG_FILE cacheConfig.cacheBackend "$CACHE_BACKEND"
  714  fi

  716  if [[ "" != "$GCP_MARKETPLACE_ENABLED" ]]; then
  717:     yq write -i $CONFIG_FILE gcpMarketplaceConfig.enabled "$GCP_MARKETPLACE_ENABLED"
  718  fi

  720  if [[ "" != "$GCP_MARKETPLACE_SUBSCRIPTION_NAME" ]]; then
  721:     yq write -i $CONFIG_FILE gcpMarketplaceConfig.subscriptionName "$GCP_MARKETPLACE_SUBSCRIPTION_NAME"
  722  fi

  724  if [[ "" != "$CURRENT_JRE" ]]; then
  725:   yq write -i $CONFIG_FILE currentJre "$CURRENT_JRE"
  726  fi

  728  if [[ "" != "$MIGRATE_TO_JRE" ]]; then
  729:   yq write -i $CONFIG_FILE migrateToJre "$MIGRATE_TO_JRE"
  730  fi

  732  if [[ "" != "$ORACLE_JRE_TAR_PATH" ]]; then
  733:   yq write -i $CONFIG_FILE jreConfigs.oracle8u191.jreTarPath "$ORACLE_JRE_TAR_PATH"
  734  fi

  736  if [[ "" != "$OPENJDK_JRE_TAR_PATH" ]]; then
  737:   yq write -i $CONFIG_FILE jreConfigs.openjdk8u242.jreTarPath "$OPENJDK_JRE_TAR_PATH"
  738  fi

  740  if [[ "" != "$CDN_URL" ]]; then
  741:   yq write -i $CONFIG_FILE cdnConfig.url "$CDN_URL"
  742  fi

  744  if [[ "" != "$CDN_KEY" ]]; then
  745:   yq write -i $CONFIG_FILE cdnConfig.keyName "$CDN_KEY"
  746  fi

  748  if [[ "" != "$CDN_KEY_SECRET" ]]; then
  749:   yq write -i $CONFIG_FILE cdnConfig.keySecret "$CDN_KEY_SECRET"
  750  fi

  752  if [[ "" != "$CDN_DELEGATE_JAR_PATH" ]]; then
  753:   yq write -i $CONFIG_FILE cdnConfig.delegateJarPath "$CDN_DELEGATE_JAR_PATH"
  754  fi

  756  if [[ "" != "$CDN_WATCHER_JAR_BASE_PATH" ]]; then
  757:   yq write -i $CONFIG_FILE cdnConfig.watcherJarBasePath "$CDN_WATCHER_JAR_BASE_PATH"
  758  fi

  760  if [[ "" != "$CDN_WATCHER_JAR_PATH" ]]; then
  761:   yq write -i $CONFIG_FILE cdnConfig.watcherJarPath "$CDN_WATCHER_JAR_PATH"
  762  fi

  764  if [[ "" != "$CDN_WATCHER_METADATA_FILE_PATH" ]]; then
  765:   yq write -i $CONFIG_FILE cdnConfig.watcherMetaDataFilePath "$CDN_WATCHER_METADATA_FILE_PATH"
  766  fi

  768  if [[ "" != "$CDN_ORACLE_JRE_TAR_PATH" ]]; then
  769:   yq write -i $CONFIG_FILE cdnConfig.cdnJreTarPaths.oracle8u191 "$CDN_ORACLE_JRE_TAR_PATH"
  770  fi

  772  if [[ "" != "$CDN_OPENJDK_JRE_TAR_PATH" ]]; then
  773:   yq write -i $CONFIG_FILE cdnConfig.cdnJreTarPaths.openjdk8u242 "$CDN_OPENJDK_JRE_TAR_PATH"
  774  fi

  776  if [[ "" != "$COMMAND_LIBRARY_SERVICE_BASE_URL" ]]; then
  777:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.baseUrl "$COMMAND_LIBRARY_SERVICE_BASE_URL"
  778  fi

  780  if [[ "" != "$BUGSNAG_API_KEY" ]]; then
  781:   yq write -i $CONFIG_FILE bugsnagApiKey "$BUGSNAG_API_KEY"
  782  fi

  784  if [[ "" != "$ACCOUNT_LICENSE_CHECK_JOB_FREQUENCY" ]]; then
  785:   yq write -i $CONFIG_FILE jobsFrequencyConfig.accountLicenseCheckJobFrequencyInMinutes "$ACCOUNT_LICENSE_CHECK_JOB_FREQUENCY"
  786  fi

  788  if [[ "" != "$ACCOUNT_DELETION_JOB_FREQUENCY" ]]; then
  789:   yq write -i $CONFIG_FILE jobsFrequencyConfig.accountDeletionJobFrequencyInMinutes "$ACCOUNT_DELETION_JOB_FREQUENCY"
  790  fi

  792  if [[ "" != "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET" ]]; then
  793:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.managerToCommandLibraryServiceSecret "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET"
  794  fi

  796  if [[ "" != "$DELEGATE_SERVICE_TARGET" ]]; then
  797:   yq write -i $CONFIG_FILE grpcDelegateServiceClientConfig.target "$DELEGATE_SERVICE_TARGET"
  798  fi

  800  if [[ "" != "$DELEGATE_SERVICE_AUTHORITY" ]]; then
  801:   yq write -i $CONFIG_FILE grpcDelegateServiceClientConfig.authority "$DELEGATE_SERVICE_AUTHORITY"
  802  fi

  804  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_AUTHORITY" ]]; then
  805:   yq write -i $CONFIG_FILE grpcDMSClientConfig.authority "$DELEGATE_SERVICE_MANAGEMENT_AUTHORITY"
  806  fi

  808  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_TARGET" ]]; then
  809:   yq write -i $CONFIG_FILE grpcDMSClientConfig.target "$DELEGATE_SERVICE_MANAGEMENT_TARGET"
  810  fi

  812  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_SECRET" ]]; then
  813:   yq write -i $CONFIG_FILE dmsSecret "$DELEGATE_SERVICE_MANAGEMENT_SECRET"
  814  fi

  817  if [[ "" != "$DELEGATE_GRPC_TARGET" ]]; then
  818:   yq write -i $CONFIG_FILE grpcOnpremDelegateClientConfig.target "$DELEGATE_GRPC_TARGET"
  819  fi

  821  if [[ "" != "$DELEGATE_GRPC_AUTHORITY" ]]; then
  822:   yq write -i $CONFIG_FILE grpcOnpremDelegateClientConfig.authority "$DELEGATE_GRPC_AUTHORITY"
  823  fi

  825  if [[ "" != "$NG_MANAGER_AUTHORITY" ]]; then
  826:   yq write -i $CONFIG_FILE grpcClientConfig.authority "$NG_MANAGER_AUTHORITY"
  827  fi

  829  if [[ "" != "$NG_MANAGER_TARGET" ]]; then
  830:   yq write -i $CONFIG_FILE grpcClientConfig.target "$NG_MANAGER_TARGET"
  831  fi

  833  if [[ "" != "$REMINDERS_BEFORE_ACCOUNT_DELETION" ]]; then
  834:   yq write -i $CONFIG_FILE numberOfRemindersBeforeAccountDeletion "$REMINDERS_BEFORE_ACCOUNT_DELETION"
  835  fi

  837  if [[ "" != "$EXPORT_DATA_BATCH_SIZE" ]]; then
  838:   yq write -i $CONFIG_FILE exportAccountDataBatchSize "$EXPORT_DATA_BATCH_SIZE"
  839  fi

  841  if [[ "" != "$COMMAND_LIBRARY_PUBLISHING_ALLOWED" ]]; then
  842:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.publishingAllowed "$COMMAND_LIBRARY_PUBLISHING_ALLOWED"
  843  fi

  845  if [[ "" != "$COMMAND_LIBRARY_PUBLISHING_SECRET" ]]; then
  846:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.publishingSecret "$COMMAND_LIBRARY_PUBLISHING_SECRET"
  847  fi

  849  if [[ "" != "$LOG_STREAMING_SERVICE_BASEURL" ]]; then
  850:   yq write -i $CONFIG_FILE logStreamingServiceConfig.baseUrl "$LOG_STREAMING_SERVICE_BASEURL"
  851  fi

  853  if [[ "" != "$LOG_STREAMING_SERVICE_TOKEN" ]]; then
  854:   yq write -i $CONFIG_FILE logStreamingServiceConfig.serviceToken "$LOG_STREAMING_SERVICE_TOKEN"
  855  fi

  857  if [[ "" != "$ACCESS_CONTROL_ENABLED" ]]; then
  858:   yq write -i $CONFIG_FILE accessControlClient.enableAccessControl $ACCESS_CONTROL_ENABLED
  859  fi

  861  if [[ "" != "$ACCESS_CONTROL_BASE_URL" ]]; then
  862:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceConfig.baseUrl $ACCESS_CONTROL_BASE_URL
  863  fi

  865  if [[ "" != "$ACCESS_CONTROL_SECRET" ]]; then
  866:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceSecret $ACCESS_CONTROL_SECRET
  867  fi

  869  if [[ "" != "$ENABLE_AUDIT" ]]; then
  870:   yq write -i $CONFIG_FILE enableAudit $ENABLE_AUDIT
  871  fi

  876    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  877:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  878      INDEX=$(expr $INDEX + 1)

  895  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
  896:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl "$NG_MANAGER_BASE_URL"
  897  fi

  899  if [[ "" != "$ENABLE_USER_CHANGESTREAM" ]]; then
  900:   yq write -i $CONFIG_FILE userChangeStreamEnabled "$ENABLE_USER_CHANGESTREAM"
  901  fi

  903  if [[ "" != "$DISABLE_DELEGATE_MGMT_IN_MANAGER" ]]; then
  904:   yq write -i $CONFIG_FILE disableDelegateMgmtInManager "$DISABLE_DELEGATE_MGMT_IN_MANAGER"
  905  fi

  907  if [[ "" != "$LDAP_GROUP_SYNC_INTERVAL" ]]; then
  908:   yq write -i $CONFIG_FILE ldapSyncJobConfig.syncInterval "$LDAP_GROUP_SYNC_INTERVAL"
  909  fi

  911  if [[ "" != "$LDAP_GROUP_SYNC_POOL_SIZE" ]]; then
  912:   yq write -i $CONFIG_FILE ldapSyncJobConfig.poolSize "$LDAP_GROUP_SYNC_POOL_SIZE"
  913  fi

  915  if [[ "" != "$LDAP_GROUP_SYNC_DEFAULT_CRON" ]]; then
  916:   yq write -i $CONFIG_FILE ldapSyncJobConfig.defaultCronExpression "$LDAP_GROUP_SYNC_DEFAULT_CRON"
  917  fi

harness/harness-core/110-change-data-capture/container/scripts/replace_configs.sh:
  10    yq delete -i $CONFIG_FILE logging.appenders[0]
  11:   yq write -i $CONFIG_FILE logging.appenders[0].stackdriverLogEnabled "true"
  12  else

  19  if [[ "" != "$MONGO_URI" ]]; then
  20:   yq write -i $CONFIG_FILE harness-mongo.uri "$MONGO_URI"
  21  fi

  23  if [[ "" != "$MONGO_TAG_NAME" ]]; then
  24:   yq write -i $CONFIG_FILE mongotags.tagKey "$MONGO_TAG_NAME"
  25  fi

  27  if [[ "" != "$MONGO_TAG_VALUE" ]]; then
  28:   yq write -i $CONFIG_FILE mongotags.tagValue "$MONGO_TAG_VALUE"
  29  fi

  31  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  32:   yq write -i $CONFIG_FILE harness-mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  33  fi

  35  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
  36:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
  37  fi

  39  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
  40:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
  41  fi

  43  if [[ "" != "$PMS_MONGO_URI" ]]; then
  44:   yq write -i $CONFIG_FILE pms-harness.uri "$PMS_MONGO_URI"
  45  fi

  47  if [[ "" != "$CDC_MONGO_URI" ]]; then
  48:   yq write -i $CONFIG_FILE cdc-mongo.uri "$CDC_MONGO_URI"
  49  fi

  51  if [[ "" != "$TIMESCALEDB_URI" ]]; then
  52:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALEDB_URI"
  53  fi

  55  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
  56:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
  57  fi

  59  if [[ "" != "$TIMESCALEDB_PASSWORD" ]]; then
  60:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALEDB_PASSWORD"
  61  fi

  63  if [[ "" != "$GCP_PROJECT_ID" ]]; then
  64:   yq write -i $CONFIG_FILE gcp-project-id "$GCP_PROJECT_ID"
  65  fi

  67  if [[ "" != "$NG_HARNESS_MONGO_URI" ]]; then
  68:   yq write -i $CONFIG_FILE ng-harness.uri  "$NG_HARNESS_MONGO_URI"
  69  fi

harness/harness-core/120-ng-manager/container/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   23  
   24:     yq write -i $CONFIG_FILE $1.hosts[$INDEX].host "$HOST"
   25      if [[ "" != "$PORT" ]]; then
   26:       yq write -i $CONFIG_FILE $1.hosts[$INDEX].port "$PORT"
   27      fi

   35      VALUE=$(cut -d= -f 2 <<< "$PARAM_PAIR")
   36:     yq write -i $CONFIG_FILE $1.params.$NAME "$VALUE"
   37    done

   40  yq delete -i $CONFIG_FILE 'server.applicationConnectors.(type==https)'
   41: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   42  

   47  if [[ "" != "$LOGGING_LEVEL" ]]; then
   48:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   49  fi

   55      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   56:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   57    done

   60  if [[ "" != "$SERVER_PORT" ]]; then
   61:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
   62  else
   63:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "7090"
   64  fi

   67  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
   68:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
   69  fi

   72    yq delete -i $CONFIG_FILE allowedOrigins
   73:   yq write -i $CONFIG_FILE allowedOrigins "$ALLOWED_ORIGINS"
   74  fi

   76  if [[ "" != "$MONGO_URI" ]]; then
   77:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   78  fi

   81    yq delete -i $CONFIG_FILE mongo.uri
   82:   yq write -i $CONFIG_FILE mongo.username "$MONGO_USERNAME"
   83:   yq write -i $CONFIG_FILE mongo.password "$MONGO_PASSWORD"
   84:   yq write -i $CONFIG_FILE mongo.database "$MONGO_DATABASE"
   85:   yq write -i $CONFIG_FILE mongo.schema "$MONGO_SCHEMA"
   86    write_mongo_hosts_and_ports mongo "$MONGO_HOSTS_AND_PORTS"

   90  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   91:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   92  fi

   94  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
   95:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
   96  fi

   98  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
   99:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
  100  fi

  102  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
  103:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
  104  fi

  106  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
  107:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
  108  fi

  110  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  111:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  112  fi

  114  if [[ "" != "$MONGO_TRANSACTIONS_ALLOWED" ]]; then
  115:   yq write -i $CONFIG_FILE mongo.transactionsEnabled $MONGO_TRANSACTIONS_ALLOWED
  116  fi

  118  if [[ "" != "$PMS_MONGO_URI" ]]; then
  119:   yq write -i $CONFIG_FILE pmsMongo.uri "${PMS_MONGO_URI//\\&/&}"
  120  fi

  123    yq delete -i $CONFIG_FILE pmsMongo.uri
  124:   yq write -i $CONFIG_FILE pmsMongo.username "$PMS_MONGO_USERNAME"
  125:   yq write -i $CONFIG_FILE pmsMongo.password "$PMS_MONGO_PASSWORD"
  126:   yq write -i $CONFIG_FILE pmsMongo.database "$PMS_MONGO_DATABASE"
  127:   yq write -i $CONFIG_FILE pmsMongo.schema "$PMS_MONGO_SCHEMA"
  128    write_mongo_hosts_and_ports pmsMongo "$PMS_MONGO_HOSTS_AND_PORTS"

  132  if [[ "" != "$MANAGER_TARGET" ]]; then
  133:   yq write -i $CONFIG_FILE grpcClient.target $MANAGER_TARGET
  134  fi

  136  if [[ "" != "$MANAGER_AUTHORITY" ]]; then
  137:   yq write -i $CONFIG_FILE grpcClient.authority $MANAGER_AUTHORITY
  138  fi

  140  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
  141:   yq write -i $CONFIG_FILE grpcServer.connectors[0].port "$GRPC_SERVER_PORT"
  142  fi

  144  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  145:   yq write -i $CONFIG_FILE nextGen.managerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  146  fi

  148  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  149:   yq write -i $CONFIG_FILE nextGen.ngManagerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  150  fi

  152  if [[ "" != "$USER_VERIFICATION_SECRET" ]]; then
  153:   yq write -i $CONFIG_FILE nextGen.userVerificationSecret "$USER_VERIFICATION_SECRET"
  154  fi

  156  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  157:   yq write -i $CONFIG_FILE nextGen.jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  158  fi

  160  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  161:   yq write -i $CONFIG_FILE nextGen.pipelineServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  162  fi

  164  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  165:   yq write -i $CONFIG_FILE nextGen.ciManagerSecret "$NEXT_GEN_MANAGER_SECRET"
  166  fi

  168  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  169:   yq write -i $CONFIG_FILE nextGen.ceNextGenServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  170  fi

  172  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  173:   yq write -i $CONFIG_FILE nextGen.ffServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  174  fi

  176  if [[ "" != "$AUTH_ENABLED" ]]; then
  177:   yq write -i $CONFIG_FILE enableAuth "$AUTH_ENABLED"
  178  fi

  180  if [[ "" != "$AUDIT_ENABLED" ]]; then
  181:   yq write -i $CONFIG_FILE enableAudit "$AUDIT_ENABLED"
  182  fi

  184  if [[ "" != "$MANAGER_CLIENT_BASEURL" ]]; then
  185:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl "$MANAGER_CLIENT_BASEURL"
  186  fi

  188  if [[ "" != "$NG_MANAGER_CLIENT_BASEURL" ]]; then
  189:   yq write -i $CONFIG_FILE ngManagerClientConfig.baseUrl "$NG_MANAGER_CLIENT_BASEURL"
  190  fi

  192  if [[ "" != "$CENG_CLIENT_BASEURL" ]]; then
  193:   yq write -i $CONFIG_FILE ceNextGenClientConfig.baseUrl "$CENG_CLIENT_BASEURL"
  194  fi

  196  if [[ "" != "$CENG_CLIENT_READ_TIMEOUT" ]]; then
  197:   yq write -i $CONFIG_FILE ceNextGenClientConfig.readTimeOutSeconds "$CENG_CLIENT_READ_TIMEOUT"
  198  fi

  200  if [[ "" != "$CENG_CLIENT_CONNECT_TIMEOUT" ]]; then
  201:   yq write -i $CONFIG_FILE ceNextGenClientConfig.connectTimeOutSeconds "$CENG_CLIENT_CONNECT_TIMEOUT"
  202  fi

  204  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  205:   yq write -i $CONFIG_FILE nextGen.jwtAuthSecret "$JWT_AUTH_SECRET"
  206  fi

  211    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  212:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  213      INDEX=$(expr $INDEX + 1)

  217  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
  218:   yq write -i $CONFIG_FILE pmsSdkGrpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
  219  fi

  222  if [[ "" != "$SHOULD_CONFIGURE_WITH_PMS" ]]; then
  223:   yq write -i $CONFIG_FILE shouldConfigureWithPMS $SHOULD_CONFIGURE_WITH_PMS
  224  fi

  226  if [[ "" != "$PMS_TARGET" ]]; then
  227:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.target $PMS_TARGET
  228  fi

  230  if [[ "" != "$PMS_AUTHORITY" ]]; then
  231:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.authority $PMS_AUTHORITY
  232  fi

  234  if [[ "" != "$NG_MANAGER_TARGET" ]]; then
  235:  yq write -i $CONFIG_FILE gitGrpcClientConfigs.core.target $NG_MANAGER_TARGET
  236  fi

  238  if [[ "" != "$NG_MANAGER_AUTHORITY" ]]; then
  239:   yq write -i $CONFIG_FILE gitGrpcClientConfigs.core.authority $NG_MANAGER_AUTHORITY
  240  fi

  242  if [[ "" != "$NG_MANAGER_TARGET" ]]; then
  243:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.target $NG_MANAGER_TARGET
  244  fi

  246  if [[ "" != "$NG_MANAGER_AUTHORITY" ]]; then
  247:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.authority $NG_MANAGER_AUTHORITY
  248  fi

  251  if [[ "" != "$HARNESS_IMAGE_USER_NAME" ]]; then
  252:   yq write -i $CONFIG_FILE ciDefaultEntityConfiguration.harnessImageUseName $HARNESS_IMAGE_USER_NAME
  253  fi

  255  if [[ "" != "$HARNESS_IMAGE_PASSWORD" ]]; then
  256:   yq write -i $CONFIG_FILE ciDefaultEntityConfiguration.harnessImagePassword $HARNESS_IMAGE_PASSWORD
  257  fi

  259  if [[ "" != "$CE_NG_CLIENT_BASEURL" ]]; then
  260:   yq write -i $CONFIG_FILE ceNextGenClientConfig.baseUrl "$CE_NG_CLIENT_BASEURL"
  261  fi

  263  if [[ "" != "$LW_CLIENT_BASEURL" ]]; then
  264:   yq write -i $CONFIG_FILE lightwingClientConfig.baseUrl "$LW_CLIENT_BASEURL"
  265  fi

  267  if [[ "" != "$CF_CLIENT_BASEURL" ]]; then
  268:   yq write -i $CONFIG_FILE ffServerClientConfig.baseUrl "$CF_CLIENT_BASEURL"
  269  fi

  271  if [[ "" != "$AUDIT_CLIENT_BASEURL" ]]; then
  272:   yq write -i $CONFIG_FILE auditClientConfig.baseUrl "$AUDIT_CLIENT_BASEURL"
  273  fi

  275  if [[ "" != "$SCM_SERVICE_URI" ]]; then
  276:   yq write -i $CONFIG_FILE gitSdkConfiguration.scmConnectionConfig.url "$SCM_SERVICE_URI"
  277  fi

  279  if [[ "" != "$LOG_STREAMING_SERVICE_BASEURL" ]]; then
  280:   yq write -i $CONFIG_FILE logStreamingServiceConfig.baseUrl "$LOG_STREAMING_SERVICE_BASEURL"
  281  fi

  283  if [[ "" != "$LOG_STREAMING_SERVICE_TOKEN" ]]; then
  284:   yq write -i $CONFIG_FILE logStreamingServiceConfig.serviceToken "$LOG_STREAMING_SERVICE_TOKEN"
  285  fi

  288    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  289:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  290  else

  294  if [[ "" != "$TIMESCALE_PASSWORD" ]]; then
  295:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALE_PASSWORD"
  296  fi

  298  if [[ "" != "$TIMESCALE_URI" ]]; then
  299:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALE_URI"
  300  fi

  302  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
  303:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
  304  fi

  306  if [[ "" != "$ENABLE_DASHBOARD_TIMESCALE" ]]; then
  307:   yq write -i $CONFIG_FILE enableDashboardTimescale $ENABLE_DASHBOARD_TIMESCALE
  308  fi

  310  if [[ "" != "$FILE_STORAGE_MODE" ]]; then
  311:   yq write -i $CONFIG_FILE fileServiceConfiguration.fileStorageMode "$FILE_STORAGE_MODE"
  312  fi

  314  if [[ "" != "$FILE_STORAGE_CLUSTER_NAME" ]]; then
  315:   yq write -i $CONFIG_FILE fileServiceConfiguration.clusterName "$FILE_STORAGE_CLUSTER_NAME"
  316  fi

  320  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  321:   yq write -i $CONFIG_FILE redisLockConfig.useScriptCache false
  322:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  323  fi

  335  if [[ "" != "$LOCK_CONFIG_REDIS_URL" ]]; then
  336:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$LOCK_CONFIG_REDIS_URL"
  337  fi

  343  if [[ "" != "$LOCK_CONFIG_SENTINEL_MASTER_NAME" ]]; then
  344:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$LOCK_CONFIG_SENTINEL_MASTER_NAME"
  345  fi

  350    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  351:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  352:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
  353      INDEX=$(expr $INDEX + 1)

  357  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  358:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  359  fi

harness/harness-core/210-command-library-server/container/scripts/replace_configs.sh:
  12    if [[ "" != "$CONFIG_VALUE" ]]; then
  13:     yq write -i "$CONFIG_FILE" "$CONFIG_KEY" "$CONFIG_VALUE"
  14    fi

  22  		do
  23: 	   	 	yq write -i /opt/harness/command-library-server-config.yml "$path[+]" "$tag"
  24  		done

  30  if [[ "" != "$LOGGING_LEVEL" ]]; then
  31:   yq write -i /opt/harness/command-library-server-config.yml logging.level "$LOGGING_LEVEL"
  32  fi

  34  if [[ "" != "$COMMAND_LIBRARY_SERVER_PORT" ]]; then
  35:   yq write -i /opt/harness/command-library-server-config.yml server.applicationConnectors[0].port "$COMMAND_LIBRARY_SERVER_PORT"
  36  else
  37:   yq write -i /opt/harness/command-library-server-config.yml server.applicationConnectors[0].port "7070"
  38  fi

  40  if [[ "" != "$MONGO_URI" ]]; then
  41:   yq write -i /opt/harness/command-library-server-config.yml mongo.uri "${MONGO_URI//\\&/&}"
  42  fi
  43  
  44: yq write -i /opt/harness/command-library-server-config.yml server.requestLog.appenders[0].type "console"
  45: yq write -i /opt/harness/command-library-server-config.yml server.requestLog.appenders[0].threshold "TRACE"
  46: yq write -i /opt/harness/command-library-server-config.yml server.requestLog.appenders[0].target "STDOUT"
  47  

  49    yq delete -i /opt/harness/command-library-server-config.yml logging.appenders[0]
  50:   yq write -i /opt/harness/command-library-server-config.yml logging.appenders[0].stackdriverLogEnabled "true"
  51  else

  55  if [[ "" != "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET" ]]; then
  56:   yq write -i /opt/harness/command-library-server-config.yml serviceSecret.managerToCommandLibraryServiceSecret "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET"
  57  fi

harness/harness-core/270-delegate-service-app/container/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   22  
   23: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   24  
   25  if [[ "" != "$LOGGING_LEVEL" ]]; then
   26:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   27  fi

   33      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   34:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   35    done

   38  if [[ "" != "$SERVER_PORT" ]]; then
   39:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
   40  else
   41:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "9080"
   42  fi

   44  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
   45:   yq write -i $CONFIG_FILE grpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
   46  fi

   48  if [[ "" != "$GRPC_SERVER_CLASSIC_PORT" ]]; then
   49:   yq write -i $CONFIG_FILE grpcServerClassicConfig.connectors[0].port "$GRPC_SERVER_CLASSIC_PORT"
   50  fi

   52  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
   53:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
   54  fi

   56  if [[ "" != "$UI_SERVER_URL" ]]; then
   57:   yq write -i $CONFIG_FILE portal.url "$UI_SERVER_URL"
   58  fi

   60  if [[ "" != "$AUTHTOKENEXPIRYINMILLIS" ]]; then
   61:   yq write -i $CONFIG_FILE portal.authTokenExpiryInMillis "$AUTHTOKENEXPIRYINMILLIS"
   62  fi

   64  if [[ "" != "$EXTERNAL_GRAPHQL_RATE_LIMIT" ]]; then
   65:   yq write -i $CONFIG_FILE portal.externalGraphQLRateLimitPerMinute "$EXTERNAL_GRAPHQL_RATE_LIMIT"
   66  fi

   68  if [[ "" != "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT" ]]; then
   69:   yq write -i $CONFIG_FILE portal.customDashGraphQLRateLimitPerMinute "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT"
   70  fi

   72  if [[ "" != "$ALLOWED_ORIGINS" ]]; then
   73:   yq write -i $CONFIG_FILE portal.allowedOrigins "$ALLOWED_ORIGINS"
   74  fi

   76  if [[ "" != "$STORE_REQUEST_PAYLOAD" ]]; then
   77:   yq write -i $CONFIG_FILE auditConfig.storeRequestPayload "$STORE_REQUEST_PAYLOAD"
   78  fi

   80  if [[ "" != "$STORE_RESPONSE_PAYLOAD" ]]; then
   81:   yq write -i $CONFIG_FILE auditConfig.storeResponsePayload "$STORE_RESPONSE_PAYLOAD"
   82  fi

   84  if [[ "" != "$MONGO_URI" ]]; then
   85:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   86  fi

   88  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   89:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   90  fi

   92  if [[ "" != "$MONGO_SSL_CONFIG" ]]; then
   93:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoSSLEnabled "$MONGO_SSL_CONFIG"
   94  fi

   96  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PATH" ]]; then
   97:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoTrustStorePath "$MONGO_SSL_CA_TRUST_STORE_PATH"
   98  fi

  100  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PASSWORD" ]]; then
  101:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoTrustStorePassword "$MONGO_SSL_CA_TRUST_STORE_PASSWORD"
  102  fi

  104  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
  105:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
  106  fi

  108  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
  109:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
  110  fi

  112  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
  113:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
  114  fi

  116  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
  117:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
  118  fi

  120  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  121:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  122  fi

  124  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
  125:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
  126  fi

  128  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
  129:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
  130  else

  134  if [[ "" != "$CF_CLIENT_API_KEY" ]]; then
  135:   yq write -i $CONFIG_FILE cfClientConfig.apiKey "$CF_CLIENT_API_KEY"
  136  fi

  138  if [[ "" != "$CF_CLIENT_CONFIG_URL" ]]; then
  139:   yq write -i $CONFIG_FILE cfClientConfig.configUrl "$CF_CLIENT_CONFIG_URL"
  140  fi

  142  if [[ "" != "$CF_CLIENT_EVENT_URL" ]]; then
  143:   yq write -i $CONFIG_FILE cfClientConfig.eventUrl "$CF_CLIENT_EVENT_URL"
  144  fi

  146  if [[ "" != "$CF_CLIENT_ANALYTICS_ENABLED" ]]; then
  147:   yq write -i $CONFIG_FILE cfClientConfig.analyticsEnabled "$CF_CLIENT_ANALYTICS_ENABLED"
  148  fi

  150  if [[ "" != "$CF_CLIENT_CONNECTION_TIMEOUT" ]]; then
  151:   yq write -i $CONFIG_FILE cfClientConfig.connectionTimeout "$CF_CLIENT_CONNECTION_TIMEOUT"
  152  fi

  154  if [[ "" != "$CF_CLIENT_READ_TIMEOUT" ]]; then
  155:   yq write -i $CONFIG_FILE cfClientConfig.readTimeout "$CF_CLIENT_READ_TIMEOUT"
  156  fi

  158  if [[ "" != "$CF_MIGRATION_ENABLED" ]]; then
  159:   yq write -i $CONFIG_FILE cfMigrationConfig.enabled "$CF_MIGRATION_ENABLED"
  160  fi

  162  if [[ "" != "$CF_MIGRATION_ADMIN_URL" ]]; then
  163:   yq write -i $CONFIG_FILE cfMigrationConfig.adminUrl "$CF_MIGRATION_ADMIN_URL"
  164  fi

  166  if [[ "" != "$CF_MIGRATION_API_KEY" ]]; then
  167:   yq write -i $CONFIG_FILE cfMigrationConfig.apiKey "$CF_MIGRATION_API_KEY"
  168  fi

  170  if [[ "" != "$CF_MIGRATION_ACCOUNT" ]]; then
  171:   yq write -i $CONFIG_FILE cfMigrationConfig.account "$CF_MIGRATION_ACCOUNT"
  172  fi

  174  if [[ "" != "$CF_MIGRATION_ORG" ]]; then
  175:   yq write -i $CONFIG_FILE cfMigrationConfig.org "$CF_MIGRATION_ORG"
  176  fi

  178  if [[ "" != "$CF_MIGRATION_PROJECT" ]]; then
  179:   yq write -i $CONFIG_FILE cfMigrationConfig.project "$CF_MIGRATION_PROJECT"
  180  fi

  182  if [[ "" != "$CF_MIGRATION_ENVIRONMENT" ]]; then
  183:   yq write -i $CONFIG_FILE cfMigrationConfig.environment "$CF_MIGRATION_ENVIRONMENT"
  184  fi

  190  if [[ "" != "$MONGO_LOCK_URI" ]]; then
  191:   yq write -i $CONFIG_FILE mongo.locksUri "${MONGO_LOCK_URI//\\&/&}"
  192  fi
  193  
  194: yq write -i $CONFIG_FILE server.requestLog.appenders[0].threshold "TRACE"
  195  

  198    yq delete -i $CONFIG_FILE logging.appenders[0]
  199:   yq write -i $CONFIG_FILE logging.appenders[0].stackdriverLogEnabled "true"
  200  else

  202      yq delete -i $CONFIG_FILE logging.appenders[1]
  203:     yq write -i $CONFIG_FILE logging.appenders[1].currentLogFilename "/opt/harness/logs/delegate-service.log"
  204:     yq write -i $CONFIG_FILE logging.appenders[1].archivedLogFilenamePattern "/opt/harness/logs/delegate-service.%d.%i.log"
  205    else

  211  if [[ "" != "$WATCHER_METADATA_URL" ]]; then
  212:   yq write -i $CONFIG_FILE watcherMetadataUrl "$WATCHER_METADATA_URL"
  213  fi

  215  if [[ "" != "$DELEGATE_METADATA_URL" ]]; then
  216:   yq write -i $CONFIG_FILE delegateMetadataUrl "$DELEGATE_METADATA_URL"
  217  fi

  219  if [[ "" != "$API_URL" ]]; then
  220:   yq write -i $CONFIG_FILE apiUrl "$API_URL"
  221  fi

  223  if [[ "" != "$ENV_PATH" ]]; then
  224:   yq write -i $CONFIG_FILE envPath "$ENV_PATH"
  225  fi

  227  if [[ "" != "$DEPLOY_MODE" ]]; then
  228:   yq write -i $CONFIG_FILE deployMode "$DEPLOY_MODE"
  229  fi

  231  if [[ "" != "$jwtPasswordSecret" ]]; then
  232:   yq write -i $CONFIG_FILE portal.jwtPasswordSecret "$jwtPasswordSecret"
  233  fi

  235  if [[ "" != "$jwtExternalServiceSecret" ]]; then
  236:   yq write -i $CONFIG_FILE portal.jwtExternalServiceSecret "$jwtExternalServiceSecret"
  237  fi

  239  if [[ "" != "$jwtZendeskSecret" ]]; then
  240:   yq write -i $CONFIG_FILE portal.jwtZendeskSecret "$jwtZendeskSecret"
  241  fi

  243  if [[ "" != "$jwtMultiAuthSecret" ]]; then
  244:   yq write -i $CONFIG_FILE portal.jwtMultiAuthSecret "$jwtMultiAuthSecret"
  245  fi

  247  if [[ "" != "$jwtSsoRedirectSecret" ]]; then
  248:   yq write -i $CONFIG_FILE portal.jwtSsoRedirectSecret "$jwtSsoRedirectSecret"
  249  fi

  251  if [[ "" != "$jwtAuthSecret" ]]; then
  252:   yq write -i $CONFIG_FILE portal.jwtAuthSecret "$jwtAuthSecret"
  253  fi

  255  if [[ "" != "$jwtMarketPlaceSecret" ]]; then
  256:   yq write -i $CONFIG_FILE portal.jwtMarketPlaceSecret "$jwtMarketPlaceSecret"
  257  fi

  259  if [[ "" != "$jwtIdentityServiceSecret" ]]; then
  260:   yq write -i $CONFIG_FILE portal.jwtIdentityServiceSecret "$jwtIdentityServiceSecret"
  261  fi

  263  if [[ "" != "$jwtDataHandlerSecret" ]]; then
  264:   yq write -i $CONFIG_FILE portal.jwtDataHandlerSecret "$jwtDataHandlerSecret"
  265  fi

  267  if [[ "" != "$jwtNextGenManagerSecret" ]]; then
  268:   yq write -i $CONFIG_FILE portal.jwtNextGenManagerSecret "$jwtNextGenManagerSecret"
  269  fi

  271  if [[ "" != "$DELEGATE_DOCKER_IMAGE" ]]; then
  272:   yq write -i $CONFIG_FILE portal.delegateDockerImage "$DELEGATE_DOCKER_IMAGE"
  273  fi

  275  if [[ "" != "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT" ]]; then
  276:   yq write -i $CONFIG_FILE portal.optionalDelegateTaskRejectAtLimit "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT"
  277  fi

  279  if [[ "" != "$BACKGROUND_SCHEDULER_CLUSTERED" ]]; then
  280:   yq write -i $CONFIG_FILE backgroundScheduler.clustered "$BACKGROUND_SCHEDULER_CLUSTERED"
  281  fi

  283  if [[ "" != "$ENABLE_CRONS" ]]; then
  284:   yq write -i $CONFIG_FILE enableIterators "$ENABLE_CRONS"
  285:   yq write -i $CONFIG_FILE backgroundScheduler.enabled "$ENABLE_CRONS"
  286:   yq write -i $CONFIG_FILE serviceScheduler.enabled "$ENABLE_CRONS"
  287  fi

  293      WORKER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
  294:     yq write -i $CONFIG_FILE workers.active.[$WORKER] "${WORKER_FLAG}"
  295    done

  302      PUBLISHER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
  303:     yq write -i $CONFIG_FILE publishers.active.[$PUBLISHER] "${PUBLISHER_FLAG}"
  304    done

  307  if [[ "" != "$DISTRIBUTED_LOCK_IMPLEMENTATION" ]]; then
  308:   yq write -i $CONFIG_FILE distributedLockImplementation "$DISTRIBUTED_LOCK_IMPLEMENTATION"
  309  fi

  311  if [[ "" != "$ATMOSPHERE_BACKEND" ]]; then
  312:   yq write -i $CONFIG_FILE atmosphereBroadcaster "$ATMOSPHERE_BACKEND"
  313  fi

  317  if [[ "" != "$REDIS_URL" ]]; then
  318:   yq write -i $CONFIG_FILE redisLockConfig.redisUrl "$REDIS_URL"
  319:   yq write -i $CONFIG_FILE redisAtmosphereConfig.redisUrl "$REDIS_URL"
  320:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$REDIS_URL"
  321  fi

  323  if [[ "$REDIS_SENTINEL" == "true" ]]; then
  324:   yq write -i $CONFIG_FILE redisLockConfig.sentinel true
  325:   yq write -i $CONFIG_FILE redisAtmosphereConfig.sentinel true
  326    yq delete -i $REDISSON_CACHE_FILE singleServerConfig

  329  if [[ "" != "$REDIS_MASTER_NAME" ]]; then
  330:   yq write -i $CONFIG_FILE redisLockConfig.masterName "$REDIS_MASTER_NAME"
  331:   yq write -i $CONFIG_FILE redisAtmosphereConfig.masterName "$REDIS_MASTER_NAME"
  332:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$REDIS_MASTER_NAME"
  333  fi

  338    for REDIS_SENTINEL_URL in "${REDIS_SENTINEL_URLS[@]}"; do
  339:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  340:     yq write -i $CONFIG_FILE redisAtmosphereConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  341:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[+] "${REDIS_SENTINEL_URL}"
  342      INDEX=$(expr $INDEX + 1)

  346  if [[ "" != "$REDIS_ENV_NAMESPACE" ]]; then
  347:     yq write -i $CONFIG_FILE redisLockConfig.envNamespace "$REDIS_ENV_NAMESPACE"
  348:     yq write -i $CONFIG_FILE redisAtmosphereConfig.envNamespace "$REDIS_ENV_NAMESPACE"
  349  fi

  351  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  352:   yq write -i $CONFIG_FILE redisLockConfig.nettyThreads "$REDIS_NETTY_THREADS"
  353:   yq write -i $CONFIG_FILE redisAtmosphereConfig.nettyThreads "$REDIS_NETTY_THREADS"
  354:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  355  fi

  357  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  358:   yq write -i $CONFIG_FILE redisLockConfig.useScriptCache false
  359:   yq write -i $CONFIG_FILE redisAtmosphereConfig.useScriptCache false
  360:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  361  fi

  363  if [[ "" != "$CACHE_NAMESPACE" ]]; then
  364:     yq write -i $CONFIG_FILE cacheConfig.cacheNamespace "$CACHE_NAMESPACE"
  365  fi

  367  if [[ "" != "$CACHE_BACKEND" ]]; then
  368:     yq write -i $CONFIG_FILE cacheConfig.cacheBackend "$CACHE_BACKEND"
  369  fi

  371  if [[ "" != "$DELEGATE_SERVICE_TARGET" ]]; then
  372:   yq write -i $CONFIG_FILE grpcDelegateServiceClientConfig.target "$DELEGATE_SERVICE_TARGET"
  373  fi

  375  if [[ "" != "$DELEGATE_SERVICE_AUTHORITY" ]]; then
  376:   yq write -i $CONFIG_FILE grpcDelegateServiceClientConfig.authority "$DELEGATE_SERVICE_AUTHORITY"
  377  fi

  379  if [[ "" != "$LOG_STREAMING_SERVICE_BASEURL" ]]; then
  380:   yq write -i $CONFIG_FILE logStreamingServiceConfig.baseUrl "$LOG_STREAMING_SERVICE_BASEURL"
  381  fi

  383  if [[ "" != "$LOG_STREAMING_SERVICE_TOKEN" ]]; then
  384:   yq write -i $CONFIG_FILE logStreamingServiceConfig.serviceToken "$LOG_STREAMING_SERVICE_TOKEN"
  385  fi

  387  if [[ "" != "$ACCESS_CONTROL_ENABLED" ]]; then
  388:   yq write -i $CONFIG_FILE accessControlClient.enableAccessControl $ACCESS_CONTROL_ENABLED
  389  fi

  391  if [[ "" != "$ACCESS_CONTROL_BASE_URL" ]]; then
  392:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceConfig.baseUrl $ACCESS_CONTROL_BASE_URL
  393  fi

  395  if [[ "" != "$ACCESS_CONTROL_SECRET" ]]; then
  396:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceSecret $ACCESS_CONTROL_SECRET
  397  fi

  399  if [[ "" != "$ENABLE_AUDIT" ]]; then
  400:   yq write -i $CONFIG_FILE enableAudit $ENABLE_AUDIT
  401  fi

  406    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  407:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  408      INDEX=$(expr $INDEX + 1)

  422  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
  423:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl "$NG_MANAGER_BASE_URL"
  424  fi

  426  if [[ "" != "$ENABLE_USER_CHANGESTREAM" ]]; then
  427:   yq write -i $CONFIG_FILE userChangeStreamEnabled "$ENABLE_USER_CHANGESTREAM"
  428  fi

  430  if [[ "" != "$DELEGATE_SERVICE_SECRET" ]]; then
  431:   yq write -i $CONFIG_FILE dmsSecret $DELEGATE_SERVICE_SECRET
  432  fi

  434  if [[ "" != "$CDN_URL" ]]; then
  435:   yq write -i $CONFIG_FILE cdnConfig.url "$CDN_URL"
  436  fi

  438  if [[ "" != "$CDN_KEY" ]]; then
  439:   yq write -i $CONFIG_FILE cdnConfig.keyName "$CDN_KEY"
  440  fi

  442  if [[ "" != "$CDN_KEY_SECRET" ]]; then
  443:   yq write -i $CONFIG_FILE cdnConfig.keySecret "$CDN_KEY_SECRET"
  444  fi

  446  if [[ "" != "$CDN_DELEGATE_JAR_PATH" ]]; then
  447:   yq write -i $CONFIG_FILE cdnConfig.delegateJarPath "$CDN_DELEGATE_JAR_PATH"
  448  fi

  450  if [[ "" != "$CDN_WATCHER_JAR_BASE_PATH" ]]; then
  451:   yq write -i $CONFIG_FILE cdnConfig.watcherJarBasePath "$CDN_WATCHER_JAR_BASE_PATH"
  452  fi

  454  if [[ "" != "$CDN_WATCHER_JAR_PATH" ]]; then
  455:   yq write -i $CONFIG_FILE cdnConfig.watcherJarPath "$CDN_WATCHER_JAR_PATH"
  456  fi

  458  if [[ "" != "$CDN_WATCHER_METADATA_FILE_PATH" ]]; then
  459:   yq write -i $CONFIG_FILE cdnConfig.watcherMetaDataFilePath "$CDN_WATCHER_METADATA_FILE_PATH"
  460  fi

  462  if [[ "" != "$CDN_ORACLE_JRE_TAR_PATH" ]]; then
  463:   yq write -i $CONFIG_FILE cdnConfig.cdnJreTarPaths.oracle8u191 "$CDN_ORACLE_JRE_TAR_PATH"
  464  fi

  466  if [[ "" != "$CDN_OPENJDK_JRE_TAR_PATH" ]]; then
  467:   yq write -i $CONFIG_FILE cdnConfig.cdnJreTarPaths.openjdk8u242 "$CDN_OPENJDK_JRE_TAR_PATH"
  468  fi

  470  if [[ "" != "$CURRENT_JRE" ]]; then
  471:   yq write -i $CONFIG_FILE currentJre "$CURRENT_JRE"
  472  fi

  474  if [[ "" != "$MIGRATE_TO_JRE" ]]; then
  475:   yq write -i $CONFIG_FILE migrateToJre "$MIGRATE_TO_JRE"
  476  fi

  478  if [[ "" != "$ORACLE_JRE_TAR_PATH" ]]; then
  479:   yq write -i $CONFIG_FILE jreConfigs.oracle8u191.jreTarPath "$ORACLE_JRE_TAR_PATH"
  480  fi

  482  if [[ "" != "$OPENJDK_JRE_TAR_PATH" ]]; then
  483:   yq write -i $CONFIG_FILE jreConfigs.openjdk8u242.jreTarPath "$OPENJDK_JRE_TAR_PATH"
  484  fi

  486  if [[ "" != "$SEGMENT_ENABLED" ]]; then
  487:   yq write -i $CONFIG_FILE segmentConfig.enabled "$SEGMENT_ENABLED"
  488  fi

  490  if [[ "" != "$SEGMENT_URL" ]]; then
  491:   yq write -i $CONFIG_FILE segmentConfig.url "$SEGMENT_URL"
  492  fi

  494  if [[ "" != "$SEGMENT_APIKEY" ]]; then
  495:   yq write -i $CONFIG_FILE segmentConfig.apiKey "$SEGMENT_APIKEY"
  496  fi

  499  if [[ "" != "$SEGMENT_ENABLED_NG" ]]; then
  500:   yq write -i $CONFIG_FILE segmentConfiguration.enabled "$SEGMENT_ENABLED_NG"
  501  fi

  503  if [[ "" != "$SEGMENT_URL_NG" ]]; then
  504:   yq write -i $CONFIG_FILE segmentConfiguration.url "$SEGMENT_URL_NG"
  505  fi

  507  if [[ "" != "$SEGMENT_APIKEY_NG" ]]; then
  508:   yq write -i $CONFIG_FILE segmentConfiguration.apiKey "$SEGMENT_APIKEY_NG"
  509  fi

  511  if [[ "" != "$DELEGATE_MTLS_SUBDOMAIN" ]]; then
  512:   yq write -i $CONFIG_FILE delegateMtlsSubdomain "$DELEGATE_MTLS_SUBDOMAIN"
  513  fi

harness/harness-core/270-verification/container/scripts/replace_configs.sh:
  12    if [[ "" != "$CONFIG_VALUE" ]]; then
  13:     yq write -i "$CONFIG_FILE" "$CONFIG_KEY" "$CONFIG_VALUE"
  14    fi

  20  if [[ "" != "$LOGGING_LEVEL" ]]; then
  21:   yq write -i /opt/harness/verification-config.yml logging.level "$LOGGING_LEVEL"
  22  fi

  24  if [[ "" != "$VERIFICATION_PORT" ]]; then
  25:   yq write -i /opt/harness/verification-config.yml server.applicationConnectors[0].port "$VERIFICATION_PORT"
  26  else
  27:   yq write -i /opt/harness/verification-config.yml server.applicationConnectors[0].port "7070"
  28  fi

  30  if [[ "" != "$MONGO_URI" ]]; then
  31:   yq write -i /opt/harness/verification-config.yml mongo.uri "${MONGO_URI//\\&/&}"
  32  fi

  34  if [[ "" != "$MONGO_SSL_CONFIG" ]]; then
  35:   yq write -i /opt/harness/verification-config.yml mongo.mongoSSLConfig.mongoSSLEnabled "$MONGO_SSL_CONFIG"
  36  fi

  38  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PATH" ]]; then
  39:   yq write -i /opt/harness/verification-config.yml mongo.mongoSSLConfig.mongoTrustStorePath "$MONGO_SSL_CA_TRUST_STORE_PATH"
  40  fi

  42  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PASSWORD" ]]; then
  43:   yq write -i /opt/harness/verification-config.yml mongo.mongoSSLConfig.mongoTrustStorePassword "$MONGO_SSL_CA_TRUST_STORE_PASSWORD"
  44  fi

  46  if [[ "" != "$MANAGER_URL" ]]; then
  47:   yq write -i /opt/harness/verification-config.yml managerUrl "$MANAGER_URL"
  48  fi
  49  
  50:   yq write -i /opt/harness/verification-config.yml server.requestLog.appenders[0].type "console"
  51:   yq write -i /opt/harness/verification-config.yml server.requestLog.appenders[0].threshold "TRACE"
  52:   yq write -i /opt/harness/verification-config.yml server.requestLog.appenders[0].target "STDOUT"
  53  

  56    yq delete -i /opt/harness/verification-config.yml logging.appenders[0]
  57:   yq write -i /opt/harness/verification-config.yml logging.appenders[0].stackdriverLogEnabled "true"
  58  else

  60      yq delete -i /opt/harness/verification-config.yml logging.appenders[1]
  61:     yq write -i /opt/harness/verification-config.yml logging.appenders[1].currentLogFilename "/opt/harness/logs/verification.log"
  62:     yq write -i /opt/harness/verification-config.yml logging.appenders[1].archivedLogFilenamePattern "/opt/harness/logs/verification.%d.%i.log"
  63    else

  69  if [[ "" != "$DATA_STORE" ]]; then
  70:   yq write -i /opt/harness/verification-config.yml dataStorageMode "$DATA_STORE"
  71  fi

harness/harness-core/280-batch-processing/container/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i "$CONFIG_FILE" "$CONFIG_KEY" "$CONFIG_VALUE"
   15    fi

   18  if [[ "" != "$MONGO_URI" ]]; then
   19:   yq write -i $CONFIG_FILE harness-mongo.uri "$MONGO_URI"
   20  fi

   22  if [[ "" != "$MONGO_READ_PREF_NAME" ]]; then
   23:   yq write -i $CONFIG_FILE harness-mongo.readPref.name "$MONGO_READ_PREF_NAME"
   24  fi

   30      TAG_VALUE=$(echo $ITEM | awk -F= '{print $2}')
   31:     yq write -i $CONFIG_FILE "harness-mongo.readPref.tagSet.[$TAG_NAME]" "$TAG_VALUE"
   32    done

   35  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
   36:   yq write -i $CONFIG_FILE harness-mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
   37  fi

   39  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
   40:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
   41  fi

   43  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
   44:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
   45  fi

   47  if [[ "" != "$TIMESCALEDB_URI" ]]; then
   48:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALEDB_URI"
   49  fi

   51  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
   52:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
   53  fi

   55  if [[ "" != "$TIMESCALEDB_PASSWORD" ]]; then
   56:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALEDB_PASSWORD"
   57  fi

   59  if [[ "" != "$S3_SYNC_CONFIG_BUCKET_NAME" ]]; then
   60:   yq write -i $CONFIG_FILE awsS3SyncConfig.awsS3BucketName "$S3_SYNC_CONFIG_BUCKET_NAME"
   61  fi

   63  if [[ "" != "$QUERY_BATCH_SIZE" ]]; then
   64:   yq write -i $CONFIG_FILE batchQueryConfig.queryBatchSize "$QUERY_BATCH_SIZE"
   65  fi

   67  if [[ "" != "$SYNC_JOB_DISABLED" ]]; then
   68:   yq write -i $CONFIG_FILE batchQueryConfig.syncJobDisabled "$SYNC_JOB_DISABLED"
   69  fi

   71  if [[ "" != "$S3_SYNC_CONFIG_ACCESSKEY" ]]; then
   72:   yq write -i $CONFIG_FILE awsS3SyncConfig.awsAccessKey "$S3_SYNC_CONFIG_ACCESSKEY"
   73  fi

   75  if [[ "" != "$S3_SYNC_CONFIG_SECRETKEY" ]]; then
   76:   yq write -i $CONFIG_FILE awsS3SyncConfig.awsSecretKey "$S3_SYNC_CONFIG_SECRETKEY"
   77  fi

   79  if [[ "" != "$S3_SYNC_CONFIG_REGION" ]]; then
   80:   yq write -i $CONFIG_FILE awsS3SyncConfig.region "$S3_SYNC_CONFIG_REGION"
   81  fi

   83  if [[ "" != "$DATA_PIPELINE_CONFIG_GCP_PROJECT_ID" ]]; then
   84:   yq write -i $CONFIG_FILE billingDataPipelineConfig.gcpProjectId "$DATA_PIPELINE_CONFIG_GCP_PROJECT_ID"
   85  fi

   87  if [[ "" != "$DATA_PIPELINE_CONFIG_GCS_BASE_PATH" ]]; then
   88:   yq write -i $CONFIG_FILE billingDataPipelineConfig.gcsBasePath "$DATA_PIPELINE_CONFIG_GCS_BASE_PATH"
   89  fi

   91  if [[ "" != "$GCP_PIPELINE_PUB_SUB_TOPIC" ]]; then
   92:   yq write -i $CONFIG_FILE billingDataPipelineConfig.gcpPipelinePubSubTopic "$GCP_PIPELINE_PUB_SUB_TOPIC"
   93  fi

   95  if [[ "" != "$GCP_USE_NEW_PIPELINE" ]]; then
   96:   yq write -i $CONFIG_FILE billingDataPipelineConfig.gcpUseNewPipeline "$GCP_USE_NEW_PIPELINE"
   97  fi

   99  if [[ "" != "$AWS_USE_NEW_PIPELINE" ]]; then
  100:   yq write -i $CONFIG_FILE billingDataPipelineConfig.awsUseNewPipeline "$AWS_USE_NEW_PIPELINE"
  101  fi

  103  if [[ "" != "$GCP_SYNC_ENABLED" ]]; then
  104:   yq write -i $CONFIG_FILE billingDataPipelineConfig.isGcpSyncEnabled "$GCP_SYNC_ENABLED"
  105  fi

  107  if [[ "" != "$CLUSTER_DATA_GCS_BUCKET" ]]; then
  108:   yq write -i $CONFIG_FILE billingDataPipelineConfig.clusterDataGcsBucketName "$CLUSTER_DATA_GCS_BUCKET"
  109  fi

  111  if [[ "" != "$CLUSTER_DATA_GCS_BACKUP_BUCKET" ]]; then
  112:   yq write -i $CONFIG_FILE billingDataPipelineConfig.clusterDataGcsBackupBucketName "$CLUSTER_DATA_GCS_BACKUP_BUCKET"
  113  fi

  115  if [[ "" != "$AWS_ROLE_NAME" ]]; then
  116:   yq write -i $CONFIG_FILE billingDataPipelineConfig.awsRoleName "$AWS_ROLE_NAME"
  117  fi

  120  if [[ "" != "$SMTP_HOST" ]]; then
  121:   yq write -i $CONFIG_FILE smtp.host "$SMTP_HOST"
  122  fi

  124  if [[ "" != "$SMTP_USERNAME" ]]; then
  125:   yq write -i $CONFIG_FILE smtp.username "$SMTP_USERNAME"
  126  fi

  128  if [[ "" != "$SMTP_PASSWORD" ]]; then
  129:   yq write -i $CONFIG_FILE smtp.password "$SMTP_PASSWORD"
  130  fi

  132  if [[ "" != "$SMTP_USE_SSL" ]]; then
  133:   yq write -i $CONFIG_FILE smtp.useSSL "$SMTP_USE_SSL"
  134  fi

  136  if [[ "" != "$UI_SERVER_URL" ]]; then
  137:   yq write -i $CONFIG_FILE baseUrl "$UI_SERVER_URL"
  138  fi

  140  if [[ "" != "$SEGMENT_ENABLED" ]]; then
  141:   yq write -i $CONFIG_FILE segmentConfig.enabled "$SEGMENT_ENABLED"
  142  fi

  144  if [[ "" != "$SEGMENT_APIKEY" ]]; then
  145:   yq write -i $CONFIG_FILE segmentConfig.apiKey "$SEGMENT_APIKEY"
  146  fi

  148  if [[ "" != "$CF_API_KEY" ]]; then
  149:   yq write -i $CONFIG_FILE cfConfig.apiKey "$CF_API_KEY"
  150  fi

  152  if [[ "" != "$CF_BASE_URL" ]]; then
  153:   yq write -i $CONFIG_FILE cfConfig.baseUrl "$CF_BASE_URL"
  154  fi

  156  if [[ "" != "$POD_NAME" ]]; then
  157:   yq write -i $CONFIG_FILE podInfo.name "$POD_NAME"
  158  fi

  160  if [[ "" != "$REPLICA" ]]; then
  161:   yq write -i $CONFIG_FILE podInfo.replica "$REPLICA"
  162  fi

  164  if [[ "" != "$ISOLATED_REPLICA" ]]; then
  165:   yq write -i $CONFIG_FILE podInfo.isolatedReplica "$ISOLATED_REPLICA"
  166  fi

  168  if [[ "" != "$BUDGET_ALERTS_JOB_CRON" ]]; then
  169:   yq write -i $CONFIG_FILE scheduler-jobs-config.budgetAlertsJobCron "$BUDGET_ALERTS_JOB_CRON"
  170  fi

  172  if [[ "" != "$WEEKLY_REPORT_JOB_CRON" ]]; then
  173:   yq write -i $CONFIG_FILE scheduler-jobs-config.weeklyReportsJobCron "$WEEKLY_REPORT_JOB_CRON"
  174  fi

  176  if [[ "" != "$CONNECTOR_HEALTH_UPDATE_CRON" ]]; then
  177:   yq write -i $CONFIG_FILE scheduler-jobs-config.connectorHealthUpdateJobCron "$CONNECTOR_HEALTH_UPDATE_CRON"
  178  fi

  180  if [[ "" != "$AWS_ACCOUNT_TAGS_COLLECTION_CRON" ]]; then
  181:   yq write -i $CONFIG_FILE scheduler-jobs-config.awsAccountTagsCollectionJobCron "$AWS_ACCOUNT_TAGS_COLLECTION_CRON"
  182  fi

  184  if [[ "" != "$HARNESS_CE_AZURE_CLIENTID" ]]; then
  185:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureAppClientId "$HARNESS_CE_AZURE_CLIENTID"
  186  fi

  188  if [[ "" != "$HARNESS_CE_AZURE_CLIENTSECRET" ]]; then
  189:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureAppClientSecret "$HARNESS_CE_AZURE_CLIENTSECRET"
  190  fi

  192  if [[ "" != "$HARNESS_CE_AZURE_TENANTID" ]]; then
  193:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureTenantId "$HARNESS_CE_AZURE_TENANTID"
  194  fi

  196  if [[ "" != "$HARNESS_CE_AZURE_CONTAINER_NAME" ]]; then
  197:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureStorageContainerName "$HARNESS_CE_AZURE_CONTAINER_NAME"
  198  fi

  200  if [[ "" != "$HARNESS_CE_AZURE_STORAGE_NAME" ]]; then
  201:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureStorageAccountName "$HARNESS_CE_AZURE_STORAGE_NAME"
  202  fi

  204  if [[ "" != "$HARNESS_CE_AZURE_SAS" ]]; then
  205:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureSasToken "$HARNESS_CE_AZURE_SAS"
  206  fi

  208  if [[ "" != "$HARNESS_CE_AZURE_IS_SYNC_JOB_DISABLED" ]]; then
  209:   yq write -i $CONFIG_FILE azureStorageSyncConfig.syncJobDisabled "$HARNESS_CE_AZURE_IS_SYNC_JOB_DISABLED"
  210  fi

  212  if [[ "" != "$ANOMALY_DETECTION_PYTHON_SERVICE_URL" ]]; then
  213:   yq write -i $CONFIG_FILE cePythonService.pythonServiceUrl "$ANOMALY_DETECTION_PYTHON_SERVICE_URL"
  214  fi

  216  if [[ "" != "$ANOMALY_DETECTION_USE_PROPHET" ]]; then
  217:   yq write -i $CONFIG_FILE cePythonService.useProphet "$ANOMALY_DETECTION_USE_PROPHET"
  218  fi

  220  if [[ "" != "$BANZAI_CONFIG_HOST" ]]; then
  221:   yq write -i $CONFIG_FILE banzaiConfig.host "$BANZAI_CONFIG_HOST"
  222  fi

  224  if [[ "" != "$BANZAI_CONFIG_PORT" ]]; then
  225:   yq write -i $CONFIG_FILE banzaiConfig.port "$BANZAI_CONFIG_PORT"
  226  fi

  228  if [[ "" != "$NG_MANAGER_SERVICE_HTTP_CLIENT_CONFIG_BASE_URL" ]]; then
  229:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl "$NG_MANAGER_SERVICE_HTTP_CLIENT_CONFIG_BASE_URL"
  230  fi

  232  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  233:   yq write -i $CONFIG_FILE ngManagerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  234  fi

  236  if [[ "" != "$CONNECTOR_HEALTH_UPDATE_JOB_ENABLED" ]]; then
  237:   yq write -i $CONFIG_FILE connectorHealthUpdateJobConfig.enabled "$CONNECTOR_HEALTH_UPDATE_JOB_ENABLED"
  238  fi

  240  if [[ "" != "$AWS_ACCOUNT_TAGS_COLLECTION_JOB_ENABLED" ]]; then
  241:   yq write -i $CONFIG_FILE awsAccountTagsCollectionJobConfig.enabled "$AWS_ACCOUNT_TAGS_COLLECTION_JOB_ENABLED"
  242  fi

harness/harness-core/300-cv-nextgen/container/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   22  if [[ "" != "$LOGGING_LEVEL" ]]; then
   23:   yq write -i /opt/harness/cv-nextgen-config.yml logging.level "$LOGGING_LEVEL"
   24  fi

   26  if [[ "" != "$VERIFICATION_PORT" ]]; then
   27:   yq write -i /opt/harness/cv-nextgen-config.yml server.applicationConnectors[0].port "$VERIFICATION_PORT"
   28  else
   29:   yq write -i /opt/harness/cv-nextgen-config.yml server.applicationConnectors[0].port "6060"
   30  fi

   32  if [[ "" != "$MONGO_URI" ]]; then
   33:   yq write -i /opt/harness/cv-nextgen-config.yml mongo.uri "${MONGO_URI//\\&/&}"
   34  fi

   36  if [[ "" != "$MANAGER_CLIENT_BASEURL" ]]; then
   37:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl "$MANAGER_CLIENT_BASEURL"
   38  fi

   40  if [[ "" != "$NG_MANAGER_URL" ]]; then
   41:   yq write -i $CONFIG_FILE nextGen.ngManagerUrl "$NG_MANAGER_URL"
   42  fi
   43  
   44:   yq write -i /opt/harness/cv-nextgen-config.yml server.requestLog.appenders[0].type "console"
   45:   yq write -i /opt/harness/cv-nextgen-config.yml server.requestLog.appenders[0].threshold "TRACE"
   46:   yq write -i /opt/harness/cv-nextgen-config.yml server.requestLog.appenders[0].target "STDOUT"
   47  

   49    yq delete -i /opt/harness/cv-nextgen-config.yml logging.appenders[0]
   50:   yq write -i /opt/harness/cv-nextgen-config.yml logging.appenders[0].stackdriverLogEnabled "true"
   51  else

   55  if [[ "" != "$DATA_STORE" ]]; then
   56:   yq write -i /opt/harness/cv-nextgen-config.yml dataStorageMode "$DATA_STORE"
   57  fi

   59  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
   60:   yq write -i /opt/harness/cv-nextgen-config.yml nextGen.managerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
   61  fi

   63  if [[ "" != "$MANAGER_JWT_AUTH_SECRET" ]]; then
   64:   yq write -i /opt/harness/cv-nextgen-config.yml managerAuthConfig.jwtAuthSecret "$MANAGER_JWT_AUTH_SECRET"
   65  fi

   67  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
   68:   yq write -i /opt/harness/cv-nextgen-config.yml managerAuthConfig.jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
   69  fi

   71  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
   72:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
   73  fi

   75  if [[ "" != "$NG_MANAGER_URL" ]]; then
   76:   yq write -i $CONFIG_FILE nextGen.ngManagerUrl "$NG_MANAGER_URL"
   77  fi

   79  if [[ "" != "$NOTIFICATION_BASE_URL" ]]; then
   80:   yq write -i $CONFIG_FILE notificationClient.httpClient.baseUrl "$NOTIFICATION_BASE_URL"
   81  fi

   83  if [[ "" != "$NOTIFICATION_MONGO_URI" ]]; then
   84:   yq write -i $CONFIG_FILE notificationClient.messageBroker.uri "${NOTIFICATION_MONGO_URI//\\&/&}"
   85  fi

   87  if [[ "" != "$PORTAL_URL" ]]; then
   88:   yq write -i $CONFIG_FILE portalUrl "$PORTAL_URL"
   89  fi

  104    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  105:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  106      INDEX=$(expr $INDEX + 1)

  110  if [[ "" != "$PMS_TARGET" ]]; then
  111:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.target $PMS_TARGET
  112  fi

  114  if [[ "" != "$PMS_AUTHORITY" ]]; then
  115:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.authority $PMS_AUTHORITY
  116  fi

  118  if [[ "" != "$SHOULD_CONFIGURE_WITH_PMS" ]]; then
  119:   yq write -i $CONFIG_FILE shouldConfigureWithPMS $SHOULD_CONFIGURE_WITH_PMS
  120  fi

  122  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
  123:   yq write -i $CONFIG_FILE pmsSdkGrpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
  124  fi

  128  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  129:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  130  fi

  133  if [[ "" != "$CACHE_CONFIG_REDIS_URL" ]]; then
  134:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$CACHE_CONFIG_REDIS_URL"
  135  fi

  141  if [[ "" != "$CACHE_CONFIG_SENTINEL_MASTER_NAME" ]]; then
  142:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$CACHE_CONFIG_SENTINEL_MASTER_NAME"
  143  fi

  148    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  149:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[+] "${REDIS_SENTINEL_URL}"
  150      INDEX=$(expr $INDEX + 1)

  154  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  155:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  156  fi

harness/harness-core/310-ci-manager/container/scripts/replace_configs.sh:
   14    if [[ "" != "$CONFIG_VALUE" ]]; then
   15:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   16    fi

   19  yq delete -i $CONFIG_FILE server.applicationConnectors[0]
   20: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   21  

   24  if [[ "" != "$LOGGING_LEVEL" ]]; then
   25:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   26  fi

   32      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   33:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   34    done

   37  if [[ "" != "$SERVER_PORT" ]]; then
   38:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
   39  else
   40:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "7090"
   41  fi

   43  if [[ "" != "$MANAGER_URL" ]]; then
   44:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl "$MANAGER_URL"
   45  fi

   47  if [[ "" != "$NG_MANAGER_URL" ]]; then
   48:   yq write -i $CONFIG_FILE ngManagerClientConfig.baseUrl "$NG_MANAGER_URL"
   49  fi

   51  if [[ "" != "$ADDON_IMAGE" ]]; then
   52:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.addonImage "$ADDON_IMAGE"
   53  fi
   54  if [[ "" != "$LE_IMAGE" ]]; then
   55:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.liteEngineImage "$LE_IMAGE"
   56  fi

   58  if [[ "" != "$GIT_CLONE_IMAGE" ]]; then
   59:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.gitCloneConfig.image "$GIT_CLONE_IMAGE"
   60  fi

   62  if [[ "" != "$DOCKER_PUSH_IMAGE" ]]; then
   63:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.buildAndPushDockerRegistryConfig.image "$DOCKER_PUSH_IMAGE"
   64  fi

   66  if [[ "" != "$ECR_PUSH_IMAGE" ]]; then
   67:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.buildAndPushECRConfig.image "$ECR_PUSH_IMAGE"
   68  fi

   70  if [[ "" != "$GCR_PUSH_IMAGE" ]]; then
   71:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.buildAndPushGCRConfig.image "$GCR_PUSH_IMAGE"
   72  fi

   74  if [[ "" != "$GCS_UPLOAD_IMAGE" ]]; then
   75:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.gcsUploadConfig.image "$GCS_UPLOAD_IMAGE"
   76  fi

   78  if [[ "" != "$S3_UPLOAD_IMAGE" ]]; then
   79:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.s3UploadConfig.image "$S3_UPLOAD_IMAGE"
   80  fi

   82  if [[ "" != "$ARTIFACTORY_UPLOAD_IMAGE" ]]; then
   83:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.artifactoryUploadConfig.image "$ARTIFACTORY_UPLOAD_IMAGE"
   84  fi

   86  if [[ "" != "$GCS_CACHE_IMAGE" ]]; then
   87:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.cacheGCSConfig.image "$GCS_CACHE_IMAGE"
   88  fi

   90  if [[ "" != "$S3_CACHE_IMAGE" ]]; then
   91:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.cacheS3Config.image "$S3_CACHE_IMAGE"
   92  fi

   94  if [[ "" != "$VM_GIT_CLONE_IMAGE" ]]; then
   95:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.gitClone "$VM_GIT_CLONE_IMAGE"
   96  fi

   98  if [[ "" != "$VM_DOCKER_PUSH_IMAGE" ]]; then
   99:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.buildAndPushDockerRegistry "$VM_DOCKER_PUSH_IMAGE"
  100  fi

  102  if [[ "" != "$VM_ECR_PUSH_IMAGE" ]]; then
  103:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.buildAndPushECR "$VM_ECR_PUSH_IMAGE"
  104  fi

  106  if [[ "" != "$VM_GCR_PUSH_IMAGE" ]]; then
  107:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.buildAndPushGCR "$VM_GCR_PUSH_IMAGE"
  108  fi

  110  if [[ "" != "$VM_GCS_UPLOAD_IMAGE" ]]; then
  111:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.gcsUpload "$VM_GCS_UPLOAD_IMAGE"
  112  fi

  114  if [[ "" != "$VM_S3_UPLOAD_IMAGE" ]]; then
  115:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.s3Upload "$VM_S3_UPLOAD_IMAGE"
  116  fi

  118  if [[ "" != "$VM_ARTIFACTORY_UPLOAD_IMAGE" ]]; then
  119:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.artifactoryUpload "$VM_ARTIFACTORY_UPLOAD_IMAGE"
  120  fi

  122  if [[ "" != "$VM_GCS_CACHE_IMAGE" ]]; then
  123:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.cacheGCS "$VM_GCS_CACHE_IMAGE"
  124  fi

  126  if [[ "" != "$VM_S3_CACHE_IMAGE" ]]; then
  127:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.cacheS3 "$VM_S3_CACHE_IMAGE"
  128  fi

  130  if [[ "" != "$DEFAULT_MEMORY_LIMIT" ]]; then
  131:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.defaultMemoryLimit "$DEFAULT_MEMORY_LIMIT"
  132  fi
  133  if [[ "" != "$DEFAULT_CPU_LIMIT" ]]; then
  134:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.defaultCPULimit "$DEFAULT_CPU_LIMIT"
  135  fi
  136  if [[ "" != "$DEFAULT_INTERNAL_IMAGE_CONNECTOR" ]]; then
  137:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.defaultInternalImageConnector "$DEFAULT_INTERNAL_IMAGE_CONNECTOR"
  138  fi
  139  if [[ "" != "$PVC_DEFAULT_STORAGE_SIZE" ]]; then
  140:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.pvcDefaultStorageSize "$PVC_DEFAULT_STORAGE_SIZE"
  141  fi
  142  if [[ "" != "$DELEGATE_SERVICE_ENDPOINT_VARIABLE_VALUE" ]]; then
  143:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.delegateServiceEndpointVariableValue "$DELEGATE_SERVICE_ENDPOINT_VARIABLE_VALUE"
  144  fi

  146  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
  147:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
  148  fi

  151    yq delete -i $CONFIG_FILE allowedOrigins
  152:   yq write -i $CONFIG_FILE allowedOrigins "$ALLOWED_ORIGINS"
  153  fi

  155  if [[ "" != "$MONGO_URI" ]]; then
  156:   yq write -i $CONFIG_FILE harness-mongo.uri "${MONGO_URI//\\&/&}"
  157  fi

  159  if [[ "" != "$MANAGER_TARGET" ]]; then
  160:   yq write -i $CONFIG_FILE managerTarget $MANAGER_TARGET
  161  fi

  163  if [[ "" != "$MANAGER_AUTHORITY" ]]; then
  164:   yq write -i $CONFIG_FILE managerAuthority $MANAGER_AUTHORITY
  165  fi

  167  if [[ "" != "$CIMANAGER_MONGO_URI" ]]; then
  168:   yq write -i $CONFIG_FILE cimanager-mongo.uri "$CIMANAGER_MONGO_URI"
  169  fi

  171  if [[ "" != "$SCM_SERVICE_URI" ]]; then
  172:   yq write -i $CONFIG_FILE scmConnectionConfig.url "$SCM_SERVICE_URI"
  173  fi

  175  if [[ "" != "$LOG_SERVICE_ENDPOINT" ]]; then
  176:   yq write -i $CONFIG_FILE logServiceConfig.baseUrl "$LOG_SERVICE_ENDPOINT"
  177  fi

  179  if [[ "" != "$LOG_SERVICE_GLOBAL_TOKEN" ]]; then
  180:   yq write -i $CONFIG_FILE logServiceConfig.globalToken "$LOG_SERVICE_GLOBAL_TOKEN"
  181  fi

  183  if [[ "" != "$TI_SERVICE_ENDPOINT" ]]; then
  184:   yq write -i $CONFIG_FILE tiServiceConfig.baseUrl "$TI_SERVICE_ENDPOINT"
  185  fi

  187  if [[ "" != "$STO_SERVICE_ENDPOINT" ]]; then
  188:   yq write -i $CONFIG_FILE stoServiceConfig.baseUrl "$STO_SERVICE_ENDPOINT"
  189  fi

  191  if [[ "" != "$API_URL" ]]; then
  192:   yq write -i $CONFIG_FILE apiUrl "$API_URL"
  193  fi

  195  if [[ "" != "$PMS_TARGET" ]]; then
  196:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.target $PMS_TARGET
  197  fi

  199  if [[ "" != "$PMS_AUTHORITY" ]]; then
  200:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.authority $PMS_AUTHORITY
  201  fi

  203  if [[ "" != "$SHOULD_CONFIGURE_WITH_PMS" ]]; then
  204:   yq write -i $CONFIG_FILE shouldConfigureWithPMS $SHOULD_CONFIGURE_WITH_PMS
  205  fi

  207  if [[ "" != "$PMS_MONGO_URI" ]]; then
  208:   yq write -i $CONFIG_FILE pmsMongo.uri "${PMS_MONGO_URI//\\&/&}"
  209  fi

  211  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
  212:   yq write -i $CONFIG_FILE pmsSdkGrpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
  213  fi

  215  if [[ "" != "$TI_SERVICE_GLOBAL_TOKEN" ]]; then
  216:   yq write -i $CONFIG_FILE tiServiceConfig.globalToken "$TI_SERVICE_GLOBAL_TOKEN"
  217  fi

  219  if [[ "" != "$STO_SERVICE_GLOBAL_TOKEN" ]]; then
  220:   yq write -i $CONFIG_FILE stoServiceConfig.globalToken "$STO_SERVICE_GLOBAL_TOKEN"
  221  fi

  223  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  224:   yq write -i $CONFIG_FILE ngManagerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  225  fi

  227  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  228:   yq write -i $CONFIG_FILE jwtAuthSecret "$JWT_AUTH_SECRET"
  229  fi

  231  if [[ "" != "$ENABLE_AUTH" ]]; then
  232:   yq write -i $CONFIG_FILE enableAuth "$ENABLE_AUTH"
  233  fi

  235  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  236:   yq write -i $CONFIG_FILE jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  237  fi

  239  if [[ "" != "$API_URL" ]]; then
  240:   yq write -i $CONFIG_FILE apiUrl "$API_URL"
  241  fi

  243  if [[ "" != "$TIMESCALE_PASSWORD" ]]; then
  244:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALE_PASSWORD"
  245  fi

  247  if [[ "" != "$TIMESCALE_URI" ]]; then
  248:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALE_URI"
  249  fi

  251  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
  252:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
  253  fi

  255  if [[ "" != "$ENABLE_DASHBOARD_TIMESCALE" ]]; then
  256:   yq write -i $CONFIG_FILE enableDashboardTimescale $ENABLE_DASHBOARD_TIMESCALE
  257  fi

  259  if [[ "" != "$MANAGER_SECRET" ]]; then
  260:   yq write -i $CONFIG_FILE managerServiceSecret "$MANAGER_SECRET"
  261  fi

  263  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  264:   yq write -i $CONFIG_FILE cimanager-mongo.indexManagerMode "$MONGO_INDEX_MANAGER_MODE"
  265  fi

  268    yq delete -i $CONFIG_FILE logging.appenders[0]
  269:   yq write -i $CONFIG_FILE logging.appenders[0].stackdriverLogEnabled "true"
  270  else

  283    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  284:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  285      INDEX=$(expr $INDEX + 1)

  291  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  292:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  293  fi

  296  if [[ "" != "$CACHE_CONFIG_REDIS_URL" ]]; then
  297:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$CACHE_CONFIG_REDIS_URL"
  298  fi

  304  if [[ "" != "$CACHE_CONFIG_SENTINEL_MASTER_NAME" ]]; then
  305:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$CACHE_CONFIG_SENTINEL_MASTER_NAME"
  306  fi

  311    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  312:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[+] "${REDIS_SENTINEL_URL}"
  313      INDEX=$(expr $INDEX + 1)

  317  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  318:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  319  fi

harness/harness-core/340-ce-nextgen/container/scripts/replace_configs.sh:
  12    if [[ "" != "$CONFIG_VALUE" ]]; then
  13:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
  14    fi

  76    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  77:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  78      INDEX=$(expr $INDEX + 1)

  83    yq delete -i $CONFIG_FILE logging.appenders[0]
  84:   yq write -i $CONFIG_FILE logging.appenders[0].stackdriverLogEnabled "true"
  85  else

harness/harness-core/350-event-server/container/scripts/replace_configs.sh:
  12  if [[ "" != "$MONGO_URI" ]]; then
  13:   yq write -i $CONFIG_FILE harness-mongo.uri "$MONGO_URI"
  14  fi

  16  if [[ "" != "$MONGO_READ_PREF_NAME" ]]; then
  17:   yq write -i $CONFIG_FILE harness-mongo.readPref.name "$MONGO_READ_PREF_NAME"
  18  fi

  24      TAG_VALUE=$(echo $ITEM | awk -F= '{print $2}')
  25:     yq write -i $CONFIG_FILE "harness-mongo.readPref.tagSet.[$TAG_NAME]" "$TAG_VALUE"
  26    done

  29  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  30:   yq write -i $CONFIG_FILE harness-mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  31  fi

  33  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
  34:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
  35  fi

  37  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
  38:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
  39  fi

harness/harness-core/360-cg-manager/container/scripts/replace_configs.sh:
    14    if [[ "" != "$CONFIG_VALUE" ]]; then
    15:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
    16    fi

    24  
    25:     yq write -i $CONFIG_FILE $1.hosts[$INDEX].host "$HOST"
    26      if [[ "" != "$PORT" ]]; then
    27:       yq write -i $CONFIG_FILE $1.hosts[$INDEX].port "$PORT"
    28      fi

    36      VALUE=$(cut -d= -f 2 <<< "$PARAM_PAIR")
    37:     yq write -i $CONFIG_FILE $1.params.$NAME "$VALUE"
    38    done

    43  
    44: yq write -i $CONFIG_FILE server.adminConnectors "[]"
    45  
    46  if [[ "" != "$LOGGING_LEVEL" ]]; then
    47:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
    48  fi

    54      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
    55:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
    56    done

    59  if [[ "" != "$SERVER_PORT" ]]; then
    60:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
    61  else
    62:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "9090"
    63  fi

    65  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
    66:   yq write -i $CONFIG_FILE grpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
    67  fi

    69  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
    70:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
    71  fi

    73  if [[ "" != "$UI_SERVER_URL" ]]; then
    74:   yq write -i $CONFIG_FILE portal.url "$UI_SERVER_URL"
    75  fi

    77  if [[ "" != "$AUTHTOKENEXPIRYINMILLIS" ]]; then
    78:   yq write -i $CONFIG_FILE portal.authTokenExpiryInMillis "$AUTHTOKENEXPIRYINMILLIS"
    79  fi

    81  if [[ "" != "$EXTERNAL_GRAPHQL_RATE_LIMIT" ]]; then
    82:   yq write -i $CONFIG_FILE portal.externalGraphQLRateLimitPerMinute "$EXTERNAL_GRAPHQL_RATE_LIMIT"
    83  fi

    85  if [[ "" != "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT" ]]; then
    86:   yq write -i $CONFIG_FILE portal.customDashGraphQLRateLimitPerMinute "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT"
    87  fi

    89  if [[ "" != "$ALLOWED_ORIGINS" ]]; then
    90:   yq write -i $CONFIG_FILE portal.allowedOrigins "$ALLOWED_ORIGINS"
    91  fi

    93  if [[ "" != "$STORE_REQUEST_PAYLOAD" ]]; then
    94:   yq write -i $CONFIG_FILE auditConfig.storeRequestPayload "$STORE_REQUEST_PAYLOAD"
    95  fi

    97  if [[ "" != "$STORE_RESPONSE_PAYLOAD" ]]; then
    98:   yq write -i $CONFIG_FILE auditConfig.storeResponsePayload "$STORE_RESPONSE_PAYLOAD"
    99  fi

   101  if [[ "" != "$MONGO_URI" ]]; then
   102:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   103  fi

   106    yq delete -i $CONFIG_FILE mongo.uri
   107:   yq write -i $CONFIG_FILE mongo.username "$MONGO_USERNAME"
   108:   yq write -i $CONFIG_FILE mongo.password "$MONGO_PASSWORD"
   109:   yq write -i $CONFIG_FILE mongo.database "$MONGO_DATABASE"
   110:   yq write -i $CONFIG_FILE mongo.schema "$MONGO_SCHEMA"
   111    write_mongo_hosts_and_ports mongo "$MONGO_HOSTS_AND_PORTS"

   115  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   116:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   117  fi

   119  if [[ "" != "$MONGO_SSL_CONFIG" ]]; then
   120:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoSSLEnabled "$MONGO_SSL_CONFIG"
   121  fi

   123  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PATH" ]]; then
   124:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoTrustStorePath "$MONGO_SSL_CA_TRUST_STORE_PATH"
   125  fi

   127  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PASSWORD" ]]; then
   128:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoTrustStorePassword "$MONGO_SSL_CA_TRUST_STORE_PASSWORD"
   129  fi

   131  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
   132:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
   133  fi

   135  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
   136:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
   137  fi

   139  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
   140:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
   141  fi

   143  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
   144:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
   145  fi

   147  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
   148:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
   149  fi

   151  if [[ "" != "$ANALYTIC_MONGO_TAG_NAME" ]]; then
   152:  yq write -i $CONFIG_FILE mongo.analyticNodeConfig.mongoTagKey "$ANALYTIC_MONGO_TAG_NAME"
   153  fi

   155  if [[ "" != "$ANALYTIC_MONGO_TAG_VALUE" ]]; then
   156:  yq write -i $CONFIG_FILE mongo.analyticNodeConfig.mongoTagValue "$ANALYTIC_MONGO_TAG_VALUE"
   157  fi

   159  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
   160:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
   161  fi

   163  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
   164:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
   165  else

   167      yq delete -i $CONFIG_FILE events-mongo.uri
   168:     yq write -i $CONFIG_FILE events-mongo.username "$EVENTS_MONGO_USERNAME"
   169:     yq write -i $CONFIG_FILE events-mongo.password "$EVENTS_MONGO_PASSWORD"
   170:     yq write -i $CONFIG_FILE events-mongo.database "$EVENTS_MONGO_DATABASE"
   171:     yq write -i $CONFIG_FILE events-mongo.schema "$EVENTS_MONGO_SCHEMA"
   172      write_mongo_hosts_and_ports events-mongo "$EVENTS_MONGO_HOSTS_AND_PORTS"

   179  if [[ "" != "$CF_CLIENT_API_KEY" ]]; then
   180:   yq write -i $CONFIG_FILE cfClientConfig.apiKey "$CF_CLIENT_API_KEY"
   181  fi

   183  if [[ "" != "$CF_CLIENT_CONFIG_URL" ]]; then
   184:   yq write -i $CONFIG_FILE cfClientConfig.configUrl "$CF_CLIENT_CONFIG_URL"
   185  fi

   187  if [[ "" != "$CF_CLIENT_EVENT_URL" ]]; then
   188:   yq write -i $CONFIG_FILE cfClientConfig.eventUrl "$CF_CLIENT_EVENT_URL"
   189  fi

   191  if [[ "" != "$CF_CLIENT_ANALYTICS_ENABLED" ]]; then
   192:   yq write -i $CONFIG_FILE cfClientConfig.analyticsEnabled "$CF_CLIENT_ANALYTICS_ENABLED"
   193  fi

   195  if [[ "" != "$CF_CLIENT_CONNECTION_TIMEOUT" ]]; then
   196:   yq write -i $CONFIG_FILE cfClientConfig.connectionTimeout "$CF_CLIENT_CONNECTION_TIMEOUT"
   197  fi

   199  if [[ "" != "$CF_CLIENT_READ_TIMEOUT" ]]; then
   200:   yq write -i $CONFIG_FILE cfClientConfig.readTimeout "$CF_CLIENT_READ_TIMEOUT"
   201  fi

   203  if [[ "" != "$CF_MIGRATION_ENABLED" ]]; then
   204:   yq write -i $CONFIG_FILE cfMigrationConfig.enabled "$CF_MIGRATION_ENABLED"
   205  fi

   207  if [[ "" != "$CF_MIGRATION_ADMIN_URL" ]]; then
   208:   yq write -i $CONFIG_FILE cfMigrationConfig.adminUrl "$CF_MIGRATION_ADMIN_URL"
   209  fi

   211  if [[ "" != "$CF_MIGRATION_API_KEY" ]]; then
   212:   yq write -i $CONFIG_FILE cfMigrationConfig.apiKey "$CF_MIGRATION_API_KEY"
   213  fi

   215  if [[ "" != "$CF_MIGRATION_ACCOUNT" ]]; then
   216:   yq write -i $CONFIG_FILE cfMigrationConfig.account "$CF_MIGRATION_ACCOUNT"
   217  fi

   219  if [[ "" != "$CF_MIGRATION_ORG" ]]; then
   220:   yq write -i $CONFIG_FILE cfMigrationConfig.org "$CF_MIGRATION_ORG"
   221  fi

   223  if [[ "" != "$CF_MIGRATION_PROJECT" ]]; then
   224:   yq write -i $CONFIG_FILE cfMigrationConfig.project "$CF_MIGRATION_PROJECT"
   225  fi

   227  if [[ "" != "$CF_MIGRATION_ENVIRONMENT" ]]; then
   228:   yq write -i $CONFIG_FILE cfMigrationConfig.environment "$CF_MIGRATION_ENVIRONMENT"
   229  fi

   235  if [[ "" != "$ELASTICSEARCH_URI" ]]; then
   236:   yq write -i $CONFIG_FILE elasticsearch.uri "$ELASTICSEARCH_URI"
   237  fi

   239  if [[ "" != "$ELASTICSEARCH_INDEX_SUFFIX" ]]; then
   240:   yq write -i $CONFIG_FILE elasticsearch.indexSuffix "$ELASTICSEARCH_INDEX_SUFFIX"
   241  fi

   243  if [[ "" != "$ELASTICSEARCH_MONGO_TAG_NAME" ]]; then
   244:  yq write -i $CONFIG_FILE elasticsearch.mongoTagKey "$ELASTICSEARCH_MONGO_TAG_NAME"
   245  fi

   247  if [[ "" != "$ELASTICSEARCH_MONGO_TAG_VALUE" ]]; then
   248:  yq write -i $CONFIG_FILE elasticsearch.mongoTagValue "$ELASTICSEARCH_MONGO_TAG_VALUE"
   249  fi

   251  if [[ "" != "$MONGO_LOCK_URI" ]]; then
   252:   yq write -i $CONFIG_FILE mongo.locksUri "${MONGO_LOCK_URI//\\&/&}"
   253  fi
   254  
   255: yq write -i $CONFIG_FILE server.requestLog.appenders[0].threshold "TRACE"
   256  

   259    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
   260:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
   261  else

   263      yq delete -i $CONFIG_FILE 'logging.appenders.(type==gke-console)'
   264:     yq write -i $CONFIG_FILE 'logging.appenders.(type==file).currentLogFilename' "/opt/harness/logs/portal.log"
   265:     yq write -i $CONFIG_FILE 'logging.appenders.(type==file).archivedLogFilenamePattern' "/opt/harness/logs/portal.%d.%i.log"
   266    else

   272  if [[ "" != "$WATCHER_METADATA_URL" ]]; then
   273:   yq write -i $CONFIG_FILE watcherMetadataUrl "$WATCHER_METADATA_URL"
   274  fi

   276  if [[ "" != "$DELEGATE_METADATA_URL" ]]; then
   277:   yq write -i $CONFIG_FILE delegateMetadataUrl "$DELEGATE_METADATA_URL"
   278  fi

   280  if [[ "" != "$API_URL" ]]; then
   281:   yq write -i $CONFIG_FILE apiUrl "$API_URL"
   282  fi

   284  if [[ "" != "$ENV_PATH" ]]; then
   285:   yq write -i $CONFIG_FILE envPath "$ENV_PATH"
   286  fi

   288  if [[ "" != "$DEPLOY_MODE" ]]; then
   289:   yq write -i $CONFIG_FILE deployMode "$DEPLOY_MODE"
   290  fi
   291  
   292: yq write -i $NEWRELIC_FILE common.license_key "$NEWRELIC_LICENSE_KEY"
   293  
   294  if [[ "$DISABLE_NEW_RELIC" == "true" ]]; then
   295:   yq write -i $NEWRELIC_FILE common.agent_enabled false
   296  fi

   298  if [[ "" != "$jwtPasswordSecret" ]]; then
   299:   yq write -i $CONFIG_FILE portal.jwtPasswordSecret "$jwtPasswordSecret"
   300  fi

   302  if [[ "" != "$jwtExternalServiceSecret" ]]; then
   303:   yq write -i $CONFIG_FILE portal.jwtExternalServiceSecret "$jwtExternalServiceSecret"
   304  fi

   306  if [[ "" != "$jwtZendeskSecret" ]]; then
   307:   yq write -i $CONFIG_FILE portal.jwtZendeskSecret "$jwtZendeskSecret"
   308  fi

   310  if [[ "" != "$jwtMultiAuthSecret" ]]; then
   311:   yq write -i $CONFIG_FILE portal.jwtMultiAuthSecret "$jwtMultiAuthSecret"
   312  fi

   314  if [[ "" != "$jwtSsoRedirectSecret" ]]; then
   315:   yq write -i $CONFIG_FILE portal.jwtSsoRedirectSecret "$jwtSsoRedirectSecret"
   316  fi

   318  if [[ "" != "$jwtAuthSecret" ]]; then
   319:   yq write -i $CONFIG_FILE portal.jwtAuthSecret "$jwtAuthSecret"
   320  fi

   322  if [[ "" != "$jwtMarketPlaceSecret" ]]; then
   323:   yq write -i $CONFIG_FILE portal.jwtMarketPlaceSecret "$jwtMarketPlaceSecret"
   324  fi

   326  if [[ "" != "$jwtIdentityServiceSecret" ]]; then
   327:   yq write -i $CONFIG_FILE portal.jwtIdentityServiceSecret "$jwtIdentityServiceSecret"
   328  fi

   330  if [[ "" != "$jwtDataHandlerSecret" ]]; then
   331:   yq write -i $CONFIG_FILE portal.jwtDataHandlerSecret "$jwtDataHandlerSecret"
   332  fi

   334  if [[ "" != "$jwtNextGenManagerSecret" ]]; then
   335:   yq write -i $CONFIG_FILE portal.jwtNextGenManagerSecret "$jwtNextGenManagerSecret"
   336  fi

   339  if [[ "" != "$FEATURES" ]]; then
   340:   yq write -i $CONFIG_FILE featuresEnabled "$FEATURES"
   341  fi

   343  if [[ "" != "$SAMPLE_TARGET_ENV" ]]; then
   344:   yq write -i $CONFIG_FILE sampleTargetEnv "$SAMPLE_TARGET_ENV"
   345  fi

   347  if [[ "" != "$SAMPLE_TARGET_STATUS_HOST" ]]; then
   348:   yq write -i $CONFIG_FILE sampleTargetStatusHost "$SAMPLE_TARGET_STATUS_HOST"
   349  fi

   351  if [[ "" != "$GLOBAL_WHITELIST" ]]; then
   352:   yq write -i $CONFIG_FILE globalWhitelistConfig.filters "$GLOBAL_WHITELIST"
   353  fi

   355  if [[ "" != "$SMTP_HOST" ]]; then
   356:   yq write -i $CONFIG_FILE smtp.host "$SMTP_HOST"
   357  fi

   359  if [[ "" != "$SMTP_USERNAME" ]]; then
   360:   yq write -i $CONFIG_FILE smtp.username "$SMTP_USERNAME"
   361  fi

   363  if [[ "" != "$SMTP_PASSWORD" ]]; then
   364:   yq write -i $CONFIG_FILE smtp.password "$SMTP_PASSWORD"
   365  fi

   367  if [[ "" != "$SMTP_USE_SSL" ]]; then
   368:   yq write -i $CONFIG_FILE smtp.useSSL "$SMTP_USE_SSL"
   369  fi

   371  if [[ "" != "$MARKETO_ENABLED" ]]; then
   372:   yq write -i $CONFIG_FILE marketoConfig.enabled "$MARKETO_ENABLED"
   373  fi

   375  if [[ "" != "$MARKETO_URL" ]]; then
   376:   yq write -i $CONFIG_FILE marketoConfig.url "$MARKETO_URL"
   377  fi

   379  if [[ "" != "$MARKETO_CLIENT_ID" ]]; then
   380:   yq write -i $CONFIG_FILE marketoConfig.clientId "$MARKETO_CLIENT_ID"
   381  fi

   383  if [[ "" != "$MARKETO_CLIENT_SECRET" ]]; then
   384:   yq write -i $CONFIG_FILE marketoConfig.clientSecret "$MARKETO_CLIENT_SECRET"
   385  fi

   387  if [[ "" != "$SEGMENT_ENABLED" ]]; then
   388:   yq write -i $CONFIG_FILE segmentConfig.enabled "$SEGMENT_ENABLED"
   389  fi

   391  if [[ "" != "$SEGMENT_URL" ]]; then
   392:   yq write -i $CONFIG_FILE segmentConfig.url "$SEGMENT_URL"
   393  fi

   395  if [[ "" != "$SEGMENT_APIKEY" ]]; then
   396:   yq write -i $CONFIG_FILE segmentConfig.apiKey "$SEGMENT_APIKEY"
   397  fi

   399  if [[ "" != "$SALESFORCE_USERNAME" ]]; then
   400:   yq write -i $CONFIG_FILE salesforceConfig.userName "$SALESFORCE_USERNAME"
   401  fi

   403  if [[ "" != "$SALESFORCE_PASSWORD" ]]; then
   404:   yq write -i $CONFIG_FILE salesforceConfig.password "$SALESFORCE_PASSWORD"
   405  fi

   407  if [[ "" != "$SALESFORCE_CONSUMER_KEY" ]]; then
   408:   yq write -i $CONFIG_FILE salesforceConfig.consumerKey "$SALESFORCE_CONSUMER_KEY"
   409  fi

   411  if [[ "" != "$SALESFORCE_CONSUMER_SECRET" ]]; then
   412:   yq write -i $CONFIG_FILE salesforceConfig.consumerSecret "$SALESFORCE_CONSUMER_SECRET"
   413  fi

   415  if [[ "" != "$SALESFORCE_GRANT_TYPE" ]]; then
   416:   yq write -i $CONFIG_FILE salesforceConfig.grantType "$SALESFORCE_GRANT_TYPE"
   417  fi

   419  if [[ "" != "$SALESFORCE_LOGIN_INSTANCE_DOMAIN" ]]; then
   420:   yq write -i $CONFIG_FILE salesforceConfig.loginInstanceDomain "$SALESFORCE_LOGIN_INSTANCE_DOMAIN"
   421  fi

   423  if [[ "" != "$SALESFORCE_API_VERSION" ]]; then
   424:   yq write -i $CONFIG_FILE salesforceConfig.apiVersion "$SALESFORCE_API_VERSION"
   425  fi

   427  if [[ "" != "$SALESFORCE_INTEGRATION_ENABLED" ]]; then
   428:   yq write -i $CONFIG_FILE salesforceConfig.enabled "$SALESFORCE_INTEGRATION_ENABLED"
   429  fi

   431  if [[ "" != "$CE_SETUP_CONFIG_AWS_ACCOUNT_ID" ]]; then
   432:   yq write -i $CONFIG_FILE ceSetUpConfig.awsAccountId "$CE_SETUP_CONFIG_AWS_ACCOUNT_ID"
   433  fi

   435  if [[ "" != "$CE_SETUP_CONFIG_AWS_S3_BUCKET_NAME" ]]; then
   436:   yq write -i $CONFIG_FILE ceSetUpConfig.awsS3BucketName "$CE_SETUP_CONFIG_AWS_S3_BUCKET_NAME"
   437  fi

   439  if [[ "" != "$CE_SETUP_CONFIG_GCP_PROJECT_ID" ]]; then
   440:   yq write -i $CONFIG_FILE ceSetUpConfig.gcpProjectId "$CE_SETUP_CONFIG_GCP_PROJECT_ID"
   441  fi

   443  if [[ "" != "$CE_SETUP_CONFIG_AWS_ROLE_NAME" ]]; then
   444:   yq write -i $CONFIG_FILE ceSetUpConfig.awsRoleName "$CE_SETUP_CONFIG_AWS_ROLE_NAME"
   445  fi

   447  if [[ "" != "$CE_SETUP_CONFIG_SAMPLE_ACCOUNT_ID" ]]; then
   448:   yq write -i $CONFIG_FILE ceSetUpConfig.sampleAccountId "$CE_SETUP_CONFIG_SAMPLE_ACCOUNT_ID"
   449  fi

   451  if [[ "" != "$CE_SETUP_CONFIG_AWS_ACCESS_KEY" ]]; then
   452:   yq write -i $CONFIG_FILE ceSetUpConfig.awsAccessKey "$CE_SETUP_CONFIG_AWS_ACCESS_KEY"
   453  fi

   455  if [[ "" != "$CE_SETUP_CONFIG_AWS_SECRET_KEY" ]]; then
   456:   yq write -i $CONFIG_FILE ceSetUpConfig.awsSecretKey "$CE_SETUP_CONFIG_AWS_SECRET_KEY"
   457  fi

   459  if [[ "" != "$CE_SETUP_CONFIG_MASTER_CLOUD_FORMATION" ]]; then
   460:   yq write -i $CONFIG_FILE ceSetUpConfig.masterAccountCloudFormationTemplateLink "$CE_SETUP_CONFIG_MASTER_CLOUD_FORMATION"
   461  fi

   463  if [[ "" != "$CE_SETUP_CONFIG_LINKED_CLOUD_FORMATION" ]]; then
   464:   yq write -i $CONFIG_FILE ceSetUpConfig.linkedAccountCloudFormationTemplateLink "$CE_SETUP_CONFIG_LINKED_CLOUD_FORMATION"
   465  fi

   467  if [[ "" != "$CE_SETUP_CONFIG_AZURE_CLIENTSECRET" ]]; then
   468:   yq write -i $CONFIG_FILE ceSetUpConfig.azureAppClientSecret "$CE_SETUP_CONFIG_AZURE_CLIENTSECRET"
   469  fi

   471  if [[ "" != "$CE_SETUP_CONFIG_AZURE_CLIENTID" ]]; then
   472:   yq write -i $CONFIG_FILE ceSetUpConfig.azureAppClientId "$CE_SETUP_CONFIG_AZURE_CLIENTID"
   473  fi

   475  if [[ "" != "$DATADOG_ENABLED" ]]; then
   476:   yq write -i $CONFIG_FILE datadogConfig.enabled "$DATADOG_ENABLED"
   477  fi

   479  if [[ "" != "$DATADOG_APIKEY" ]]; then
   480:   yq write -i $CONFIG_FILE datadogConfig.apiKey "$DATADOG_APIKEY"
   481  fi

   483  if [[ "" != "$DELEGATE_DOCKER_IMAGE" ]]; then
   484:   yq write -i $CONFIG_FILE portal.delegateDockerImage "$DELEGATE_DOCKER_IMAGE"
   485  fi

   487  if [[ "" != "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT" ]]; then
   488:   yq write -i $CONFIG_FILE portal.optionalDelegateTaskRejectAtLimit "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT"
   489  fi

   491  if [[ "" != "$EXECUTION_LOG_DATA_STORE" ]]; then
   492:   yq write -i $CONFIG_FILE executionLogStorageMode "$EXECUTION_LOG_DATA_STORE"
   493  fi

   495  if [[ "" != "$FILE_STORAGE" ]]; then
   496:   yq write -i $CONFIG_FILE fileStorageMode "$FILE_STORAGE"
   497  fi

   499  if [[ "" != "$CLUSTER_NAME" ]]; then
   500:   yq write -i $CONFIG_FILE clusterName "$CLUSTER_NAME"
   501  fi

   503  if [[ "" != "$DEPLOYMENT_CLUSTER_NAME" ]]; then
   504:   yq write -i $CONFIG_FILE deploymentClusterName "$DEPLOYMENT_CLUSTER_NAME"
   505  fi

   507  if [[ "" != "$BACKGROUND_SCHEDULER_CLUSTERED" ]]; then
   508:   yq write -i $CONFIG_FILE backgroundScheduler.clustered "$BACKGROUND_SCHEDULER_CLUSTERED"
   509  fi

   511  if [[ "" != "$ENABLE_CRONS" ]]; then
   512:   yq write -i $CONFIG_FILE enableIterators "$ENABLE_CRONS"
   513:   yq write -i $CONFIG_FILE backgroundScheduler.enabled "$ENABLE_CRONS"
   514:   yq write -i $CONFIG_FILE serviceScheduler.enabled "$ENABLE_CRONS"
   515  fi

   517  if [[ "" != "$ALLOW_TRIAL_REGISTRATION" ]]; then
   518:   yq write -i $CONFIG_FILE trialRegistrationAllowed "$ALLOW_TRIAL_REGISTRATION"
   519  fi

   521  if [[ "" != "$EVENTS_FRAMEWORK_AVAILABLE_IN_ONPREM" ]]; then
   522:   yq write -i $CONFIG_FILE eventsFrameworkAvailableInOnPrem "$EVENTS_FRAMEWORK_AVAILABLE_IN_ONPREM"
   523  else
   524:   yq write -i $CONFIG_FILE eventsFrameworkAvailableInOnPrem "false"
   525  fi

   527  if [[ "" != "$ALLOW_TRIAL_REGISTRATION_FOR_BUGATHON" ]]; then
   528:   yq write -i $CONFIG_FILE trialRegistrationAllowedForBugathon "$ALLOW_TRIAL_REGISTRATION_FOR_BUGATHON"
   529  fi

   531  if [[ "" != "$GITHUB_OAUTH_CLIENT" ]]; then
   532:   yq write -i $CONFIG_FILE githubConfig.clientId "$GITHUB_OAUTH_CLIENT"
   533  fi

   535  if [[ "" != "$GITHUB_OAUTH_SECRET" ]]; then
   536:   yq write -i $CONFIG_FILE githubConfig.clientSecret "$GITHUB_OAUTH_SECRET"
   537  fi

   539  if [[ "" != "$GITHUB_OAUTH_CALLBACK_URL" ]]; then
   540:   yq write -i $CONFIG_FILE githubConfig.callbackUrl "$GITHUB_OAUTH_CALLBACK_URL"
   541  fi

   543  if [[ "" != "$AZURE_OAUTH_CLIENT" ]]; then
   544:   yq write -i $CONFIG_FILE azureConfig.clientId "$AZURE_OAUTH_CLIENT"
   545  fi

   547  if [[ "" != "$AZURE_OAUTH_SECRET" ]]; then
   548:   yq write -i $CONFIG_FILE azureConfig.clientSecret "$AZURE_OAUTH_SECRET"
   549  fi

   551  if [[ "" != "$AZURE_OAUTH_CALLBACK_URL" ]]; then
   552:   yq write -i $CONFIG_FILE azureConfig.callbackUrl "$AZURE_OAUTH_CALLBACK_URL"
   553  fi

   555  if [[ "" != "$GOOGLE_OAUTH_CLIENT" ]]; then
   556:   yq write -i $CONFIG_FILE googleConfig.clientId "$GOOGLE_OAUTH_CLIENT"
   557  fi

   559  if [[ "" != "$GOOGLE_OAUTH_SECRET" ]]; then
   560:   yq write -i $CONFIG_FILE googleConfig.clientSecret "$GOOGLE_OAUTH_SECRET"
   561  fi

   563  if [[ "" != "$GOOGLE_OAUTH_CALLBACK_URL" ]]; then
   564:   yq write -i $CONFIG_FILE googleConfig.callbackUrl "$GOOGLE_OAUTH_CALLBACK_URL"
   565  fi

   567  if [[ "" != "$BITBUCKET_OAUTH_CLIENT" ]]; then
   568:   yq write -i $CONFIG_FILE bitbucketConfig.clientId "$BITBUCKET_OAUTH_CLIENT"
   569  fi

   571  if [[ "" != "$BITBUCKET_OAUTH_SECRET" ]]; then
   572:   yq write -i $CONFIG_FILE bitbucketConfig.clientSecret "$BITBUCKET_OAUTH_SECRET"
   573  fi

   575  if [[ "" != "$BITBUCKET_OAUTH_CALLBACK_URL" ]]; then
   576:   yq write -i $CONFIG_FILE bitbucketConfig.callbackUrl "$BITBUCKET_OAUTH_CALLBACK_URL"
   577  fi

   579  if [[ "" != "$GITLAB_OAUTH_CLIENT" ]]; then
   580:   yq write -i $CONFIG_FILE gitlabConfig.clientId "$GITLAB_OAUTH_CLIENT"
   581  fi

   583  if [[ "" != "$GITLAB_OAUTH_SECRET" ]]; then
   584:   yq write -i $CONFIG_FILE gitlabConfig.clientSecret "$GITLAB_OAUTH_SECRET"
   585  fi

   587  if [[ "" != "$GITLAB_OAUTH_CALLBACK_URL" ]]; then
   588:   yq write -i $CONFIG_FILE gitlabConfig.callbackUrl "$GITLAB_OAUTH_CALLBACK_URL"
   589  fi

   591  if [[ "" != "$LINKEDIN_OAUTH_CLIENT" ]]; then
   592:   yq write -i $CONFIG_FILE linkedinConfig.clientId "$LINKEDIN_OAUTH_CLIENT"
   593  fi

   595  if [[ "" != "$LINKEDIN_OAUTH_SECRET" ]]; then
   596:   yq write -i $CONFIG_FILE linkedinConfig.clientSecret "$LINKEDIN_OAUTH_SECRET"
   597  fi

   599  if [[ "" != "$LINKEDIN_OAUTH_CALLBACK_URL" ]]; then
   600:   yq write -i $CONFIG_FILE linkedinConfig.callbackUrl "$LINKEDIN_OAUTH_CALLBACK_URL"
   601  fi

   603  if [[ "" != "$AWS_MARKETPLACE_ACCESSKEY" ]]; then
   604:   yq write -i $CONFIG_FILE mktPlaceConfig.awsAccessKey "$AWS_MARKETPLACE_ACCESSKEY"
   605  fi

   607  if [[ "" != "$AWS_MARKETPLACE_SECRETKEY" ]]; then
   608:   yq write -i $CONFIG_FILE mktPlaceConfig.awsSecretKey "$AWS_MARKETPLACE_SECRETKEY"
   609  fi

   611  if [[ "" != "$AWS_MARKETPLACE_PRODUCTCODE" ]]; then
   612:   yq write -i $CONFIG_FILE mktPlaceConfig.awsMarketPlaceProductCode "$AWS_MARKETPLACE_PRODUCTCODE"
   613  fi

   615  if [[ "" != "$AWS_MARKETPLACE_CE_PRODUCTCODE" ]]; then
   616:   yq write -i $CONFIG_FILE mktPlaceConfig.awsMarketPlaceCeProductCode "$AWS_MARKETPLACE_CE_PRODUCTCODE"
   617  fi

   619  if [[ "" != "$ALLOW_BLACKLISTED_EMAIL_DOMAINS" ]]; then
   620:   yq write -i $CONFIG_FILE blacklistedEmailDomainsAllowed "$ALLOW_BLACKLISTED_EMAIL_DOMAINS"
   621  fi

   623  if [[ "" != "$ALLOW_PWNED_PASSWORDS" ]]; then
   624:   yq write -i $CONFIG_FILE pwnedPasswordsAllowed "$ALLOW_PWNED_PASSWORDS"
   625  fi

   627  if [[ "" != "$TIMESCALEDB_URI" ]]; then
   628:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALEDB_URI"
   629  fi

   631  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
   632:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
   633  fi

   635  if [[ "" != "$TIMESCALEDB_PASSWORD" ]]; then
   636:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALEDB_PASSWORD"
   637  fi

   639  if [[ "" != "$TIMESCALEDB_CONNECT_TIMEOUT" ]]; then
   640:   yq write -i $CONFIG_FILE timescaledb.connectTimeout "$TIMESCALEDB_CONNECT_TIMEOUT"
   641  fi

   643  if [[ "" != "$TIMESCALEDB_SOCKET_TIMEOUT" ]]; then
   644:   yq write -i $CONFIG_FILE timescaledb.socketTimeout "$TIMESCALEDB_SOCKET_TIMEOUT"
   645  fi

   647  if [[ "" != "$TIMESCALEDB_LOGUNCLOSED" ]]; then
   648:   yq write -i $CONFIG_FILE timescaledb.logUnclosedConnections "$TIMESCALEDB_LOGUNCLOSED"
   649  fi

   651  if [[ "" != "$TIMESCALEDB_LOGGERLEVEL" ]]; then
   652:   yq write -i $CONFIG_FILE timescaledb.loggerLevel "$TIMESCALEDB_LOGGERLEVEL"
   653  fi

   655  if [[ "$TIMESCALEDB_HEALTH_CHECK_NEEDED" == "true" ]]; then
   656:   yq write -i $CONFIG_FILE timescaledb.isHealthCheckNeeded "$TIMESCALEDB_HEALTH_CHECK_NEEDED"
   657  fi

   659  if [[ "$SEARCH_ENABLED" == "true" ]]; then
   660:   yq write -i $CONFIG_FILE searchEnabled true
   661  fi

   663  if [[ "$GRAPHQL_ENABLED" == "false" ]]; then
   664:   yq write -i $CONFIG_FILE graphQLEnabled false
   665  fi

   667  if [[ "$MONGO_DEBUGGING_ENABLED" == "true" ]]; then
   668:   yq write -i $CONFIG_FILE logging.loggers.[org.mongodb.morphia.query] TRACE
   669:   yq write -i $CONFIG_FILE logging.loggers.connection TRACE
   670  fi

   672  if [[ "" != "$AZURE_MARKETPLACE_ACCESSKEY" ]]; then
   673:   yq write -i $CONFIG_FILE mktPlaceConfig.azureMarketplaceAccessKey "$AZURE_MARKETPLACE_ACCESSKEY"
   674  fi

   676  if [[ "" != "$AZURE_MARKETPLACE_SECRETKEY" ]]; then
   677:   yq write -i $CONFIG_FILE mktPlaceConfig.azureMarketplaceSecretKey "$AZURE_MARKETPLACE_SECRETKEY"
   678  fi

   684      WORKER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
   685:     yq write -i $CONFIG_FILE workers.active.[$WORKER] "${WORKER_FLAG}"
   686    done

   693      PUBLISHER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
   694:     yq write -i $CONFIG_FILE publishers.active.[$PUBLISHER] "${PUBLISHER_FLAG}"
   695    done

   698  if [[ "" != "$DISTRIBUTED_LOCK_IMPLEMENTATION" ]]; then
   699:   yq write -i $CONFIG_FILE distributedLockImplementation "$DISTRIBUTED_LOCK_IMPLEMENTATION"
   700  fi

   702  if [[ "" != "$ATMOSPHERE_BACKEND" ]]; then
   703:   yq write -i $CONFIG_FILE atmosphereBroadcaster "$ATMOSPHERE_BACKEND"
   704  fi

   708  if [[ "" != "$REDIS_URL" ]]; then
   709:   yq write -i $CONFIG_FILE redisLockConfig.redisUrl "$REDIS_URL"
   710:   yq write -i $CONFIG_FILE redisAtmosphereConfig.redisUrl "$REDIS_URL"
   711:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$REDIS_URL"
   712  fi

   714  if [[ "$REDIS_SENTINEL" == "true" ]]; then
   715:   yq write -i $CONFIG_FILE redisLockConfig.sentinel true
   716:   yq write -i $CONFIG_FILE redisAtmosphereConfig.sentinel true
   717    yq delete -i $REDISSON_CACHE_FILE singleServerConfig

   720  if [[ "" != "$REDIS_MASTER_NAME" ]]; then
   721:   yq write -i $CONFIG_FILE redisLockConfig.masterName "$REDIS_MASTER_NAME"
   722:   yq write -i $CONFIG_FILE redisAtmosphereConfig.masterName "$REDIS_MASTER_NAME"
   723:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$REDIS_MASTER_NAME"
   724  fi

   729    for REDIS_SENTINEL_URL in "${REDIS_SENTINEL_URLS[@]}"; do
   730:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
   731:     yq write -i $CONFIG_FILE redisAtmosphereConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
   732:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
   733      INDEX=$(expr $INDEX + 1)

   737  if [[ "" != "$REDIS_ENV_NAMESPACE" ]]; then
   738:     yq write -i $CONFIG_FILE redisLockConfig.envNamespace "$REDIS_ENV_NAMESPACE"
   739:     yq write -i $CONFIG_FILE redisAtmosphereConfig.envNamespace "$REDIS_ENV_NAMESPACE"
   740  fi

   742  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
   743:   yq write -i $CONFIG_FILE redisLockConfig.nettyThreads "$REDIS_NETTY_THREADS"
   744:   yq write -i $CONFIG_FILE redisAtmosphereConfig.nettyThreads "$REDIS_NETTY_THREADS"
   745:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
   746  fi

   748  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
   749:   yq write -i $CONFIG_FILE redisLockConfig.useScriptCache false
   750:   yq write -i $CONFIG_FILE redisAtmosphereConfig.useScriptCache false
   751:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
   752  fi

   754  if [[ "" != "$CACHE_NAMESPACE" ]]; then
   755:     yq write -i $CONFIG_FILE cacheConfig.cacheNamespace "$CACHE_NAMESPACE"
   756  fi

   758  if [[ "" != "$CACHE_BACKEND" ]]; then
   759:     yq write -i $CONFIG_FILE cacheConfig.cacheBackend "$CACHE_BACKEND"
   760  fi

   762  if [[ "" != "$GCP_MARKETPLACE_ENABLED" ]]; then
   763:     yq write -i $CONFIG_FILE gcpMarketplaceConfig.enabled "$GCP_MARKETPLACE_ENABLED"
   764  fi

   766  if [[ "" != "$GCP_MARKETPLACE_SUBSCRIPTION_NAME" ]]; then
   767:     yq write -i $CONFIG_FILE gcpMarketplaceConfig.subscriptionName "$GCP_MARKETPLACE_SUBSCRIPTION_NAME"
   768  fi

   770  if [[ "" != "$CURRENT_JRE" ]]; then
   771:   yq write -i $CONFIG_FILE currentJre "$CURRENT_JRE"
   772  fi

   774  if [[ "" != "$MIGRATE_TO_JRE" ]]; then
   775:   yq write -i $CONFIG_FILE migrateToJre "$MIGRATE_TO_JRE"
   776  fi

   778  if [[ "" != "$ORACLE_JRE_TAR_PATH" ]]; then
   779:   yq write -i $CONFIG_FILE jreConfigs.oracle8u191.jreTarPath "$ORACLE_JRE_TAR_PATH"
   780  fi

   782  if [[ "" != "$OPENJDK_JRE_TAR_PATH" ]]; then
   783:   yq write -i $CONFIG_FILE jreConfigs.openjdk8u242.jreTarPath "$OPENJDK_JRE_TAR_PATH"
   784  fi

   786  if [[ "" != "$CDN_URL" ]]; then
   787:   yq write -i $CONFIG_FILE cdnConfig.url "$CDN_URL"
   788  fi

   790  if [[ "" != "$CDN_KEY" ]]; then
   791:   yq write -i $CONFIG_FILE cdnConfig.keyName "$CDN_KEY"
   792  fi

   794  if [[ "" != "$CDN_KEY_SECRET" ]]; then
   795:   yq write -i $CONFIG_FILE cdnConfig.keySecret "$CDN_KEY_SECRET"
   796  fi

   798  if [[ "" != "$CDN_DELEGATE_JAR_PATH" ]]; then
   799:   yq write -i $CONFIG_FILE cdnConfig.delegateJarPath "$CDN_DELEGATE_JAR_PATH"
   800  fi

   802  if [[ "" != "$CDN_WATCHER_JAR_BASE_PATH" ]]; then
   803:   yq write -i $CONFIG_FILE cdnConfig.watcherJarBasePath "$CDN_WATCHER_JAR_BASE_PATH"
   804  fi

   806  if [[ "" != "$CDN_WATCHER_JAR_PATH" ]]; then
   807:   yq write -i $CONFIG_FILE cdnConfig.watcherJarPath "$CDN_WATCHER_JAR_PATH"
   808  fi

   810  if [[ "" != "$CDN_WATCHER_METADATA_FILE_PATH" ]]; then
   811:   yq write -i $CONFIG_FILE cdnConfig.watcherMetaDataFilePath "$CDN_WATCHER_METADATA_FILE_PATH"
   812  fi

   814  if [[ "" != "$CDN_ORACLE_JRE_TAR_PATH" ]]; then
   815:   yq write -i $CONFIG_FILE cdnConfig.cdnJreTarPaths.oracle8u191 "$CDN_ORACLE_JRE_TAR_PATH"
   816  fi

   818  if [[ "" != "$CDN_OPENJDK_JRE_TAR_PATH" ]]; then
   819:   yq write -i $CONFIG_FILE cdnConfig.cdnJreTarPaths.openjdk8u242 "$CDN_OPENJDK_JRE_TAR_PATH"
   820  fi

   822  if [[ "" != "$COMMAND_LIBRARY_SERVICE_BASE_URL" ]]; then
   823:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.baseUrl "$COMMAND_LIBRARY_SERVICE_BASE_URL"
   824  fi

   826  if [[ "" != "$BUGSNAG_API_KEY" ]]; then
   827:   yq write -i $CONFIG_FILE bugsnagApiKey "$BUGSNAG_API_KEY"
   828  fi

   830  if [[ "" != "$ACCOUNT_LICENSE_CHECK_JOB_FREQUENCY" ]]; then
   831:   yq write -i $CONFIG_FILE jobsFrequencyConfig.accountLicenseCheckJobFrequencyInMinutes "$ACCOUNT_LICENSE_CHECK_JOB_FREQUENCY"
   832  fi

   834  if [[ "" != "$ACCOUNT_DELETION_JOB_FREQUENCY" ]]; then
   835:   yq write -i $CONFIG_FILE jobsFrequencyConfig.accountDeletionJobFrequencyInMinutes "$ACCOUNT_DELETION_JOB_FREQUENCY"
   836  fi

   838  if [[ "" != "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET" ]]; then
   839:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.managerToCommandLibraryServiceSecret "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET"
   840  fi

   842  if [[ "" != "$DELEGATE_SERVICE_TARGET" ]]; then
   843:   yq write -i $CONFIG_FILE grpcDelegateServiceClientConfig.target "$DELEGATE_SERVICE_TARGET"
   844  fi

   846  if [[ "" != "$DELEGATE_SERVICE_AUTHORITY" ]]; then
   847:   yq write -i $CONFIG_FILE grpcDelegateServiceClientConfig.authority "$DELEGATE_SERVICE_AUTHORITY"
   848  fi

   850  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_AUTHORITY" ]]; then
   851:   yq write -i $CONFIG_FILE grpcDMSClientConfig.authority "$DELEGATE_SERVICE_MANAGEMENT_AUTHORITY"
   852  fi

   854  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_TARGET" ]]; then
   855:   yq write -i $CONFIG_FILE grpcDMSClientConfig.target "$DELEGATE_SERVICE_MANAGEMENT_TARGET"
   856  fi

   858  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_SECRET" ]]; then
   859:   yq write -i $CONFIG_FILE dmsSecret "$DELEGATE_SERVICE_MANAGEMENT_SECRET"
   860  fi

   863  if [[ "" != "$DELEGATE_GRPC_TARGET" ]]; then
   864:   yq write -i $CONFIG_FILE grpcOnpremDelegateClientConfig.target "$DELEGATE_GRPC_TARGET"
   865  fi

   867  if [[ "" != "$DELEGATE_GRPC_AUTHORITY" ]]; then
   868:   yq write -i $CONFIG_FILE grpcOnpremDelegateClientConfig.authority "$DELEGATE_GRPC_AUTHORITY"
   869  fi

   871  if [[ "" != "$NG_MANAGER_AUTHORITY" ]]; then
   872:   yq write -i $CONFIG_FILE grpcClientConfig.authority "$NG_MANAGER_AUTHORITY"
   873  fi

   875  if [[ "" != "$NG_MANAGER_TARGET" ]]; then
   876:   yq write -i $CONFIG_FILE grpcClientConfig.target "$NG_MANAGER_TARGET"
   877  fi

   879  if [[ "" != "$REMINDERS_BEFORE_ACCOUNT_DELETION" ]]; then
   880:   yq write -i $CONFIG_FILE numberOfRemindersBeforeAccountDeletion "$REMINDERS_BEFORE_ACCOUNT_DELETION"
   881  fi

   883  if [[ "" != "$EXPORT_DATA_BATCH_SIZE" ]]; then
   884:   yq write -i $CONFIG_FILE exportAccountDataBatchSize "$EXPORT_DATA_BATCH_SIZE"
   885  fi

   887  if [[ "" != "$COMMAND_LIBRARY_PUBLISHING_ALLOWED" ]]; then
   888:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.publishingAllowed "$COMMAND_LIBRARY_PUBLISHING_ALLOWED"
   889  fi

   891  if [[ "" != "$COMMAND_LIBRARY_PUBLISHING_SECRET" ]]; then
   892:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.publishingSecret "$COMMAND_LIBRARY_PUBLISHING_SECRET"
   893  fi

   895  if [[ "" != "$LOG_STREAMING_SERVICE_BASEURL" ]]; then
   896:   yq write -i $CONFIG_FILE logStreamingServiceConfig.baseUrl "$LOG_STREAMING_SERVICE_BASEURL"
   897  fi

   899  if [[ "" != "$LOG_STREAMING_SERVICE_TOKEN" ]]; then
   900:   yq write -i $CONFIG_FILE logStreamingServiceConfig.serviceToken "$LOG_STREAMING_SERVICE_TOKEN"
   901  fi

   903  if [[ "" != "$ACCESS_CONTROL_ENABLED" ]]; then
   904:   yq write -i $CONFIG_FILE accessControlClient.enableAccessControl $ACCESS_CONTROL_ENABLED
   905  fi

   907  if [[ "" != "$ACCESS_CONTROL_BASE_URL" ]]; then
   908:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceConfig.baseUrl $ACCESS_CONTROL_BASE_URL
   909  fi

   911  if [[ "" != "$ACCESS_CONTROL_SECRET" ]]; then
   912:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceSecret $ACCESS_CONTROL_SECRET
   913  fi

   915  if [[ "" != "$ENABLE_AUDIT" ]]; then
   916:   yq write -i $CONFIG_FILE enableAudit $ENABLE_AUDIT
   917  fi

   919  if [[ "" != "$AUDIT_CLIENT_BASEURL" ]]; then
   920:   yq write -i $CONFIG_FILE auditClientConfig.baseUrl "$AUDIT_CLIENT_BASEURL"
   921  fi

   926    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
   927:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
   928      INDEX=$(expr $INDEX + 1)

   946  if [[ "" != ${GATEWAY_PATH_PREFIX+x} ]]; then
   947:   yq write -i $CONFIG_FILE portal.gatewayPathPrefix "$GATEWAY_PATH_PREFIX"
   948  fi

   950  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
   951:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl "$NG_MANAGER_BASE_URL"
   952  fi

   954  if [[ "" != "$ENABLE_USER_CHANGESTREAM" ]]; then
   955:   yq write -i $CONFIG_FILE userChangeStreamEnabled "$ENABLE_USER_CHANGESTREAM"
   956  fi

   958  if [[ "" != "$DISABLE_DELEGATE_MGMT_IN_MANAGER" ]]; then
   959:   yq write -i $CONFIG_FILE disableDelegateMgmtInManager "$DISABLE_DELEGATE_MGMT_IN_MANAGER"
   960  fi

   962  if [[ "" != "$GCP_SECRET_MANAGER_PROJECT" ]]; then
   963:   yq write -i $CONFIG_FILE secretsConfiguration.gcpSecretManagerProject "$GCP_SECRET_MANAGER_PROJECT"
   964  fi

   966  if [[ "" != "$RESOLVE_SECRETS" ]]; then
   967:   yq write -i $CONFIG_FILE secretsConfiguration.secretResolutionEnabled "$RESOLVE_SECRETS"
   968  fi

   970  if [[ "" != "$LDAP_GROUP_SYNC_INTERVAL" ]]; then
   971:   yq write -i $CONFIG_FILE ldapSyncJobConfig.syncInterval "$LDAP_GROUP_SYNC_INTERVAL"
   972  fi

   974  if [[ "" != "$LDAP_GROUP_SYNC_POOL_SIZE" ]]; then
   975:   yq write -i $CONFIG_FILE ldapSyncJobConfig.poolSize "$LDAP_GROUP_SYNC_POOL_SIZE"
   976  fi

   978  if [[ "" != "$LDAP_GROUP_SYNC_DEFAULT_CRON" ]]; then
   979:   yq write -i $CONFIG_FILE ldapSyncJobConfig.defaultCronExpression "$LDAP_GROUP_SYNC_DEFAULT_CRON"
   980  fi

   982  if [[ "" != "$USE_GLOBAL_KMS_AS_BASE_ALGO" ]]; then
   983:   yq write -i $CONFIG_FILE useGlobalKMSAsBaseAlgo "$USE_GLOBAL_KMS_AS_BASE_ALGO"
   984  fi

   986  if [[ "" != "$SEGMENT_ENABLED_NG" ]]; then
   987:   yq write -i $CONFIG_FILE segmentConfiguration.enabled "$SEGMENT_ENABLED_NG"
   988  fi

   990  if [[ "" != "$SEGMENT_URL_NG" ]]; then
   991:   yq write -i $CONFIG_FILE segmentConfiguration.url "$SEGMENT_URL_NG"
   992  fi

   994  if [[ "" != "$SEGMENT_APIKEY_NG" ]]; then
   995:   yq write -i $CONFIG_FILE segmentConfiguration.apiKey "$SEGMENT_APIKEY_NG"
   996  fi

   998  if [[ "" != "$SEGMENT_VERIFY_CERT_NG" ]]; then
   999:   yq write -i $CONFIG_FILE segmentConfiguration.certValidationRequired "$SEGMENT_VERIFY_CERT_NG"
  1000  fi

  1002  if [[ "" != "$SECOPS_EMAIL" ]]; then
  1003:  yq write -i config.yml totp.secOpsEmail "$SECOPS_EMAIL"
  1004  fi

  1006  if [[ "" != "$INCORRECT_ATTEMPTS_UNTIL_SECOPS_NOTIFIED" ]]; then
  1007:  yq write -i config.yml totp.incorrectAttemptsUntilSecOpsNotified "$INCORRECT_ATTEMPTS_UNTIL_SECOPS_NOTIFIED"
  1008  fi

  1010  if [[ "" != "$DELEGATE_MTLS_SUBDOMAIN" ]]; then
  1011:   yq write -i $CONFIG_FILE delegateMtlsSubdomain "$DELEGATE_MTLS_SUBDOMAIN"
  1012  fi

harness/harness-core/800-pipeline-service/container/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   18  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
   19:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
   20  fi
   21  
   22: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   23  

   27  if [[ "" != "$LOGGING_LEVEL" ]]; then
   28:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   29  fi

   35      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   36:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   37    done

   40  if [[ "" != "$MONGO_URI" ]]; then
   41:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   42  fi

   44  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   45:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   46  fi

   48  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
   49:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
   50  fi

   52  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
   53:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
   54  fi

   56  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
   57:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
   58  fi

   60  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
   61:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
   62  fi

   64  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
   65:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
   66  fi

   68  if [[ "" != "$MONGO_TRANSACTIONS_ALLOWED" ]]; then
   69:   yq write -i $CONFIG_FILE mongo.transactionsEnabled $MONGO_TRANSACTIONS_ALLOWED
   70  fi

   72  if [[ "" != "$DISTRIBUTED_LOCK_IMPLEMENTATION" ]]; then
   73:   yq write -i $CONFIG_FILE distributedLockImplementation "$DISTRIBUTED_LOCK_IMPLEMENTATION"
   74  fi

   76  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
   77:   yq write -i $CONFIG_FILE grpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
   78  fi

   80  if [[ "" != "$MANAGER_TARGET" ]]; then
   81:   yq write -i $CONFIG_FILE managerTarget $MANAGER_TARGET
   82  fi

   84  if [[ "" != "$MANAGER_AUTHORITY" ]]; then
   85:   yq write -i $CONFIG_FILE managerAuthority $MANAGER_AUTHORITY
   86  fi

   88  if [[ "" != "$MANAGER_BASE_URL" ]]; then
   89:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl $MANAGER_BASE_URL
   90  fi

   92  if [[ "" != "$MANAGER_SERVICE_SECRET" ]]; then
   93:   yq write -i $CONFIG_FILE managerServiceSecret $MANAGER_SERVICE_SECRET
   94  fi

   96  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
   97:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl $NG_MANAGER_BASE_URL
   98  fi

  100  if [[ "" != "$NG_MANAGER_SERVICE_SECRET" ]]; then
  101:   yq write -i $CONFIG_FILE ngManagerServiceSecret $NG_MANAGER_SERVICE_SECRET
  102  fi

  104  if [[ "" != "$PIPELINE_SERVICE_ENDPOINT" ]]; then
  105:   yq write -i $CONFIG_FILE pipelineServiceClientConfig.baseUrl $PIPELINE_SERVICE_ENDPOINT
  106  fi

  108  if [[ "" != "$PIPELINE_SERVICE_SECRET" ]]; then
  109:   yq write -i $CONFIG_FILE pipelineServiceSecret $PIPELINE_SERVICE_SECRET
  110  fi

  112  if [[ "" != "$TEMPLATE_SERVICE_ENDPOINT" ]]; then
  113:   yq write -i $CONFIG_FILE templateServiceClientConfig.baseUrl $TEMPLATE_SERVICE_ENDPOINT
  114  fi

  116  if [[ "" != "$TEMPLATE_SERVICE_SECRET" ]]; then
  117:   yq write -i $CONFIG_FILE templateServiceSecret $TEMPLATE_SERVICE_SECRET
  118  fi

  120  if [[ "" != "$CI_MANAGER_BASE_URL" ]]; then
  121:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.ci.serviceHttpClientConfig.baseUrl $CI_MANAGER_BASE_URL
  122  fi

  124  if [[ "" != "$CI_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS" ]]; then
  125:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.ci.serviceHttpClientConfig.connectTimeOutSeconds $CI_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS
  126  fi

  128  if [[ "" != "$CI_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS" ]]; then
  129:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.ci.serviceHttpClientConfig.readTimeOutSeconds $CI_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS
  130  fi

  132  if [[ "" != "$CI_MANAGER_SERVICE_SECRET" ]]; then
  133:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.ci.secret $CI_MANAGER_SERVICE_SECRET
  134  fi

  136  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
  137:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cd.serviceHttpClientConfig.baseUrl $NG_MANAGER_BASE_URL
  138  fi

  140  if [[ "" != "$NG_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS" ]]; then
  141:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cd.serviceHttpClientConfig.connectTimeOutSeconds $NG_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS
  142  fi

  144  if [[ "" != "$NG_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS" ]]; then
  145:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cd.serviceHttpClientConfig.readTimeOutSeconds $NG_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS
  146  fi

  148  if [[ "" != "$NG_MANAGER_SERVICE_SECRET" ]]; then
  149:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cd.secret $NG_MANAGER_SERVICE_SECRET
  150  fi

  152  if [[ "" != "$CV_MANAGER_BASE_URL" ]]; then
  153:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cv.serviceHttpClientConfig.baseUrl $CV_MANAGER_BASE_URL
  154  fi

  156  if [[ "" != "$CV_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS" ]]; then
  157:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cv.serviceHttpClientConfig.connectTimeOutSeconds $CV_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS
  158  fi

  160  if [[ "" != "$CV_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS" ]]; then
  161:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cv.serviceHttpClientConfig.readTimeOutSeconds $CV_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS
  162  fi

  164  if [[ "" != "$CV_MANAGER_SERVICE_SECRET" ]]; then
  165:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cv.secret $CV_MANAGER_SERVICE_SECRET
  166  fi

  168  if [[ "" != "$NG_MANAGER_TARGET" ]]; then
  169:   yq write -i $CONFIG_FILE grpcClientConfigs.cd.target $NG_MANAGER_TARGET
  170  fi

  172  if [[ "" != "$NG_MANAGER_AUTHORITY" ]]; then
  173:   yq write -i $CONFIG_FILE grpcClientConfigs.cd.authority $NG_MANAGER_AUTHORITY
  174  fi

  176  if [[ "" != "$CVNG_MANAGER_TARGET" ]]; then
  177:   yq write -i $CONFIG_FILE grpcClientConfigs.cv.target $CVNG_MANAGER_TARGET
  178  fi

  180  if [[ "" != "$CVNG_MANAGER_AUTHORITY" ]]; then
  181:   yq write -i $CONFIG_FILE grpcClientConfigs.cv.authority $CVNG_MANAGER_AUTHORITY
  182  fi

  184  if [[ "" != "$CI_MANAGER_TARGET" ]]; then
  185:   yq write -i $CONFIG_FILE grpcClientConfigs.ci.target $CI_MANAGER_TARGET
  186  fi

  188  if [[ "" != "$CI_MANAGER_AUTHORITY" ]]; then
  189:   yq write -i $CONFIG_FILE grpcClientConfigs.ci.authority $CI_MANAGER_AUTHORITY
  190  fi

  192  if [[ "" != "$NG_MANAGER_GITSYNC_TARGET" ]]; then
  193:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.target $NG_MANAGER_GITSYNC_TARGET
  194  fi

  196  if [[ "" != "$NG_MANAGER_GITSYNC_AUTHORITY" ]]; then
  197:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.authority $NG_MANAGER_GITSYNC_AUTHORITY
  198  fi

  200  if [[ "" != "$SCM_SERVICE_URI" ]]; then
  201:   yq write -i $CONFIG_FILE gitSdkConfiguration.scmConnectionConfig.url "$SCM_SERVICE_URI"
  202  fi

  204  if [[ "" != "$PIPELINE_SERVICE_BASE_URL" ]]; then
  205:   yq write -i $CONFIG_FILE pipelineServiceBaseUrl "$PIPELINE_SERVICE_BASE_URL"
  206  fi

  208  if [[ "" != "$PMS_API_BASE_URL" ]]; then
  209:   yq write -i $CONFIG_FILE pmsApiBaseUrl "$PMS_API_BASE_URL"
  210  fi

  213    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  214:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  215  else

  219  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  220:   yq write -i $CONFIG_FILE jwtAuthSecret "$JWT_AUTH_SECRET"
  221  fi

  223  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  224:   yq write -i $CONFIG_FILE jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  225  fi

  230    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  231:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  232      INDEX=$(expr $INDEX + 1)

  236  if [[ "" != "$NOTIFICATION_BASE_URL" ]]; then
  237:   yq write -i $CONFIG_FILE notificationClient.httpClient.baseUrl "$NOTIFICATION_BASE_URL"
  238  fi

  240  if [[ "" != "$NOTIFICATION_MONGO_URI" ]]; then
  241:   yq write -i $CONFIG_FILE notificationClient.messageBroker.uri "${NOTIFICATION_MONGO_URI//\\&/&}"
  242  fi

  244  if [[ "" != "$MANAGER_CLIENT_BASEURL" ]]; then
  245:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl "$MANAGER_CLIENT_BASEURL"
  246  fi

  248  if [[ "" != "$TIMESCALE_PASSWORD" ]]; then
  249:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALE_PASSWORD"
  250  fi

  252  if [[ "" != "$TIMESCALE_URI" ]]; then
  253:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALE_URI"
  254  fi

  256  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
  257:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
  258  fi

  260  if [[ "" != "$ENABLE_DASHBOARD_TIMESCALE" ]]; then
  261:   yq write -i $CONFIG_FILE enableDashboardTimescale $ENABLE_DASHBOARD_TIMESCALE
  262  fi

  266  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  267:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  268  fi

  271  if [[ "" != "$CACHE_CONFIG_REDIS_URL" ]]; then
  272:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$CACHE_CONFIG_REDIS_URL"
  273  fi

  279  if [[ "" != "$CACHE_CONFIG_SENTINEL_MASTER_NAME" ]]; then
  280:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$CACHE_CONFIG_SENTINEL_MASTER_NAME"
  281  fi

  286    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  287:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
  288      INDEX=$(expr $INDEX + 1)

  292  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  293:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  294  fi

  313    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  314:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  315      INDEX=$(expr $INDEX + 1)

harness/harness-core/840-template-service/container/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   17  
   18: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   19  

   22  if [[ "" != "$LOGGING_LEVEL" ]]; then
   23:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   24  fi

   30      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   31:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   32    done

   35  if [[ "" != "$MONGO_URI" ]]; then
   36:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   37  fi

   39  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   40:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   41  fi

   43  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
   44:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
   45  fi

   47  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
   48:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
   49  fi

   51  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
   52:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
   53  fi

   55  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
   56:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
   57  fi

   59  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
   60:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
   61  fi

   63  if [[ "" != "$MONGO_TRANSACTIONS_ALLOWED" ]]; then
   64:   yq write -i $CONFIG_FILE mongo.transactionsEnabled $MONGO_TRANSACTIONS_ALLOWED
   65  fi

   67  if [[ "" != "$MANAGER_TARGET" ]]; then
   68:   yq write -i $CONFIG_FILE managerTarget $MANAGER_TARGET
   69  fi

   71  if [[ "" != "$MANAGER_AUTHORITY" ]]; then
   72:   yq write -i $CONFIG_FILE managerAuthority $MANAGER_AUTHORITY
   73  fi

   75  if [[ "" != "$MANAGER_SERVICE_SECRET" ]]; then
   76:   yq write -i $CONFIG_FILE managerServiceSecret $MANAGER_SERVICE_SECRET
   77  fi

   79  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
   80:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl $NG_MANAGER_BASE_URL
   81  fi

   83  if [[ "" != "$MANAGER_CLIENT_BASEURL" ]]; then
   84:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl $MANAGER_CLIENT_BASEURL
   85  fi

   87  if [[ "" != "$NG_MANAGER_SERVICE_SECRET" ]]; then
   88:   yq write -i $CONFIG_FILE ngManagerServiceSecret $NG_MANAGER_SERVICE_SECRET
   89  fi

   91  if [[ "" != "$NG_MANAGER_GITSYNC_TARGET" ]]; then
   92:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.target $NG_MANAGER_GITSYNC_TARGET
   93  fi

   95  if [[ "" != "$NG_MANAGER_GITSYNC_AUTHORITY" ]]; then
   96:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.authority $NG_MANAGER_GITSYNC_AUTHORITY
   97  fi

   99  if [[ "" != "$SCM_SERVICE_URI" ]]; then
  100:   yq write -i $CONFIG_FILE gitSdkConfiguration.scmConnectionConfig.url "$SCM_SERVICE_URI"
  101  fi

  104    yq delete -i $CONFIG_FILE logging.appenders[0]
  105:   yq write -i $CONFIG_FILE logging.appenders[0].stackdriverLogEnabled "true"
  106  else

  110  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  111:   yq write -i $CONFIG_FILE jwtAuthSecret "$JWT_AUTH_SECRET"
  112  fi

  114  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  115:   yq write -i $CONFIG_FILE jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  116  fi

  121    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  122:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  123      INDEX=$(expr $INDEX + 1)

  129  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  130:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  131  fi

  133  if [[ "" != "$CACHE_CONFIG_REDIS_URL" ]]; then
  134:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$CACHE_CONFIG_REDIS_URL"
  135  fi

  141  if [[ "" != "$CACHE_CONFIG_SENTINEL_MASTER_NAME" ]]; then
  142:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$CACHE_CONFIG_SENTINEL_MASTER_NAME"
  143  fi

  148    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  149:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[+] "${REDIS_SENTINEL_URL}"
  150      INDEX=$(expr $INDEX + 1)

  154  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  155:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  156  fi

harness/harness-core/950-events-framework-monitor/container/scripts/replace_configs.sh:
  12    if [[ "" != "$CONFIG_VALUE" ]]; then
  13:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
  14    fi

  17  if [[ "" != "$LOGGING_LEVEL" ]]; then
  18:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
  19  fi

  25      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
  26:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
  27    done

  31    yq delete -i $CONFIG_FILE logging.appenders[0]
  32:   yq write -i $CONFIG_FILE logging.appenders[0].stackdriverLogEnabled "true"
  33  else

  40    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  41:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  42      INDEX=$(expr $INDEX + 1)

harness/harness-core/951-debezium-service/container/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   17  
   18: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   19  
   20  if [[ "" != "$LOGGING_LEVEL" ]]; then
   21:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   22  fi

   28      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   29:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   30    done

   34    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
   35:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
   36  else

   43    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
   44:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
   45      INDEX=$(expr $INDEX + 1)

   51  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
   52:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
   53  fi

   56  if [[ "" != "$CACHE_CONFIG_REDIS_URL" ]]; then
   57:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$CACHE_CONFIG_REDIS_URL"
   58  fi

   64  if [[ "" != "$CACHE_CONFIG_SENTINEL_MASTER_NAME" ]]; then
   65:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$CACHE_CONFIG_SENTINEL_MASTER_NAME"
   66  fi

   71    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
   72:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
   73      INDEX=$(expr $INDEX + 1)

   77  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
   78:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
   79  fi

  102    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  103:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  104      INDEX=$(expr $INDEX + 1)

harness/harness-core/access-control/build/container/scripts/replace_configs.sh:
  10  
  11: yq write -i $CONFIG_FILE server.adminConnectors "[]"
  12  

  14    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  15:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  16  else

  20  if [[ "" != "$LOGGING_LEVEL" ]]; then
  21:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
  22  fi

  28      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
  29:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
  30    done

  33  if [[ "" != "$SERVER_PORT" ]]; then
  34:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
  35  fi

  37  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
  38:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
  39  fi

  44    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  45:     yq write -i $CONFIG_FILE eventsConfig.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  46      INDEX=$(expr $INDEX + 1)

  53    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  54:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  55      INDEX=$(expr $INDEX + 1)

  62    for ALLOWED_URL in "${ALLOWED_ORIGINS[@]}"; do
  63:     yq write -i $CONFIG_FILE allowedOrigins.[$INDEX] "${ALLOWED_URL}"
  64      INDEX=$(expr $INDEX + 1)

harness/harness-core/dockerization/analyser-service/scripts/replace_configs.sh:
  13    if [[ "" != "$CONFIG_VALUE" ]]; then
  14:     yq write -i "$CONFIG_FILE" "$CONFIG_KEY" "$CONFIG_VALUE"
  15    fi

  18  yq delete -i $CONFIG_FILE 'server.applicationConnectors.(type==https)'
  19: yq write -i $CONFIG_FILE server.adminConnectors "[]"
  20  

  22    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  23:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  24  else

  28  if [[ "" != "$MONGO_URI" ]]; then
  29:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
  30  fi

  32  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
  33:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
  34  fi

  36  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
  37:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
  38  fi

  40  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
  41:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
  42  fi

  44  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
  45:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
  46  fi

  48  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  49:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  50  fi

  52  if [[ "" != "$MONGO_TRANSACTIONS_ALLOWED" ]]; then
  53:   yq write -i $CONFIG_FILE mongo.transactionsEnabled $MONGO_TRANSACTIONS_ALLOWED
  54  fi

  60    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  61:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  62      INDEX=$(expr $INDEX + 1)

harness/harness-core/dockerization/batch-processing/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i "$CONFIG_FILE" "$CONFIG_KEY" "$CONFIG_VALUE"
   15    fi

   18  if [[ "" != "$MONGO_URI" ]]; then
   19:   yq write -i $CONFIG_FILE harness-mongo.uri "$MONGO_URI"
   20  fi

   22  if [[ "" != "$MONGO_READ_PREF_NAME" ]]; then
   23:   yq write -i $CONFIG_FILE harness-mongo.readPref.name "$MONGO_READ_PREF_NAME"
   24  fi

   30      TAG_VALUE=$(echo $ITEM | awk -F= '{print $2}')
   31:     yq write -i $CONFIG_FILE "harness-mongo.readPref.tagSet.[$TAG_NAME]" "$TAG_VALUE"
   32    done

   35  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
   36:   yq write -i $CONFIG_FILE harness-mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
   37  fi

   39  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
   40:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
   41  fi

   43  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
   44:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
   45  fi

   47  if [[ "" != "$TIMESCALEDB_URI" ]]; then
   48:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALEDB_URI"
   49  fi

   51  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
   52:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
   53  fi

   55  if [[ "" != "$TIMESCALEDB_PASSWORD" ]]; then
   56:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALEDB_PASSWORD"
   57  fi

   59  if [[ "" != "$S3_SYNC_CONFIG_BUCKET_NAME" ]]; then
   60:   yq write -i $CONFIG_FILE awsS3SyncConfig.awsS3BucketName "$S3_SYNC_CONFIG_BUCKET_NAME"
   61  fi

   63  if [[ "" != "$QUERY_BATCH_SIZE" ]]; then
   64:   yq write -i $CONFIG_FILE batchQueryConfig.queryBatchSize "$QUERY_BATCH_SIZE"
   65  fi

   67  if [[ "" != "$SYNC_JOB_DISABLED" ]]; then
   68:   yq write -i $CONFIG_FILE batchQueryConfig.syncJobDisabled "$SYNC_JOB_DISABLED"
   69  fi

   71  if [[ "" != "$S3_SYNC_CONFIG_ACCESSKEY" ]]; then
   72:   yq write -i $CONFIG_FILE awsS3SyncConfig.awsAccessKey "$S3_SYNC_CONFIG_ACCESSKEY"
   73  fi

   75  if [[ "" != "$S3_SYNC_CONFIG_SECRETKEY" ]]; then
   76:   yq write -i $CONFIG_FILE awsS3SyncConfig.awsSecretKey "$S3_SYNC_CONFIG_SECRETKEY"
   77  fi

   79  if [[ "" != "$S3_SYNC_CONFIG_REGION" ]]; then
   80:   yq write -i $CONFIG_FILE awsS3SyncConfig.region "$S3_SYNC_CONFIG_REGION"
   81  fi

   83  if [[ "" != "$DATA_PIPELINE_CONFIG_GCP_PROJECT_ID" ]]; then
   84:   yq write -i $CONFIG_FILE billingDataPipelineConfig.gcpProjectId "$DATA_PIPELINE_CONFIG_GCP_PROJECT_ID"
   85  fi

   87  if [[ "" != "$DATA_PIPELINE_CONFIG_GCS_BASE_PATH" ]]; then
   88:   yq write -i $CONFIG_FILE billingDataPipelineConfig.gcsBasePath "$DATA_PIPELINE_CONFIG_GCS_BASE_PATH"
   89  fi

   91  if [[ "" != "$GCP_PIPELINE_PUB_SUB_TOPIC" ]]; then
   92:   yq write -i $CONFIG_FILE billingDataPipelineConfig.gcpPipelinePubSubTopic "$GCP_PIPELINE_PUB_SUB_TOPIC"
   93  fi

   95  if [[ "" != "$GCP_USE_NEW_PIPELINE" ]]; then
   96:   yq write -i $CONFIG_FILE billingDataPipelineConfig.gcpUseNewPipeline "$GCP_USE_NEW_PIPELINE"
   97  fi

   99  if [[ "" != "$AWS_USE_NEW_PIPELINE" ]]; then
  100:   yq write -i $CONFIG_FILE billingDataPipelineConfig.awsUseNewPipeline "$AWS_USE_NEW_PIPELINE"
  101  fi

  103  if [[ "" != "$GCP_SYNC_ENABLED" ]]; then
  104:   yq write -i $CONFIG_FILE billingDataPipelineConfig.isGcpSyncEnabled "$GCP_SYNC_ENABLED"
  105  fi

  107  if [[ "" != "$CLUSTER_DATA_GCS_BUCKET" ]]; then
  108:   yq write -i $CONFIG_FILE billingDataPipelineConfig.clusterDataGcsBucketName "$CLUSTER_DATA_GCS_BUCKET"
  109  fi

  111  if [[ "" != "$CLUSTER_DATA_GCS_BACKUP_BUCKET" ]]; then
  112:   yq write -i $CONFIG_FILE billingDataPipelineConfig.clusterDataGcsBackupBucketName "$CLUSTER_DATA_GCS_BACKUP_BUCKET"
  113  fi

  115  if [[ "" != "$AWS_ROLE_NAME" ]]; then
  116:   yq write -i $CONFIG_FILE billingDataPipelineConfig.awsRoleName "$AWS_ROLE_NAME"
  117  fi

  120  if [[ "" != "$SMTP_HOST" ]]; then
  121:   yq write -i $CONFIG_FILE smtp.host "$SMTP_HOST"
  122  fi

  124  if [[ "" != "$SMTP_USERNAME" ]]; then
  125:   yq write -i $CONFIG_FILE smtp.username "$SMTP_USERNAME"
  126  fi

  128  if [[ "" != "$SMTP_PASSWORD" ]]; then
  129:   yq write -i $CONFIG_FILE smtp.password "$SMTP_PASSWORD"
  130  fi

  132  if [[ "" != "$SMTP_USE_SSL" ]]; then
  133:   yq write -i $CONFIG_FILE smtp.useSSL "$SMTP_USE_SSL"
  134  fi

  136  if [[ "" != "$UI_SERVER_URL" ]]; then
  137:   yq write -i $CONFIG_FILE baseUrl "$UI_SERVER_URL"
  138  fi

  140  if [[ "" != "$SEGMENT_ENABLED" ]]; then
  141:   yq write -i $CONFIG_FILE segmentConfig.enabled "$SEGMENT_ENABLED"
  142  fi

  144  if [[ "" != "$SEGMENT_APIKEY" ]]; then
  145:   yq write -i $CONFIG_FILE segmentConfig.apiKey "$SEGMENT_APIKEY"
  146  fi

  148  if [[ "" != "$CF_API_KEY" ]]; then
  149:   yq write -i $CONFIG_FILE cfConfig.apiKey "$CF_API_KEY"
  150  fi

  152  if [[ "" != "$CF_BASE_URL" ]]; then
  153:   yq write -i $CONFIG_FILE cfConfig.baseUrl "$CF_BASE_URL"
  154  fi

  156  if [[ "" != "$POD_NAME" ]]; then
  157:   yq write -i $CONFIG_FILE podInfo.name "$POD_NAME"
  158  fi

  160  if [[ "" != "$REPLICA" ]]; then
  161:   yq write -i $CONFIG_FILE podInfo.replica "$REPLICA"
  162  fi

  164  if [[ "" != "$ISOLATED_REPLICA" ]]; then
  165:   yq write -i $CONFIG_FILE podInfo.isolatedReplica "$ISOLATED_REPLICA"
  166  fi

  168  if [[ "" != "$BUDGET_ALERTS_JOB_CRON" ]]; then
  169:   yq write -i $CONFIG_FILE scheduler-jobs-config.budgetAlertsJobCron "$BUDGET_ALERTS_JOB_CRON"
  170  fi

  172  if [[ "" != "$WEEKLY_REPORT_JOB_CRON" ]]; then
  173:   yq write -i $CONFIG_FILE scheduler-jobs-config.weeklyReportsJobCron "$WEEKLY_REPORT_JOB_CRON"
  174  fi

  176  if [[ "" != "$CONNECTOR_HEALTH_UPDATE_CRON" ]]; then
  177:   yq write -i $CONFIG_FILE scheduler-jobs-config.connectorHealthUpdateJobCron "$CONNECTOR_HEALTH_UPDATE_CRON"
  178  fi

  180  if [[ "" != "$AWS_ACCOUNT_TAGS_COLLECTION_CRON" ]]; then
  181:   yq write -i $CONFIG_FILE scheduler-jobs-config.awsAccountTagsCollectionJobCron "$AWS_ACCOUNT_TAGS_COLLECTION_CRON"
  182  fi

  184  if [[ "" != "$HARNESS_CE_AZURE_CLIENTID" ]]; then
  185:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureAppClientId "$HARNESS_CE_AZURE_CLIENTID"
  186  fi

  188  if [[ "" != "$HARNESS_CE_AZURE_CLIENTSECRET" ]]; then
  189:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureAppClientSecret "$HARNESS_CE_AZURE_CLIENTSECRET"
  190  fi

  192  if [[ "" != "$HARNESS_CE_AZURE_TENANTID" ]]; then
  193:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureTenantId "$HARNESS_CE_AZURE_TENANTID"
  194  fi

  196  if [[ "" != "$HARNESS_CE_AZURE_CONTAINER_NAME" ]]; then
  197:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureStorageContainerName "$HARNESS_CE_AZURE_CONTAINER_NAME"
  198  fi

  200  if [[ "" != "$HARNESS_CE_AZURE_STORAGE_NAME" ]]; then
  201:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureStorageAccountName "$HARNESS_CE_AZURE_STORAGE_NAME"
  202  fi

  204  if [[ "" != "$HARNESS_CE_AZURE_SAS" ]]; then
  205:   yq write -i $CONFIG_FILE azureStorageSyncConfig.azureSasToken "$HARNESS_CE_AZURE_SAS"
  206  fi

  208  if [[ "" != "$HARNESS_CE_AZURE_IS_SYNC_JOB_DISABLED" ]]; then
  209:   yq write -i $CONFIG_FILE azureStorageSyncConfig.syncJobDisabled "$HARNESS_CE_AZURE_IS_SYNC_JOB_DISABLED"
  210  fi

  212  if [[ "" != "$ANOMALY_DETECTION_PYTHON_SERVICE_URL" ]]; then
  213:   yq write -i $CONFIG_FILE cePythonService.pythonServiceUrl "$ANOMALY_DETECTION_PYTHON_SERVICE_URL"
  214  fi

  216  if [[ "" != "$ANOMALY_DETECTION_USE_PROPHET" ]]; then
  217:   yq write -i $CONFIG_FILE cePythonService.useProphet "$ANOMALY_DETECTION_USE_PROPHET"
  218  fi

  220  if [[ "" != "$BANZAI_CONFIG_HOST" ]]; then
  221:   yq write -i $CONFIG_FILE banzaiConfig.host "$BANZAI_CONFIG_HOST"
  222  fi

  224  if [[ "" != "$BANZAI_CONFIG_PORT" ]]; then
  225:   yq write -i $CONFIG_FILE banzaiConfig.port "$BANZAI_CONFIG_PORT"
  226  fi

  228  if [[ "" != "$NG_MANAGER_SERVICE_HTTP_CLIENT_CONFIG_BASE_URL" ]]; then
  229:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl "$NG_MANAGER_SERVICE_HTTP_CLIENT_CONFIG_BASE_URL"
  230  fi

  232  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  233:   yq write -i $CONFIG_FILE ngManagerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  234  fi

  236  if [[ "" != "$CONNECTOR_HEALTH_UPDATE_JOB_ENABLED" ]]; then
  237:   yq write -i $CONFIG_FILE connectorHealthUpdateJobConfig.enabled "$CONNECTOR_HEALTH_UPDATE_JOB_ENABLED"
  238  fi

  240  if [[ "" != "$AWS_ACCOUNT_TAGS_COLLECTION_JOB_ENABLED" ]]; then
  241:   yq write -i $CONFIG_FILE awsAccountTagsCollectionJobConfig.enabled "$AWS_ACCOUNT_TAGS_COLLECTION_JOB_ENABLED"
  242  fi

harness/harness-core/dockerization/ce-nextgen/scripts/replace_configs.sh:
   12    if [[ "" != "$CONFIG_VALUE" ]]; then
   13:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   14    fi

   22  
   23:     yq write -i $CONFIG_FILE $1.hosts[$INDEX].host "$HOST"
   24      if [[ "" != "$PORT" ]]; then
   25:       yq write -i $CONFIG_FILE $1.hosts[$INDEX].port "$PORT"
   26      fi

   34      VALUE=$(cut -d= -f 2 <<< "$PARAM_PAIR")
   35:     yq write -i $CONFIG_FILE $1.params.$NAME "$VALUE"
   36    done

  113    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  114:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  115      INDEX=$(expr $INDEX + 1)

  120    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  121:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  122  else

harness/harness-core/dockerization/change-data-capture/scripts/replace_configs.sh:
  10    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  11:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  12  else

  19  if [[ "" != "$MONGO_URI" ]]; then
  20:   yq write -i $CONFIG_FILE harness-mongo.uri "$MONGO_URI"
  21  fi

  23  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
  24:   yq write -i $CONFIG_FILE harness-mongo.serverSelectionTimeout "$MONGO_SERVER_SELECTION_TIMEOUT"
  25  fi

  27  if [[ "" != "$MONGO_TAG_NAME" ]]; then
  28:   yq write -i $CONFIG_FILE mongotags.tagKey "$MONGO_TAG_NAME"
  29  fi

  31  if [[ "" != "$MONGO_TAG_VALUE" ]]; then
  32:   yq write -i $CONFIG_FILE mongotags.tagValue "$MONGO_TAG_VALUE"
  33  fi

  35  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  36:   yq write -i $CONFIG_FILE harness-mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  37  fi

  39  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
  40:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
  41  fi

  43  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
  44:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
  45  fi

  47  if [[ "" != "$PMS_MONGO_URI" ]]; then
  48:   yq write -i $CONFIG_FILE pms-harness.uri "$PMS_MONGO_URI"
  49  fi

  51  if [[ "" != "$CDC_MONGO_URI" ]]; then
  52:   yq write -i $CONFIG_FILE cdc-mongo.uri "$CDC_MONGO_URI"
  53  fi

  55  if [[ "" != "$TIMESCALEDB_URI" ]]; then
  56:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALEDB_URI"
  57  fi

  59  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
  60:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
  61  fi

  63  if [[ "" != "$TIMESCALEDB_PASSWORD" ]]; then
  64:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALEDB_PASSWORD"
  65  fi

  67  if [[ "" != "$GCP_PROJECT_ID" ]]; then
  68:   yq write -i $CONFIG_FILE gcp-project-id "$GCP_PROJECT_ID"
  69  fi

  71  if [[ "" != "$NG_HARNESS_MONGO_URI" ]]; then
  72:   yq write -i $CONFIG_FILE ng-harness.uri  "$NG_HARNESS_MONGO_URI"
  73  fi

harness/harness-core/dockerization/ci-manager/scripts/replace_configs.sh:
   14    if [[ "" != "$CONFIG_VALUE" ]]; then
   15:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   16    fi

   19  yq delete -i $CONFIG_FILE 'server.applicationConnectors.(type==https)'
   20: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   21  

   24  if [[ "" != "$LOGGING_LEVEL" ]]; then
   25:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   26  fi

   32      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   33:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   34    done

   37  if [[ "" != "$SERVER_PORT" ]]; then
   38:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
   39  else
   40:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "7090"
   41  fi

   43  if [[ "" != "$MANAGER_URL" ]]; then
   44:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl "$MANAGER_URL"
   45  fi

   47  if [[ "" != "$NG_MANAGER_URL" ]]; then
   48:   yq write -i $CONFIG_FILE ngManagerClientConfig.baseUrl "$NG_MANAGER_URL"
   49  fi

   51  if [[ "" != "$ADDON_IMAGE" ]]; then
   52:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.addonImage "$ADDON_IMAGE"
   53  fi
   54  if [[ "" != "$LE_IMAGE" ]]; then
   55:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.liteEngineImage "$LE_IMAGE"
   56  fi

   58  if [[ "" != "$GIT_CLONE_IMAGE" ]]; then
   59:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.gitCloneConfig.image "$GIT_CLONE_IMAGE"
   60  fi

   62  if [[ "" != "$DOCKER_PUSH_IMAGE" ]]; then
   63:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.buildAndPushDockerRegistryConfig.image "$DOCKER_PUSH_IMAGE"
   64  fi

   66  if [[ "" != "$ECR_PUSH_IMAGE" ]]; then
   67:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.buildAndPushECRConfig.image "$ECR_PUSH_IMAGE"
   68  fi

   70  if [[ "" != "$GCR_PUSH_IMAGE" ]]; then
   71:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.buildAndPushGCRConfig.image "$GCR_PUSH_IMAGE"
   72  fi

   74  if [[ "" != "$ENABLE_AUTH" ]]; then
   75:   yq write -i $CONFIG_FILE enableAuth "$ENABLE_AUTH"
   76  fi

   78  if [[ "" != "$GCS_UPLOAD_IMAGE" ]]; then
   79:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.gcsUploadConfig.image "$GCS_UPLOAD_IMAGE"
   80  fi

   82  if [[ "" != "$S3_UPLOAD_IMAGE" ]]; then
   83:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.s3UploadConfig.image "$S3_UPLOAD_IMAGE"
   84  fi

   86  if [[ "" != "$ARTIFACTORY_UPLOAD_IMAGE" ]]; then
   87:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.artifactoryUploadConfig.image "$ARTIFACTORY_UPLOAD_IMAGE"
   88  fi

   90  if [[ "" != "$GCS_CACHE_IMAGE" ]]; then
   91:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.cacheGCSConfig.image "$GCS_CACHE_IMAGE"
   92  fi

   94  if [[ "" != "$S3_CACHE_IMAGE" ]]; then
   95:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.cacheS3Config.image "$S3_CACHE_IMAGE"
   96  fi

   98  if [[ "" != "$VM_GIT_CLONE_IMAGE" ]]; then
   99:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.gitClone "$VM_GIT_CLONE_IMAGE"
  100  fi

  102  if [[ "" != "$VM_DOCKER_PUSH_IMAGE" ]]; then
  103:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.buildAndPushDockerRegistry "$VM_DOCKER_PUSH_IMAGE"
  104  fi

  106  if [[ "" != "$VM_ECR_PUSH_IMAGE" ]]; then
  107:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.buildAndPushECR "$VM_ECR_PUSH_IMAGE"
  108  fi

  110  if [[ "" != "$VM_GCR_PUSH_IMAGE" ]]; then
  111:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.buildAndPushGCR "$VM_GCR_PUSH_IMAGE"
  112  fi

  114  if [[ "" != "$VM_GCS_UPLOAD_IMAGE" ]]; then
  115:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.gcsUpload "$VM_GCS_UPLOAD_IMAGE"
  116  fi

  118  if [[ "" != "$VM_S3_UPLOAD_IMAGE" ]]; then
  119:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.s3Upload "$VM_S3_UPLOAD_IMAGE"
  120  fi

  122  if [[ "" != "$VM_ARTIFACTORY_UPLOAD_IMAGE" ]]; then
  123:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.artifactoryUpload "$VM_ARTIFACTORY_UPLOAD_IMAGE"
  124  fi

  126  if [[ "" != "$VM_GCS_CACHE_IMAGE" ]]; then
  127:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.cacheGCS "$VM_GCS_CACHE_IMAGE"
  128  fi

  130  if [[ "" != "$VM_S3_CACHE_IMAGE" ]]; then
  131:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.stepConfig.vmImageConfig.cacheS3 "$VM_S3_CACHE_IMAGE"
  132  fi

  134  if [[ "" != "$DEFAULT_MEMORY_LIMIT" ]]; then
  135:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.defaultMemoryLimit "$DEFAULT_MEMORY_LIMIT"
  136  fi
  137  if [[ "" != "$DEFAULT_CPU_LIMIT" ]]; then
  138:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.defaultCPULimit "$DEFAULT_CPU_LIMIT"
  139  fi
  140  if [[ "" != "$DEFAULT_INTERNAL_IMAGE_CONNECTOR" ]]; then
  141:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.defaultInternalImageConnector "$DEFAULT_INTERNAL_IMAGE_CONNECTOR"
  142  fi
  143  if [[ "" != "$PVC_DEFAULT_STORAGE_SIZE" ]]; then
  144:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.pvcDefaultStorageSize "$PVC_DEFAULT_STORAGE_SIZE"
  145  fi
  146  if [[ "" != "$DELEGATE_SERVICE_ENDPOINT_VARIABLE_VALUE" ]]; then
  147:   yq write -i $CONFIG_FILE ciExecutionServiceConfig.delegateServiceEndpointVariableValue "$DELEGATE_SERVICE_ENDPOINT_VARIABLE_VALUE"
  148  fi

  150  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
  151:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
  152  fi

  155    yq delete -i $CONFIG_FILE allowedOrigins
  156:   yq write -i $CONFIG_FILE allowedOrigins "$ALLOWED_ORIGINS"
  157  fi

  159  if [[ "" != "$MONGO_URI" ]]; then
  160:   yq write -i $CONFIG_FILE harness-mongo.uri "${MONGO_URI//\\&/&}"
  161  fi

  163  if [[ "" != "$MANAGER_TARGET" ]]; then
  164:   yq write -i $CONFIG_FILE managerTarget $MANAGER_TARGET
  165  fi

  167  if [[ "" != "$MANAGER_AUTHORITY" ]]; then
  168:   yq write -i $CONFIG_FILE managerAuthority $MANAGER_AUTHORITY
  169  fi

  171  if [[ "" != "$CIMANAGER_MONGO_URI" ]]; then
  172:   yq write -i $CONFIG_FILE cimanager-mongo.uri "$CIMANAGER_MONGO_URI"
  173  fi

  175  if [[ "" != "$SCM_SERVICE_URI" ]]; then
  176:   yq write -i $CONFIG_FILE scmConnectionConfig.url "$SCM_SERVICE_URI"
  177  fi

  179  if [[ "" != "$LOG_SERVICE_ENDPOINT" ]]; then
  180:   yq write -i $CONFIG_FILE logServiceConfig.baseUrl "$LOG_SERVICE_ENDPOINT"
  181  fi

  183  if [[ "" != "$LOG_SERVICE_GLOBAL_TOKEN" ]]; then
  184:   yq write -i $CONFIG_FILE logServiceConfig.globalToken "$LOG_SERVICE_GLOBAL_TOKEN"
  185  fi

  187  if [[ "" != "$TI_SERVICE_ENDPOINT" ]]; then
  188:   yq write -i $CONFIG_FILE tiServiceConfig.baseUrl "$TI_SERVICE_ENDPOINT"
  189  fi

  191  if [[ "" != "$STO_SERVICE_ENDPOINT" ]]; then
  192:   yq write -i $CONFIG_FILE stoServiceConfig.baseUrl "$STO_SERVICE_ENDPOINT"
  193  fi

  195  if [[ "" != "$API_URL" ]]; then
  196:   yq write -i $CONFIG_FILE apiUrl "$API_URL"
  197  fi

  199  if [[ "" != "$PMS_TARGET" ]]; then
  200:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.target $PMS_TARGET
  201  fi

  203  if [[ "" != "$PMS_AUTHORITY" ]]; then
  204:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.authority $PMS_AUTHORITY
  205  fi

  207  if [[ "" != "$SHOULD_CONFIGURE_WITH_PMS" ]]; then
  208:   yq write -i $CONFIG_FILE shouldConfigureWithPMS $SHOULD_CONFIGURE_WITH_PMS
  209  fi

  211  if [[ "" != "$PMS_MONGO_URI" ]]; then
  212:   yq write -i $CONFIG_FILE pmsMongo.uri "${PMS_MONGO_URI//\\&/&}"
  213  fi

  215  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
  216:   yq write -i $CONFIG_FILE pmsSdkGrpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
  217  fi

  219  if [[ "" != "$TI_SERVICE_GLOBAL_TOKEN" ]]; then
  220:   yq write -i $CONFIG_FILE tiServiceConfig.globalToken "$TI_SERVICE_GLOBAL_TOKEN"
  221  fi

  223  if [[ "" != "$STO_SERVICE_GLOBAL_TOKEN" ]]; then
  224:   yq write -i $CONFIG_FILE stoServiceConfig.globalToken "$STO_SERVICE_GLOBAL_TOKEN"
  225  fi

  227  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  228:   yq write -i $CONFIG_FILE ngManagerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  229  fi

  231  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  232:   yq write -i $CONFIG_FILE jwtAuthSecret "$JWT_AUTH_SECRET"
  233  fi

  235  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  236:   yq write -i $CONFIG_FILE jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  237  fi

  239  if [[ "" != "$API_URL" ]]; then
  240:   yq write -i $CONFIG_FILE apiUrl "$API_URL"
  241  fi

  243  if [[ "" != "$TIMESCALE_PASSWORD" ]]; then
  244:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALE_PASSWORD"
  245  fi

  247  if [[ "" != "$TIMESCALE_URI" ]]; then
  248:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALE_URI"
  249  fi

  251  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
  252:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
  253  fi

  255  if [[ "" != "$ENABLE_DASHBOARD_TIMESCALE" ]]; then
  256:   yq write -i $CONFIG_FILE enableDashboardTimescale $ENABLE_DASHBOARD_TIMESCALE
  257  fi

  259  if [[ "" != "$MANAGER_SECRET" ]]; then
  260:   yq write -i $CONFIG_FILE managerServiceSecret "$MANAGER_SECRET"
  261  fi

  263  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  264:   yq write -i $CONFIG_FILE cimanager-mongo.indexManagerMode "$MONGO_INDEX_MANAGER_MODE"
  265  fi

  268    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  269:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  270  else

  283    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  284:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  285      INDEX=$(expr $INDEX + 1)

  291  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  292:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  293  fi

  296  if [[ "" != "$CACHE_CONFIG_REDIS_URL" ]]; then
  297:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$CACHE_CONFIG_REDIS_URL"
  298  fi

  304  if [[ "" != "$CACHE_CONFIG_SENTINEL_MASTER_NAME" ]]; then
  305:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$CACHE_CONFIG_SENTINEL_MASTER_NAME"
  306  fi

  311    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  312:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
  313      INDEX=$(expr $INDEX + 1)

  317  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  318:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  319  fi

harness/harness-core/dockerization/command-library-server/scripts/replace_configs.sh:
  12    if [[ "" != "$CONFIG_VALUE" ]]; then
  13:     yq write -i "$CONFIG_FILE" "$CONFIG_KEY" "$CONFIG_VALUE"
  14    fi

  22  		do
  23: 	   	 	yq write -i /opt/harness/command-library-server-config.yml "$path[+]" "$tag"
  24  		done

  30  if [[ "" != "$LOGGING_LEVEL" ]]; then
  31:   yq write -i /opt/harness/command-library-server-config.yml logging.level "$LOGGING_LEVEL"
  32  fi

  34  if [[ "" != "$COMMAND_LIBRARY_SERVER_PORT" ]]; then
  35:   yq write -i /opt/harness/command-library-server-config.yml server.applicationConnectors[0].port "$COMMAND_LIBRARY_SERVER_PORT"
  36  else
  37:   yq write -i /opt/harness/command-library-server-config.yml server.applicationConnectors[0].port "7070"
  38  fi

  40  if [[ "" != "$MONGO_URI" ]]; then
  41:   yq write -i /opt/harness/command-library-server-config.yml mongo.uri "${MONGO_URI//\\&/&}"
  42  fi
  43  
  44: yq write -i /opt/harness/command-library-server-config.yml server.requestLog.appenders[0].type "console"
  45: yq write -i /opt/harness/command-library-server-config.yml server.requestLog.appenders[0].threshold "TRACE"
  46: yq write -i /opt/harness/command-library-server-config.yml server.requestLog.appenders[0].target "STDOUT"
  47  

  49    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  50:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  51  else

  55  if [[ "" != "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET" ]]; then
  56:   yq write -i /opt/harness/command-library-server-config.yml serviceSecret.managerToCommandLibraryServiceSecret "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET"
  57  fi

harness/harness-core/dockerization/cv-nextgen/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   22  if [[ "" != "$LOGGING_LEVEL" ]]; then
   23:   yq write -i /opt/harness/cv-nextgen-config.yml logging.level "$LOGGING_LEVEL"
   24  fi

   26  if [[ "" != "$VERIFICATION_PORT" ]]; then
   27:   yq write -i /opt/harness/cv-nextgen-config.yml server.applicationConnectors[0].port "$VERIFICATION_PORT"
   28  else
   29:   yq write -i /opt/harness/cv-nextgen-config.yml server.applicationConnectors[0].port "6060"
   30  fi

   32  if [[ "" != "$MONGO_URI" ]]; then
   33:   yq write -i /opt/harness/cv-nextgen-config.yml mongo.uri "${MONGO_URI//\\&/&}"
   34  fi

   36  if [[ "" != "$MANAGER_CLIENT_BASEURL" ]]; then
   37:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl "$MANAGER_CLIENT_BASEURL"
   38  fi

   40  if [[ "" != "$NG_MANAGER_URL" ]]; then
   41:   yq write -i $CONFIG_FILE nextGen.ngManagerUrl "$NG_MANAGER_URL"
   42  fi
   43  
   44:   yq write -i /opt/harness/cv-nextgen-config.yml server.requestLog.appenders[0].type "console"
   45:   yq write -i /opt/harness/cv-nextgen-config.yml server.requestLog.appenders[0].threshold "TRACE"
   46:   yq write -i /opt/harness/cv-nextgen-config.yml server.requestLog.appenders[0].target "STDOUT"
   47  

   49    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
   50:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
   51  else

   55  if [[ "" != "$DATA_STORE" ]]; then
   56:   yq write -i /opt/harness/cv-nextgen-config.yml dataStorageMode "$DATA_STORE"
   57  fi

   59  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
   60:   yq write -i /opt/harness/cv-nextgen-config.yml nextGen.managerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
   61  fi

   63  if [[ "" != "$MANAGER_JWT_AUTH_SECRET" ]]; then
   64:   yq write -i /opt/harness/cv-nextgen-config.yml managerAuthConfig.jwtAuthSecret "$MANAGER_JWT_AUTH_SECRET"
   65  fi

   67  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
   68:   yq write -i /opt/harness/cv-nextgen-config.yml managerAuthConfig.jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
   69  fi

   71  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
   72:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
   73  fi

   75  if [[ "" != "$NG_MANAGER_URL" ]]; then
   76:   yq write -i $CONFIG_FILE nextGen.ngManagerUrl "$NG_MANAGER_URL"
   77  fi

   79  if [[ "" != "$NOTIFICATION_BASE_URL" ]]; then
   80:   yq write -i $CONFIG_FILE notificationClient.httpClient.baseUrl "$NOTIFICATION_BASE_URL"
   81  fi

   83  if [[ "" != "$NOTIFICATION_MONGO_URI" ]]; then
   84:   yq write -i $CONFIG_FILE notificationClient.messageBroker.uri "${NOTIFICATION_MONGO_URI//\\&/&}"
   85  fi

   87  if [[ "" != "$PORTAL_URL" ]]; then
   88:   yq write -i $CONFIG_FILE portalUrl "$PORTAL_URL"
   89  fi

  104    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  105:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  106      INDEX=$(expr $INDEX + 1)

  110  if [[ "" != "$PMS_TARGET" ]]; then
  111:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.target $PMS_TARGET
  112  fi

  114  if [[ "" != "$PMS_AUTHORITY" ]]; then
  115:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.authority $PMS_AUTHORITY
  116  fi

  118  if [[ "" != "$SHOULD_CONFIGURE_WITH_PMS" ]]; then
  119:   yq write -i $CONFIG_FILE shouldConfigureWithPMS $SHOULD_CONFIGURE_WITH_PMS
  120  fi

  122  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
  123:   yq write -i $CONFIG_FILE pmsSdkGrpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
  124  fi

  128  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  129:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  130  fi

  133  if [[ "" != "$CACHE_CONFIG_REDIS_URL" ]]; then
  134:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$CACHE_CONFIG_REDIS_URL"
  135  fi

  141  if [[ "" != "$CACHE_CONFIG_SENTINEL_MASTER_NAME" ]]; then
  142:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$CACHE_CONFIG_SENTINEL_MASTER_NAME"
  143  fi

  148    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  149:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
  150      INDEX=$(expr $INDEX + 1)

  154  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  155:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  156  fi

harness/harness-core/dockerization/debezium-service/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   17  
   18: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   19  
   20  if [[ "" != "$LOGGING_LEVEL" ]]; then
   21:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   22  fi

   28      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   29:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   30    done

   34    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
   35:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
   36  else

   43    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
   44:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
   45      INDEX=$(expr $INDEX + 1)

   51  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
   52:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
   53  fi

   56  if [[ "" != "$CACHE_CONFIG_REDIS_URL" ]]; then
   57:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$CACHE_CONFIG_REDIS_URL"
   58  fi

   64  if [[ "" != "$CACHE_CONFIG_SENTINEL_MASTER_NAME" ]]; then
   65:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$CACHE_CONFIG_SENTINEL_MASTER_NAME"
   66  fi

   71    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
   72:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
   73      INDEX=$(expr $INDEX + 1)

   77  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
   78:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
   79  fi

  102    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  103:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  104      INDEX=$(expr $INDEX + 1)

harness/harness-core/dockerization/delegate-service-app/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   22  
   23: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   24  
   25  if [[ "" != "$LOGGING_LEVEL" ]]; then
   26:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   27  fi

   33      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   34:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   35    done

   38  if [[ "" != "$SERVER_PORT" ]]; then
   39:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
   40  else
   41:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "9080"
   42  fi

   44  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
   45:   yq write -i $CONFIG_FILE grpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
   46  fi

   48  if [[ "" != "$GRPC_SERVER_CLASSIC_PORT" ]]; then
   49:   yq write -i $CONFIG_FILE grpcServerClassicConfig.connectors[0].port "$GRPC_SERVER_CLASSIC_PORT"
   50  fi

   52  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
   53:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
   54  fi

   56  if [[ "" != "$UI_SERVER_URL" ]]; then
   57:   yq write -i $CONFIG_FILE portal.url "$UI_SERVER_URL"
   58  fi

   60  if [[ "" != "$AUTHTOKENEXPIRYINMILLIS" ]]; then
   61:   yq write -i $CONFIG_FILE portal.authTokenExpiryInMillis "$AUTHTOKENEXPIRYINMILLIS"
   62  fi

   64  if [[ "" != "$EXTERNAL_GRAPHQL_RATE_LIMIT" ]]; then
   65:   yq write -i $CONFIG_FILE portal.externalGraphQLRateLimitPerMinute "$EXTERNAL_GRAPHQL_RATE_LIMIT"
   66  fi

   68  if [[ "" != "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT" ]]; then
   69:   yq write -i $CONFIG_FILE portal.customDashGraphQLRateLimitPerMinute "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT"
   70  fi

   72  if [[ "" != "$ALLOWED_ORIGINS" ]]; then
   73:   yq write -i $CONFIG_FILE portal.allowedOrigins "$ALLOWED_ORIGINS"
   74  fi

   76  if [[ "" != "$STORE_REQUEST_PAYLOAD" ]]; then
   77:   yq write -i $CONFIG_FILE auditConfig.storeRequestPayload "$STORE_REQUEST_PAYLOAD"
   78  fi

   80  if [[ "" != "$STORE_RESPONSE_PAYLOAD" ]]; then
   81:   yq write -i $CONFIG_FILE auditConfig.storeResponsePayload "$STORE_RESPONSE_PAYLOAD"
   82  fi

   84  if [[ "" != "$MONGO_URI" ]]; then
   85:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   86  fi

   88  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   89:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   90  fi

   92  if [[ "" != "$MONGO_SSL_CONFIG" ]]; then
   93:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoSSLEnabled "$MONGO_SSL_CONFIG"
   94  fi

   96  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PATH" ]]; then
   97:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoTrustStorePath "$MONGO_SSL_CA_TRUST_STORE_PATH"
   98  fi

  100  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PASSWORD" ]]; then
  101:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoTrustStorePassword "$MONGO_SSL_CA_TRUST_STORE_PASSWORD"
  102  fi

  104  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
  105:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
  106  fi

  108  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
  109:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
  110  fi

  112  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
  113:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
  114  fi

  116  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
  117:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
  118  fi

  120  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  121:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  122  fi

  124  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
  125:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
  126  fi

  128  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
  129:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
  130  else

  134  if [[ "" != "$CF_CLIENT_API_KEY" ]]; then
  135:   yq write -i $CONFIG_FILE cfClientConfig.apiKey "$CF_CLIENT_API_KEY"
  136  fi

  138  if [[ "" != "$CF_CLIENT_CONFIG_URL" ]]; then
  139:   yq write -i $CONFIG_FILE cfClientConfig.configUrl "$CF_CLIENT_CONFIG_URL"
  140  fi

  142  if [[ "" != "$CF_CLIENT_EVENT_URL" ]]; then
  143:   yq write -i $CONFIG_FILE cfClientConfig.eventUrl "$CF_CLIENT_EVENT_URL"
  144  fi

  146  if [[ "" != "$CF_CLIENT_ANALYTICS_ENABLED" ]]; then
  147:   yq write -i $CONFIG_FILE cfClientConfig.analyticsEnabled "$CF_CLIENT_ANALYTICS_ENABLED"
  148  fi

  150  if [[ "" != "$CF_CLIENT_CONNECTION_TIMEOUT" ]]; then
  151:   yq write -i $CONFIG_FILE cfClientConfig.connectionTimeout "$CF_CLIENT_CONNECTION_TIMEOUT"
  152  fi

  154  if [[ "" != "$CF_CLIENT_READ_TIMEOUT" ]]; then
  155:   yq write -i $CONFIG_FILE cfClientConfig.readTimeout "$CF_CLIENT_READ_TIMEOUT"
  156  fi

  158  if [[ "" != "$CF_MIGRATION_ENABLED" ]]; then
  159:   yq write -i $CONFIG_FILE cfMigrationConfig.enabled "$CF_MIGRATION_ENABLED"
  160  fi

  162  if [[ "" != "$CF_MIGRATION_ADMIN_URL" ]]; then
  163:   yq write -i $CONFIG_FILE cfMigrationConfig.adminUrl "$CF_MIGRATION_ADMIN_URL"
  164  fi

  166  if [[ "" != "$CF_MIGRATION_API_KEY" ]]; then
  167:   yq write -i $CONFIG_FILE cfMigrationConfig.apiKey "$CF_MIGRATION_API_KEY"
  168  fi

  170  if [[ "" != "$CF_MIGRATION_ACCOUNT" ]]; then
  171:   yq write -i $CONFIG_FILE cfMigrationConfig.account "$CF_MIGRATION_ACCOUNT"
  172  fi

  174  if [[ "" != "$CF_MIGRATION_ORG" ]]; then
  175:   yq write -i $CONFIG_FILE cfMigrationConfig.org "$CF_MIGRATION_ORG"
  176  fi

  178  if [[ "" != "$CF_MIGRATION_PROJECT" ]]; then
  179:   yq write -i $CONFIG_FILE cfMigrationConfig.project "$CF_MIGRATION_PROJECT"
  180  fi

  182  if [[ "" != "$CF_MIGRATION_ENVIRONMENT" ]]; then
  183:   yq write -i $CONFIG_FILE cfMigrationConfig.environment "$CF_MIGRATION_ENVIRONMENT"
  184  fi

  190  if [[ "" != "$MONGO_LOCK_URI" ]]; then
  191:   yq write -i $CONFIG_FILE mongo.locksUri "${MONGO_LOCK_URI//\\&/&}"
  192  fi
  193  
  194: yq write -i $CONFIG_FILE server.requestLog.appenders[0].threshold "TRACE"
  195  

  198    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  199:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  200  else

  202      yq delete -i $CONFIG_FILE 'logging.appenders.(type==gke-console)'
  203:     yq write -i $CONFIG_FILE 'logging.appenders.(type==file).currentLogFilename' "/opt/harness/logs/delegate-service.log"
  204:     yq write -i $CONFIG_FILE 'logging.appenders.(type==file).archivedLogFilenamePattern' "/opt/harness/logs/delegate-service.%d.%i.log"
  205    else

  211  if [[ "" != "$WATCHER_METADATA_URL" ]]; then
  212:   yq write -i $CONFIG_FILE watcherMetadataUrl "$WATCHER_METADATA_URL"
  213  fi

  215  if [[ "" != "$DELEGATE_METADATA_URL" ]]; then
  216:   yq write -i $CONFIG_FILE delegateMetadataUrl "$DELEGATE_METADATA_URL"
  217  fi

  219  if [[ "" != "$API_URL" ]]; then
  220:   yq write -i $CONFIG_FILE apiUrl "$API_URL"
  221  fi

  223  if [[ "" != "$ENV_PATH" ]]; then
  224:   yq write -i $CONFIG_FILE envPath "$ENV_PATH"
  225  fi

  227  if [[ "" != "$DEPLOY_MODE" ]]; then
  228:   yq write -i $CONFIG_FILE deployMode "$DEPLOY_MODE"
  229  fi

  232  if [[ "" != "$jwtPasswordSecret" ]]; then
  233:   yq write -i $CONFIG_FILE portal.jwtPasswordSecret "$jwtPasswordSecret"
  234  fi

  236  if [[ "" != "$jwtExternalServiceSecret" ]]; then
  237:   yq write -i $CONFIG_FILE portal.jwtExternalServiceSecret "$jwtExternalServiceSecret"
  238  fi

  240  if [[ "" != "$jwtZendeskSecret" ]]; then
  241:   yq write -i $CONFIG_FILE portal.jwtZendeskSecret "$jwtZendeskSecret"
  242  fi

  244  if [[ "" != "$jwtMultiAuthSecret" ]]; then
  245:   yq write -i $CONFIG_FILE portal.jwtMultiAuthSecret "$jwtMultiAuthSecret"
  246  fi

  248  if [[ "" != "$jwtSsoRedirectSecret" ]]; then
  249:   yq write -i $CONFIG_FILE portal.jwtSsoRedirectSecret "$jwtSsoRedirectSecret"
  250  fi

  252  if [[ "" != "$jwtAuthSecret" ]]; then
  253:   yq write -i $CONFIG_FILE portal.jwtAuthSecret "$jwtAuthSecret"
  254  fi

  256  if [[ "" != "$jwtMarketPlaceSecret" ]]; then
  257:   yq write -i $CONFIG_FILE portal.jwtMarketPlaceSecret "$jwtMarketPlaceSecret"
  258  fi

  260  if [[ "" != "$jwtIdentityServiceSecret" ]]; then
  261:   yq write -i $CONFIG_FILE portal.jwtIdentityServiceSecret "$jwtIdentityServiceSecret"
  262  fi

  264  if [[ "" != "$jwtDataHandlerSecret" ]]; then
  265:   yq write -i $CONFIG_FILE portal.jwtDataHandlerSecret "$jwtDataHandlerSecret"
  266  fi

  268  if [[ "" != "$jwtNextGenManagerSecret" ]]; then
  269:   yq write -i $CONFIG_FILE portal.jwtNextGenManagerSecret "$jwtNextGenManagerSecret"
  270  fi

  272  if [[ "" != "$DELEGATE_DOCKER_IMAGE" ]]; then
  273:   yq write -i $CONFIG_FILE portal.delegateDockerImage "$DELEGATE_DOCKER_IMAGE"
  274  fi

  276  if [[ "" != "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT" ]]; then
  277:   yq write -i $CONFIG_FILE portal.optionalDelegateTaskRejectAtLimit "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT"
  278  fi

  280  if [[ "" != "$BACKGROUND_SCHEDULER_CLUSTERED" ]]; then
  281:   yq write -i $CONFIG_FILE backgroundScheduler.clustered "$BACKGROUND_SCHEDULER_CLUSTERED"
  282  fi

  284  if [[ "" != "$ENABLE_CRONS" ]]; then
  285:   yq write -i $CONFIG_FILE enableIterators "$ENABLE_CRONS"
  286:   yq write -i $CONFIG_FILE backgroundScheduler.enabled "$ENABLE_CRONS"
  287:   yq write -i $CONFIG_FILE serviceScheduler.enabled "$ENABLE_CRONS"
  288  fi

  294      WORKER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
  295:     yq write -i $CONFIG_FILE workers.active.[$WORKER] "${WORKER_FLAG}"
  296    done

  303      PUBLISHER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
  304:     yq write -i $CONFIG_FILE publishers.active.[$PUBLISHER] "${PUBLISHER_FLAG}"
  305    done

  308  if [[ "" != "$DISTRIBUTED_LOCK_IMPLEMENTATION" ]]; then
  309:   yq write -i $CONFIG_FILE distributedLockImplementation "$DISTRIBUTED_LOCK_IMPLEMENTATION"
  310  fi

  312  if [[ "" != "$ATMOSPHERE_BACKEND" ]]; then
  313:   yq write -i $CONFIG_FILE atmosphereBroadcaster "$ATMOSPHERE_BACKEND"
  314  fi

  318  if [[ "" != "$REDIS_URL" ]]; then
  319:   yq write -i $CONFIG_FILE redisLockConfig.redisUrl "$REDIS_URL"
  320:   yq write -i $CONFIG_FILE redisAtmosphereConfig.redisUrl "$REDIS_URL"
  321:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$REDIS_URL"
  322  fi

  324  if [[ "$REDIS_SENTINEL" == "true" ]]; then
  325:   yq write -i $CONFIG_FILE redisLockConfig.sentinel true
  326:   yq write -i $CONFIG_FILE redisAtmosphereConfig.sentinel true
  327    yq delete -i $REDISSON_CACHE_FILE singleServerConfig

  330  if [[ "" != "$REDIS_MASTER_NAME" ]]; then
  331:   yq write -i $CONFIG_FILE redisLockConfig.masterName "$REDIS_MASTER_NAME"
  332:   yq write -i $CONFIG_FILE redisAtmosphereConfig.masterName "$REDIS_MASTER_NAME"
  333:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$REDIS_MASTER_NAME"
  334  fi

  339    for REDIS_SENTINEL_URL in "${REDIS_SENTINEL_URLS[@]}"; do
  340:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  341:     yq write -i $CONFIG_FILE redisAtmosphereConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  342:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
  343      INDEX=$(expr $INDEX + 1)

  347  if [[ "" != "$REDIS_ENV_NAMESPACE" ]]; then
  348:     yq write -i $CONFIG_FILE redisLockConfig.envNamespace "$REDIS_ENV_NAMESPACE"
  349:     yq write -i $CONFIG_FILE redisAtmosphereConfig.envNamespace "$REDIS_ENV_NAMESPACE"
  350  fi

  352  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  353:   yq write -i $CONFIG_FILE redisLockConfig.nettyThreads "$REDIS_NETTY_THREADS"
  354:   yq write -i $CONFIG_FILE redisAtmosphereConfig.nettyThreads "$REDIS_NETTY_THREADS"
  355:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  356  fi

  358  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  359:   yq write -i $CONFIG_FILE redisLockConfig.useScriptCache false
  360:   yq write -i $CONFIG_FILE redisAtmosphereConfig.useScriptCache false
  361:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  362  fi

  364  if [[ "" != "$CACHE_NAMESPACE" ]]; then
  365:     yq write -i $CONFIG_FILE cacheConfig.cacheNamespace "$CACHE_NAMESPACE"
  366  fi

  368  if [[ "" != "$CACHE_BACKEND" ]]; then
  369:     yq write -i $CONFIG_FILE cacheConfig.cacheBackend "$CACHE_BACKEND"
  370  fi

  372  if [[ "" != "$DELEGATE_SERVICE_TARGET" ]]; then
  373:   yq write -i $CONFIG_FILE grpcDelegateServiceClientConfig.target "$DELEGATE_SERVICE_TARGET"
  374  fi

  376  if [[ "" != "$DELEGATE_SERVICE_AUTHORITY" ]]; then
  377:   yq write -i $CONFIG_FILE grpcDelegateServiceClientConfig.authority "$DELEGATE_SERVICE_AUTHORITY"
  378  fi

  380  if [[ "" != "$LOG_STREAMING_SERVICE_BASEURL" ]]; then
  381:   yq write -i $CONFIG_FILE logStreamingServiceConfig.baseUrl "$LOG_STREAMING_SERVICE_BASEURL"
  382  fi

  384  if [[ "" != "$LOG_STREAMING_SERVICE_TOKEN" ]]; then
  385:   yq write -i $CONFIG_FILE logStreamingServiceConfig.serviceToken "$LOG_STREAMING_SERVICE_TOKEN"
  386  fi

  388  if [[ "" != "$ACCESS_CONTROL_ENABLED" ]]; then
  389:   yq write -i $CONFIG_FILE accessControlClient.enableAccessControl $ACCESS_CONTROL_ENABLED
  390  fi

  392  if [[ "" != "$ACCESS_CONTROL_BASE_URL" ]]; then
  393:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceConfig.baseUrl $ACCESS_CONTROL_BASE_URL
  394  fi

  396  if [[ "" != "$ACCESS_CONTROL_SECRET" ]]; then
  397:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceSecret $ACCESS_CONTROL_SECRET
  398  fi

  400  if [[ "" != "$ENABLE_AUDIT" ]]; then
  401:   yq write -i $CONFIG_FILE enableAudit $ENABLE_AUDIT
  402  fi

  407    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  408:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  409      INDEX=$(expr $INDEX + 1)

  423  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
  424:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl "$NG_MANAGER_BASE_URL"
  425  fi

  427  if [[ "" != "$ENABLE_USER_CHANGESTREAM" ]]; then
  428:   yq write -i $CONFIG_FILE userChangeStreamEnabled "$ENABLE_USER_CHANGESTREAM"
  429  fi

  431  if [[ "" != "$DELEGATE_SERVICE_SECRET" ]]; then
  432:   yq write -i $CONFIG_FILE dmsSecret $DELEGATE_SERVICE_SECRET
  433  fi

  435  if [[ "" != "$CDN_URL" ]]; then
  436:   yq write -i $CONFIG_FILE cdnConfig.url "$CDN_URL"
  437  fi

  439  if [[ "" != "$CDN_KEY" ]]; then
  440:   yq write -i $CONFIG_FILE cdnConfig.keyName "$CDN_KEY"
  441  fi

  443  if [[ "" != "$CDN_KEY_SECRET" ]]; then
  444:   yq write -i $CONFIG_FILE cdnConfig.keySecret "$CDN_KEY_SECRET"
  445  fi

  447  if [[ "" != "$CDN_DELEGATE_JAR_PATH" ]]; then
  448:   yq write -i $CONFIG_FILE cdnConfig.delegateJarPath "$CDN_DELEGATE_JAR_PATH"
  449  fi

  451  if [[ "" != "$CDN_WATCHER_JAR_BASE_PATH" ]]; then
  452:   yq write -i $CONFIG_FILE cdnConfig.watcherJarBasePath "$CDN_WATCHER_JAR_BASE_PATH"
  453  fi

  455  if [[ "" != "$CDN_WATCHER_JAR_PATH" ]]; then
  456:   yq write -i $CONFIG_FILE cdnConfig.watcherJarPath "$CDN_WATCHER_JAR_PATH"
  457  fi

  459  if [[ "" != "$CDN_WATCHER_METADATA_FILE_PATH" ]]; then
  460:   yq write -i $CONFIG_FILE cdnConfig.watcherMetaDataFilePath "$CDN_WATCHER_METADATA_FILE_PATH"
  461  fi

  463  if [[ "" != "$CDN_ORACLE_JRE_TAR_PATH" ]]; then
  464:   yq write -i $CONFIG_FILE cdnConfig.cdnJreTarPaths.oracle8u191 "$CDN_ORACLE_JRE_TAR_PATH"
  465  fi

  467  if [[ "" != "$CDN_OPENJDK_JRE_TAR_PATH" ]]; then
  468:   yq write -i $CONFIG_FILE cdnConfig.cdnJreTarPaths.openjdk8u242 "$CDN_OPENJDK_JRE_TAR_PATH"
  469  fi

  471  if [[ "" != "$CURRENT_JRE" ]]; then
  472:   yq write -i $CONFIG_FILE currentJre "$CURRENT_JRE"
  473  fi

  475  if [[ "" != "$MIGRATE_TO_JRE" ]]; then
  476:   yq write -i $CONFIG_FILE migrateToJre "$MIGRATE_TO_JRE"
  477  fi

  479  if [[ "" != "$ORACLE_JRE_TAR_PATH" ]]; then
  480:   yq write -i $CONFIG_FILE jreConfigs.oracle8u191.jreTarPath "$ORACLE_JRE_TAR_PATH"
  481  fi

  483  if [[ "" != "$OPENJDK_JRE_TAR_PATH" ]]; then
  484:   yq write -i $CONFIG_FILE jreConfigs.openjdk8u242.jreTarPath "$OPENJDK_JRE_TAR_PATH"
  485  fi

  487  if [[ "" != "$FILE_STORAGE" ]]; then
  488:   yq write -i $CONFIG_FILE fileStorageMode "$FILE_STORAGE"
  489  fi

  491  if [[ "" != "$CLUSTER_NAME" ]]; then
  492:   yq write -i $CONFIG_FILE clusterName "$CLUSTER_NAME"
  493  fi

  495  if [[ "" != "$DELEGATE_MTLS_SUBDOMAIN" ]]; then
  496:   yq write -i $CONFIG_FILE delegateMtlsSubdomain "$DELEGATE_MTLS_SUBDOMAIN"
  497  fi

harness/harness-core/dockerization/event-server/scripts/replace_configs.sh:
  14  
  15:     yq write -i $CONFIG_FILE $1.hosts[$INDEX].host "$HOST"
  16      if [[ "" != "$PORT" ]]; then
  17:       yq write -i $CONFIG_FILE $1.hosts[$INDEX].port "$PORT"
  18      fi

  26      VALUE=$(cut -d= -f 2 <<< "$PARAM_PAIR")
  27:     yq write -i $CONFIG_FILE $1.params.$NAME "$VALUE"
  28    done

  34  if [[ "" != "$MONGO_URI" ]]; then
  35:   yq write -i $CONFIG_FILE harness-mongo.uri "$MONGO_URI"
  36  fi

  39    yq delete -i $CONFIG_FILE harness-mongo.uri
  40:   yq write -i $CONFIG_FILE harness-mongo.username "$MONGO_USERNAME"
  41:   yq write -i $CONFIG_FILE harness-mongo.password "$MONGO_PASSWORD"
  42:   yq write -i $CONFIG_FILE harness-mongo.database "$MONGO_DATABASE"
  43:   yq write -i $CONFIG_FILE harness-mongo.schema "$MONGO_SCHEMA"
  44    write_mongo_hosts_and_ports harness-mongo "$MONGO_HOSTS_AND_PORTS"

  48  if [[ "" != "$MONGO_READ_PREF_NAME" ]]; then
  49:   yq write -i $CONFIG_FILE harness-mongo.readPref.name "$MONGO_READ_PREF_NAME"
  50  fi

  56      TAG_VALUE=$(echo $ITEM | awk -F= '{print $2}')
  57:     yq write -i $CONFIG_FILE "harness-mongo.readPref.tagSet.[$TAG_NAME]" "$TAG_VALUE"
  58    done

  61  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  62:   yq write -i $CONFIG_FILE harness-mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  63  fi

  65  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
  66:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
  67  fi

  69  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
  70:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
  71  fi

  74    yq delete -i $CONFIG_FILE events-mongo.uri
  75:   yq write -i $CONFIG_FILE events-mongo.username "$EVENTS_MONGO_USERNAME"
  76:   yq write -i $CONFIG_FILE events-mongo.password "$EVENTS_MONGO_PASSWORD"
  77:   yq write -i $CONFIG_FILE events-mongo.database "$EVENTS_MONGO_DATABASE"
  78:   yq write -i $CONFIG_FILE events-mongo.schema "$EVENTS_MONGO_SCHEMA"
  79    write_mongo_hosts_and_ports events-mongo "$EVENTS_MONGO_HOSTS_AND_PORTS"

  83  if [[ "" != "$GCP_SECRET_MANAGER_PROJECT" ]]; then
  84:   yq write -i $CONFIG_FILE secretsConfiguration.gcpSecretManagerProject "$GCP_SECRET_MANAGER_PROJECT"
  85  fi

  87  if [[ "" != "$RESOLVE_SECRETS" ]]; then
  88:   yq write -i $CONFIG_FILE secretsConfiguration.secretResolutionEnabled "$RESOLVE_SECRETS"
  89  fi

harness/harness-core/dockerization/eventsapi-monitor/scripts/replace_configs.sh:
  12    if [[ "" != "$CONFIG_VALUE" ]]; then
  13:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
  14    fi

  17  if [[ "" != "$LOGGING_LEVEL" ]]; then
  18:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
  19  fi

  25      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
  26:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
  27    done

  31    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  32:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  33  else

  40    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  41:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  42      INDEX=$(expr $INDEX + 1)

harness/harness-core/dockerization/manager/scripts/replace_configs.sh:
    14    if [[ "" != "$CONFIG_VALUE" ]]; then
    15:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
    16    fi

    24  
    25:     yq write -i $CONFIG_FILE $1.hosts[$INDEX].host "$HOST"
    26      if [[ "" != "$PORT" ]]; then
    27:       yq write -i $CONFIG_FILE $1.hosts[$INDEX].port "$PORT"
    28      fi

    36      VALUE=$(cut -d= -f 2 <<< "$PARAM_PAIR")
    37:     yq write -i $CONFIG_FILE $1.params.$NAME "$VALUE"
    38    done

    43  
    44: yq write -i $CONFIG_FILE server.adminConnectors "[]"
    45  
    46  if [[ "" != "$LOGGING_LEVEL" ]]; then
    47:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
    48  fi

    54      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
    55:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
    56    done

    59  if [[ "" != "$SERVER_PORT" ]]; then
    60:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
    61  else
    62:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "9090"
    63  fi

    65  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
    66:   yq write -i $CONFIG_FILE grpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
    67  fi

    69  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
    70:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
    71  fi

    73  if [[ "" != "$UI_SERVER_URL" ]]; then
    74:   yq write -i $CONFIG_FILE portal.url "$UI_SERVER_URL"
    75  fi

    77  if [[ "" != "$AUTHTOKENEXPIRYINMILLIS" ]]; then
    78:   yq write -i $CONFIG_FILE portal.authTokenExpiryInMillis "$AUTHTOKENEXPIRYINMILLIS"
    79  fi

    81  if [[ "" != "$EXTERNAL_GRAPHQL_RATE_LIMIT" ]]; then
    82:   yq write -i $CONFIG_FILE portal.externalGraphQLRateLimitPerMinute "$EXTERNAL_GRAPHQL_RATE_LIMIT"
    83  fi

    85  if [[ "" != "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT" ]]; then
    86:   yq write -i $CONFIG_FILE portal.customDashGraphQLRateLimitPerMinute "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT"
    87  fi

    89  if [[ "" != "$ALLOWED_ORIGINS" ]]; then
    90:   yq write -i $CONFIG_FILE portal.allowedOrigins "$ALLOWED_ORIGINS"
    91  fi

    93  if [[ "" != "$STORE_REQUEST_PAYLOAD" ]]; then
    94:   yq write -i $CONFIG_FILE auditConfig.storeRequestPayload "$STORE_REQUEST_PAYLOAD"
    95  fi

    97  if [[ "" != "$STORE_RESPONSE_PAYLOAD" ]]; then
    98:   yq write -i $CONFIG_FILE auditConfig.storeResponsePayload "$STORE_RESPONSE_PAYLOAD"
    99  fi

   101  if [[ "" != "$MONGO_URI" ]]; then
   102:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   103  fi

   106    yq delete -i $CONFIG_FILE mongo.uri
   107:   yq write -i $CONFIG_FILE mongo.username "$MONGO_USERNAME"
   108:   yq write -i $CONFIG_FILE mongo.password "$MONGO_PASSWORD"
   109:   yq write -i $CONFIG_FILE mongo.database "$MONGO_DATABASE"
   110:   yq write -i $CONFIG_FILE mongo.schema "$MONGO_SCHEMA"
   111    write_mongo_hosts_and_ports mongo "$MONGO_HOSTS_AND_PORTS"

   115  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   116:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   117  fi

   119  if [[ "" != "$MONGO_SSL_CONFIG" ]]; then
   120:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoSSLEnabled "$MONGO_SSL_CONFIG"
   121  fi

   123  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PATH" ]]; then
   124:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoTrustStorePath "$MONGO_SSL_CA_TRUST_STORE_PATH"
   125  fi

   127  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PASSWORD" ]]; then
   128:   yq write -i $CONFIG_FILE mongo.mongoSSLConfig.mongoTrustStorePassword "$MONGO_SSL_CA_TRUST_STORE_PASSWORD"
   129  fi

   131  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
   132:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
   133  fi

   135  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
   136:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
   137  fi

   139  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
   140:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
   141  fi

   143  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
   144:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
   145  fi

   147  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
   148:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
   149  fi

   151  if [[ "" != "$ANALYTIC_MONGO_TAG_NAME" ]]; then
   152:  yq write -i $CONFIG_FILE mongo.analyticNodeConfig.mongoTagKey "$ANALYTIC_MONGO_TAG_NAME"
   153  fi

   155  if [[ "" != "$ANALYTIC_MONGO_TAG_VALUE" ]]; then
   156:  yq write -i $CONFIG_FILE mongo.analyticNodeConfig.mongoTagValue "$ANALYTIC_MONGO_TAG_VALUE"
   157  fi

   159  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
   160:   yq write -i $CONFIG_FILE events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
   161  fi

   163  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
   164:   yq write -i $CONFIG_FILE events-mongo.uri "$EVENTS_MONGO_URI"
   165  else

   167      yq delete -i $CONFIG_FILE events-mongo.uri
   168:     yq write -i $CONFIG_FILE events-mongo.username "$EVENTS_MONGO_USERNAME"
   169:     yq write -i $CONFIG_FILE events-mongo.password "$EVENTS_MONGO_PASSWORD"
   170:     yq write -i $CONFIG_FILE events-mongo.database "$EVENTS_MONGO_DATABASE"
   171:     yq write -i $CONFIG_FILE events-mongo.schema "$EVENTS_MONGO_SCHEMA"
   172      write_mongo_hosts_and_ports events-mongo "$EVENTS_MONGO_HOSTS_AND_PORTS"

   179  if [[ "" != "$CF_CLIENT_API_KEY" ]]; then
   180:   yq write -i $CONFIG_FILE cfClientConfig.apiKey "$CF_CLIENT_API_KEY"
   181  fi

   183  if [[ "" != "$CF_CLIENT_CONFIG_URL" ]]; then
   184:   yq write -i $CONFIG_FILE cfClientConfig.configUrl "$CF_CLIENT_CONFIG_URL"
   185  fi

   187  if [[ "" != "$CF_CLIENT_EVENT_URL" ]]; then
   188:   yq write -i $CONFIG_FILE cfClientConfig.eventUrl "$CF_CLIENT_EVENT_URL"
   189  fi

   191  if [[ "" != "$CF_CLIENT_ANALYTICS_ENABLED" ]]; then
   192:   yq write -i $CONFIG_FILE cfClientConfig.analyticsEnabled "$CF_CLIENT_ANALYTICS_ENABLED"
   193  fi

   195  if [[ "" != "$CF_CLIENT_CONNECTION_TIMEOUT" ]]; then
   196:   yq write -i $CONFIG_FILE cfClientConfig.connectionTimeout "$CF_CLIENT_CONNECTION_TIMEOUT"
   197  fi

   199  if [[ "" != "$CF_CLIENT_READ_TIMEOUT" ]]; then
   200:   yq write -i $CONFIG_FILE cfClientConfig.readTimeout "$CF_CLIENT_READ_TIMEOUT"
   201  fi

   203  if [[ "" != "$CF_MIGRATION_ENABLED" ]]; then
   204:   yq write -i $CONFIG_FILE cfMigrationConfig.enabled "$CF_MIGRATION_ENABLED"
   205  fi

   207  if [[ "" != "$CF_MIGRATION_ADMIN_URL" ]]; then
   208:   yq write -i $CONFIG_FILE cfMigrationConfig.adminUrl "$CF_MIGRATION_ADMIN_URL"
   209  fi

   211  if [[ "" != "$CF_MIGRATION_API_KEY" ]]; then
   212:   yq write -i $CONFIG_FILE cfMigrationConfig.apiKey "$CF_MIGRATION_API_KEY"
   213  fi

   215  if [[ "" != "$CF_MIGRATION_ACCOUNT" ]]; then
   216:   yq write -i $CONFIG_FILE cfMigrationConfig.account "$CF_MIGRATION_ACCOUNT"
   217  fi

   219  if [[ "" != "$CF_MIGRATION_ORG" ]]; then
   220:   yq write -i $CONFIG_FILE cfMigrationConfig.org "$CF_MIGRATION_ORG"
   221  fi

   223  if [[ "" != "$CF_MIGRATION_PROJECT" ]]; then
   224:   yq write -i $CONFIG_FILE cfMigrationConfig.project "$CF_MIGRATION_PROJECT"
   225  fi

   227  if [[ "" != "$CF_MIGRATION_ENVIRONMENT" ]]; then
   228:   yq write -i $CONFIG_FILE cfMigrationConfig.environment "$CF_MIGRATION_ENVIRONMENT"
   229  fi

   235  if [[ "" != "$ELASTICSEARCH_URI" ]]; then
   236:   yq write -i $CONFIG_FILE elasticsearch.uri "$ELASTICSEARCH_URI"
   237  fi

   239  if [[ "" != "$ELASTICSEARCH_INDEX_SUFFIX" ]]; then
   240:   yq write -i $CONFIG_FILE elasticsearch.indexSuffix "$ELASTICSEARCH_INDEX_SUFFIX"
   241  fi

   243  if [[ "" != "$ELASTICSEARCH_MONGO_TAG_NAME" ]]; then
   244:  yq write -i $CONFIG_FILE elasticsearch.mongoTagKey "$ELASTICSEARCH_MONGO_TAG_NAME"
   245  fi

   247  if [[ "" != "$ELASTICSEARCH_MONGO_TAG_VALUE" ]]; then
   248:  yq write -i $CONFIG_FILE elasticsearch.mongoTagValue "$ELASTICSEARCH_MONGO_TAG_VALUE"
   249  fi

   251  if [[ "" != "$MONGO_LOCK_URI" ]]; then
   252:   yq write -i $CONFIG_FILE mongo.locksUri "${MONGO_LOCK_URI//\\&/&}"
   253  fi
   254  
   255: yq write -i $CONFIG_FILE server.requestLog.appenders[0].threshold "TRACE"
   256  

   259    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
   260:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
   261  else

   263      yq delete -i $CONFIG_FILE 'logging.appenders.(type==gke-console)'
   264:     yq write -i $CONFIG_FILE 'logging.appenders.(type==file).currentLogFilename' "/opt/harness/logs/portal.log"
   265:     yq write -i $CONFIG_FILE 'logging.appenders.(type==file).archivedLogFilenamePattern' "/opt/harness/logs/portal.%d.%i.log"
   266    else

   272  if [[ "" != "$WATCHER_METADATA_URL" ]]; then
   273:   yq write -i $CONFIG_FILE watcherMetadataUrl "$WATCHER_METADATA_URL"
   274  fi

   276  if [[ "" != "$DELEGATE_METADATA_URL" ]]; then
   277:   yq write -i $CONFIG_FILE delegateMetadataUrl "$DELEGATE_METADATA_URL"
   278  fi

   280  if [[ "" != "$API_URL" ]]; then
   281:   yq write -i $CONFIG_FILE apiUrl "$API_URL"
   282  fi

   284  if [[ "" != "$ENV_PATH" ]]; then
   285:   yq write -i $CONFIG_FILE envPath "$ENV_PATH"
   286  fi

   288  if [[ "" != "$DEPLOY_MODE" ]]; then
   289:   yq write -i $CONFIG_FILE deployMode "$DEPLOY_MODE"
   290  fi
   291  
   292: yq write -i $NEWRELIC_FILE common.license_key "$NEWRELIC_LICENSE_KEY"
   293  
   294  if [[ "$DISABLE_NEW_RELIC" == "true" ]]; then
   295:   yq write -i $NEWRELIC_FILE common.agent_enabled false
   296  fi

   298  if [[ "" != "$jwtPasswordSecret" ]]; then
   299:   yq write -i $CONFIG_FILE portal.jwtPasswordSecret "$jwtPasswordSecret"
   300  fi

   302  if [[ "" != "$jwtExternalServiceSecret" ]]; then
   303:   yq write -i $CONFIG_FILE portal.jwtExternalServiceSecret "$jwtExternalServiceSecret"
   304  fi

   306  if [[ "" != "$jwtZendeskSecret" ]]; then
   307:   yq write -i $CONFIG_FILE portal.jwtZendeskSecret "$jwtZendeskSecret"
   308  fi

   310  if [[ "" != "$jwtMultiAuthSecret" ]]; then
   311:   yq write -i $CONFIG_FILE portal.jwtMultiAuthSecret "$jwtMultiAuthSecret"
   312  fi

   314  if [[ "" != "$jwtSsoRedirectSecret" ]]; then
   315:   yq write -i $CONFIG_FILE portal.jwtSsoRedirectSecret "$jwtSsoRedirectSecret"
   316  fi

   318  if [[ "" != "$jwtAuthSecret" ]]; then
   319:   yq write -i $CONFIG_FILE portal.jwtAuthSecret "$jwtAuthSecret"
   320  fi

   322  if [[ "" != "$jwtMarketPlaceSecret" ]]; then
   323:   yq write -i $CONFIG_FILE portal.jwtMarketPlaceSecret "$jwtMarketPlaceSecret"
   324  fi

   326  if [[ "" != "$jwtIdentityServiceSecret" ]]; then
   327:   yq write -i $CONFIG_FILE portal.jwtIdentityServiceSecret "$jwtIdentityServiceSecret"
   328  fi

   330  if [[ "" != "$jwtDataHandlerSecret" ]]; then
   331:   yq write -i $CONFIG_FILE portal.jwtDataHandlerSecret "$jwtDataHandlerSecret"
   332  fi

   334  if [[ "" != "$jwtNextGenManagerSecret" ]]; then
   335:   yq write -i $CONFIG_FILE portal.jwtNextGenManagerSecret "$jwtNextGenManagerSecret"
   336  fi

   339  if [[ "" != "$FEATURES" ]]; then
   340:   yq write -i $CONFIG_FILE featuresEnabled "$FEATURES"
   341  fi

   343  if [[ "" != "$SAMPLE_TARGET_ENV" ]]; then
   344:   yq write -i $CONFIG_FILE sampleTargetEnv "$SAMPLE_TARGET_ENV"
   345  fi

   347  if [[ "" != "$SAMPLE_TARGET_STATUS_HOST" ]]; then
   348:   yq write -i $CONFIG_FILE sampleTargetStatusHost "$SAMPLE_TARGET_STATUS_HOST"
   349  fi

   351  if [[ "" != "$GLOBAL_WHITELIST" ]]; then
   352:   yq write -i $CONFIG_FILE globalWhitelistConfig.filters "$GLOBAL_WHITELIST"
   353  fi

   355  if [[ "" != "$SMTP_HOST" ]]; then
   356:   yq write -i $CONFIG_FILE smtp.host "$SMTP_HOST"
   357  fi

   359  if [[ "" != "$SMTP_USERNAME" ]]; then
   360:   yq write -i $CONFIG_FILE smtp.username "$SMTP_USERNAME"
   361  fi

   363  if [[ "" != "$SMTP_PASSWORD" ]]; then
   364:   yq write -i $CONFIG_FILE smtp.password "$SMTP_PASSWORD"
   365  fi

   367  if [[ "" != "$SMTP_USE_SSL" ]]; then
   368:   yq write -i $CONFIG_FILE smtp.useSSL "$SMTP_USE_SSL"
   369  fi

   371  if [[ "" != "$MARKETO_ENABLED" ]]; then
   372:   yq write -i $CONFIG_FILE marketoConfig.enabled "$MARKETO_ENABLED"
   373  fi

   375  if [[ "" != "$MARKETO_URL" ]]; then
   376:   yq write -i $CONFIG_FILE marketoConfig.url "$MARKETO_URL"
   377  fi

   379  if [[ "" != "$MARKETO_CLIENT_ID" ]]; then
   380:   yq write -i $CONFIG_FILE marketoConfig.clientId "$MARKETO_CLIENT_ID"
   381  fi

   383  if [[ "" != "$MARKETO_CLIENT_SECRET" ]]; then
   384:   yq write -i $CONFIG_FILE marketoConfig.clientSecret "$MARKETO_CLIENT_SECRET"
   385  fi

   387  if [[ "" != "$SEGMENT_ENABLED" ]]; then
   388:   yq write -i $CONFIG_FILE segmentConfig.enabled "$SEGMENT_ENABLED"
   389  fi

   391  if [[ "" != "$SEGMENT_URL" ]]; then
   392:   yq write -i $CONFIG_FILE segmentConfig.url "$SEGMENT_URL"
   393  fi

   395  if [[ "" != "$SEGMENT_APIKEY" ]]; then
   396:   yq write -i $CONFIG_FILE segmentConfig.apiKey "$SEGMENT_APIKEY"
   397  fi

   399  if [[ "" != "$SALESFORCE_USERNAME" ]]; then
   400:   yq write -i $CONFIG_FILE salesforceConfig.userName "$SALESFORCE_USERNAME"
   401  fi

   403  if [[ "" != "$SALESFORCE_PASSWORD" ]]; then
   404:   yq write -i $CONFIG_FILE salesforceConfig.password "$SALESFORCE_PASSWORD"
   405  fi

   407  if [[ "" != "$SALESFORCE_CONSUMER_KEY" ]]; then
   408:   yq write -i $CONFIG_FILE salesforceConfig.consumerKey "$SALESFORCE_CONSUMER_KEY"
   409  fi

   411  if [[ "" != "$SALESFORCE_CONSUMER_SECRET" ]]; then
   412:   yq write -i $CONFIG_FILE salesforceConfig.consumerSecret "$SALESFORCE_CONSUMER_SECRET"
   413  fi

   415  if [[ "" != "$SALESFORCE_GRANT_TYPE" ]]; then
   416:   yq write -i $CONFIG_FILE salesforceConfig.grantType "$SALESFORCE_GRANT_TYPE"
   417  fi

   419  if [[ "" != "$SALESFORCE_LOGIN_INSTANCE_DOMAIN" ]]; then
   420:   yq write -i $CONFIG_FILE salesforceConfig.loginInstanceDomain "$SALESFORCE_LOGIN_INSTANCE_DOMAIN"
   421  fi

   423  if [[ "" != "$SALESFORCE_API_VERSION" ]]; then
   424:   yq write -i $CONFIG_FILE salesforceConfig.apiVersion "$SALESFORCE_API_VERSION"
   425  fi

   427  if [[ "" != "$SALESFORCE_INTEGRATION_ENABLED" ]]; then
   428:   yq write -i $CONFIG_FILE salesforceConfig.enabled "$SALESFORCE_INTEGRATION_ENABLED"
   429  fi

   431  if [[ "" != "$CE_SETUP_CONFIG_AWS_ACCOUNT_ID" ]]; then
   432:   yq write -i $CONFIG_FILE ceSetUpConfig.awsAccountId "$CE_SETUP_CONFIG_AWS_ACCOUNT_ID"
   433  fi

   435  if [[ "" != "$CE_SETUP_CONFIG_AWS_S3_BUCKET_NAME" ]]; then
   436:   yq write -i $CONFIG_FILE ceSetUpConfig.awsS3BucketName "$CE_SETUP_CONFIG_AWS_S3_BUCKET_NAME"
   437  fi

   439  if [[ "" != "$CE_SETUP_CONFIG_GCP_PROJECT_ID" ]]; then
   440:   yq write -i $CONFIG_FILE ceSetUpConfig.gcpProjectId "$CE_SETUP_CONFIG_GCP_PROJECT_ID"
   441  fi

   443  if [[ "" != "$CE_SETUP_CONFIG_AWS_ROLE_NAME" ]]; then
   444:   yq write -i $CONFIG_FILE ceSetUpConfig.awsRoleName "$CE_SETUP_CONFIG_AWS_ROLE_NAME"
   445  fi

   447  if [[ "" != "$CE_SETUP_CONFIG_SAMPLE_ACCOUNT_ID" ]]; then
   448:   yq write -i $CONFIG_FILE ceSetUpConfig.sampleAccountId "$CE_SETUP_CONFIG_SAMPLE_ACCOUNT_ID"
   449  fi

   451  if [[ "" != "$CE_SETUP_CONFIG_AWS_ACCESS_KEY" ]]; then
   452:   yq write -i $CONFIG_FILE ceSetUpConfig.awsAccessKey "$CE_SETUP_CONFIG_AWS_ACCESS_KEY"
   453  fi

   455  if [[ "" != "$CE_SETUP_CONFIG_AWS_SECRET_KEY" ]]; then
   456:   yq write -i $CONFIG_FILE ceSetUpConfig.awsSecretKey "$CE_SETUP_CONFIG_AWS_SECRET_KEY"
   457  fi

   459  if [[ "" != "$CE_SETUP_CONFIG_MASTER_CLOUD_FORMATION" ]]; then
   460:   yq write -i $CONFIG_FILE ceSetUpConfig.masterAccountCloudFormationTemplateLink "$CE_SETUP_CONFIG_MASTER_CLOUD_FORMATION"
   461  fi

   463  if [[ "" != "$CE_SETUP_CONFIG_LINKED_CLOUD_FORMATION" ]]; then
   464:   yq write -i $CONFIG_FILE ceSetUpConfig.linkedAccountCloudFormationTemplateLink "$CE_SETUP_CONFIG_LINKED_CLOUD_FORMATION"
   465  fi

   467  if [[ "" != "$CE_SETUP_CONFIG_AZURE_CLIENTSECRET" ]]; then
   468:   yq write -i $CONFIG_FILE ceSetUpConfig.azureAppClientSecret "$CE_SETUP_CONFIG_AZURE_CLIENTSECRET"
   469  fi

   471  if [[ "" != "$CE_SETUP_CONFIG_AZURE_CLIENTID" ]]; then
   472:   yq write -i $CONFIG_FILE ceSetUpConfig.azureAppClientId "$CE_SETUP_CONFIG_AZURE_CLIENTID"
   473  fi

   475  if [[ "" != "$DATADOG_ENABLED" ]]; then
   476:   yq write -i $CONFIG_FILE datadogConfig.enabled "$DATADOG_ENABLED"
   477  fi

   479  if [[ "" != "$DATADOG_APIKEY" ]]; then
   480:   yq write -i $CONFIG_FILE datadogConfig.apiKey "$DATADOG_APIKEY"
   481  fi

   483  if [[ "" != "$DELEGATE_DOCKER_IMAGE" ]]; then
   484:   yq write -i $CONFIG_FILE portal.delegateDockerImage "$DELEGATE_DOCKER_IMAGE"
   485  fi

   487  if [[ "" != "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT" ]]; then
   488:   yq write -i $CONFIG_FILE portal.optionalDelegateTaskRejectAtLimit "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT"
   489  fi

   491  if [[ "" != "$EXECUTION_LOG_DATA_STORE" ]]; then
   492:   yq write -i $CONFIG_FILE executionLogStorageMode "$EXECUTION_LOG_DATA_STORE"
   493  fi

   495  if [[ "" != "$FILE_STORAGE" ]]; then
   496:   yq write -i $CONFIG_FILE fileStorageMode "$FILE_STORAGE"
   497  fi

   499  if [[ "" != "$CLUSTER_NAME" ]]; then
   500:   yq write -i $CONFIG_FILE clusterName "$CLUSTER_NAME"
   501  fi

   503  if [[ "" != "$DEPLOYMENT_CLUSTER_NAME" ]]; then
   504:   yq write -i $CONFIG_FILE deploymentClusterName "$DEPLOYMENT_CLUSTER_NAME"
   505  fi

   507  if [[ "" != "$BACKGROUND_SCHEDULER_CLUSTERED" ]]; then
   508:   yq write -i $CONFIG_FILE backgroundScheduler.clustered "$BACKGROUND_SCHEDULER_CLUSTERED"
   509  fi

   511  if [[ "" != "$ENABLE_CRONS" ]]; then
   512:   yq write -i $CONFIG_FILE enableIterators "$ENABLE_CRONS"
   513:   yq write -i $CONFIG_FILE backgroundScheduler.enabled "$ENABLE_CRONS"
   514:   yq write -i $CONFIG_FILE serviceScheduler.enabled "$ENABLE_CRONS"
   515  fi

   517  if [[ "" != "$ALLOW_TRIAL_REGISTRATION" ]]; then
   518:   yq write -i $CONFIG_FILE trialRegistrationAllowed "$ALLOW_TRIAL_REGISTRATION"
   519  fi

   521  if [[ "" != "$EVENTS_FRAMEWORK_AVAILABLE_IN_ONPREM" ]]; then
   522:   yq write -i $CONFIG_FILE eventsFrameworkAvailableInOnPrem "$EVENTS_FRAMEWORK_AVAILABLE_IN_ONPREM"
   523  else
   524:   yq write -i $CONFIG_FILE eventsFrameworkAvailableInOnPrem "false"
   525  fi

   527  if [[ "" != "$ALLOW_TRIAL_REGISTRATION_FOR_BUGATHON" ]]; then
   528:   yq write -i $CONFIG_FILE trialRegistrationAllowedForBugathon "$ALLOW_TRIAL_REGISTRATION_FOR_BUGATHON"
   529  fi

   531  if [[ "" != "$GITHUB_OAUTH_CLIENT" ]]; then
   532:   yq write -i $CONFIG_FILE githubConfig.clientId "$GITHUB_OAUTH_CLIENT"
   533  fi

   535  if [[ "" != "$GITHUB_OAUTH_SECRET" ]]; then
   536:   yq write -i $CONFIG_FILE githubConfig.clientSecret "$GITHUB_OAUTH_SECRET"
   537  fi

   539  if [[ "" != "$GITHUB_OAUTH_CALLBACK_URL" ]]; then
   540:   yq write -i $CONFIG_FILE githubConfig.callbackUrl "$GITHUB_OAUTH_CALLBACK_URL"
   541  fi

   543  if [[ "" != "$AZURE_OAUTH_CLIENT" ]]; then
   544:   yq write -i $CONFIG_FILE azureConfig.clientId "$AZURE_OAUTH_CLIENT"
   545  fi

   547  if [[ "" != "$AZURE_OAUTH_SECRET" ]]; then
   548:   yq write -i $CONFIG_FILE azureConfig.clientSecret "$AZURE_OAUTH_SECRET"
   549  fi

   551  if [[ "" != "$AZURE_OAUTH_CALLBACK_URL" ]]; then
   552:   yq write -i $CONFIG_FILE azureConfig.callbackUrl "$AZURE_OAUTH_CALLBACK_URL"
   553  fi

   555  if [[ "" != "$GOOGLE_OAUTH_CLIENT" ]]; then
   556:   yq write -i $CONFIG_FILE googleConfig.clientId "$GOOGLE_OAUTH_CLIENT"
   557  fi

   559  if [[ "" != "$GOOGLE_OAUTH_SECRET" ]]; then
   560:   yq write -i $CONFIG_FILE googleConfig.clientSecret "$GOOGLE_OAUTH_SECRET"
   561  fi

   563  if [[ "" != "$GOOGLE_OAUTH_CALLBACK_URL" ]]; then
   564:   yq write -i $CONFIG_FILE googleConfig.callbackUrl "$GOOGLE_OAUTH_CALLBACK_URL"
   565  fi

   567  if [[ "" != "$BITBUCKET_OAUTH_CLIENT" ]]; then
   568:   yq write -i $CONFIG_FILE bitbucketConfig.clientId "$BITBUCKET_OAUTH_CLIENT"
   569  fi

   571  if [[ "" != "$BITBUCKET_OAUTH_SECRET" ]]; then
   572:   yq write -i $CONFIG_FILE bitbucketConfig.clientSecret "$BITBUCKET_OAUTH_SECRET"
   573  fi

   575  if [[ "" != "$BITBUCKET_OAUTH_CALLBACK_URL" ]]; then
   576:   yq write -i $CONFIG_FILE bitbucketConfig.callbackUrl "$BITBUCKET_OAUTH_CALLBACK_URL"
   577  fi

   579  if [[ "" != "$GITLAB_OAUTH_CLIENT" ]]; then
   580:   yq write -i $CONFIG_FILE gitlabConfig.clientId "$GITLAB_OAUTH_CLIENT"
   581  fi

   583  if [[ "" != "$GITLAB_OAUTH_SECRET" ]]; then
   584:   yq write -i $CONFIG_FILE gitlabConfig.clientSecret "$GITLAB_OAUTH_SECRET"
   585  fi

   587  if [[ "" != "$GITLAB_OAUTH_CALLBACK_URL" ]]; then
   588:   yq write -i $CONFIG_FILE gitlabConfig.callbackUrl "$GITLAB_OAUTH_CALLBACK_URL"
   589  fi

   591  if [[ "" != "$LINKEDIN_OAUTH_CLIENT" ]]; then
   592:   yq write -i $CONFIG_FILE linkedinConfig.clientId "$LINKEDIN_OAUTH_CLIENT"
   593  fi

   595  if [[ "" != "$LINKEDIN_OAUTH_SECRET" ]]; then
   596:   yq write -i $CONFIG_FILE linkedinConfig.clientSecret "$LINKEDIN_OAUTH_SECRET"
   597  fi

   599  if [[ "" != "$LINKEDIN_OAUTH_CALLBACK_URL" ]]; then
   600:   yq write -i $CONFIG_FILE linkedinConfig.callbackUrl "$LINKEDIN_OAUTH_CALLBACK_URL"
   601  fi

   603  if [[ "" != "$AWS_MARKETPLACE_ACCESSKEY" ]]; then
   604:   yq write -i $CONFIG_FILE mktPlaceConfig.awsAccessKey "$AWS_MARKETPLACE_ACCESSKEY"
   605  fi

   607  if [[ "" != "$AWS_MARKETPLACE_SECRETKEY" ]]; then
   608:   yq write -i $CONFIG_FILE mktPlaceConfig.awsSecretKey "$AWS_MARKETPLACE_SECRETKEY"
   609  fi

   611  if [[ "" != "$AWS_MARKETPLACE_PRODUCTCODE" ]]; then
   612:   yq write -i $CONFIG_FILE mktPlaceConfig.awsMarketPlaceProductCode "$AWS_MARKETPLACE_PRODUCTCODE"
   613  fi

   615  if [[ "" != "$AWS_MARKETPLACE_CE_PRODUCTCODE" ]]; then
   616:   yq write -i $CONFIG_FILE mktPlaceConfig.awsMarketPlaceCeProductCode "$AWS_MARKETPLACE_CE_PRODUCTCODE"
   617  fi

   619  if [[ "" != "$ALLOW_BLACKLISTED_EMAIL_DOMAINS" ]]; then
   620:   yq write -i $CONFIG_FILE blacklistedEmailDomainsAllowed "$ALLOW_BLACKLISTED_EMAIL_DOMAINS"
   621  fi

   623  if [[ "" != "$ALLOW_PWNED_PASSWORDS" ]]; then
   624:   yq write -i $CONFIG_FILE pwnedPasswordsAllowed "$ALLOW_PWNED_PASSWORDS"
   625  fi

   627  if [[ "" != "$TIMESCALEDB_URI" ]]; then
   628:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALEDB_URI"
   629  fi

   631  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
   632:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
   633  fi

   635  if [[ "" != "$TIMESCALEDB_PASSWORD" ]]; then
   636:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALEDB_PASSWORD"
   637  fi

   639  if [[ "" != "$TIMESCALEDB_CONNECT_TIMEOUT" ]]; then
   640:   yq write -i $CONFIG_FILE timescaledb.connectTimeout "$TIMESCALEDB_CONNECT_TIMEOUT"
   641  fi

   643  if [[ "" != "$TIMESCALEDB_SOCKET_TIMEOUT" ]]; then
   644:   yq write -i $CONFIG_FILE timescaledb.socketTimeout "$TIMESCALEDB_SOCKET_TIMEOUT"
   645  fi

   647  if [[ "" != "$TIMESCALEDB_LOGUNCLOSED" ]]; then
   648:   yq write -i $CONFIG_FILE timescaledb.logUnclosedConnections "$TIMESCALEDB_LOGUNCLOSED"
   649  fi

   651  if [[ "" != "$TIMESCALEDB_LOGGERLEVEL" ]]; then
   652:   yq write -i $CONFIG_FILE timescaledb.loggerLevel "$TIMESCALEDB_LOGGERLEVEL"
   653  fi

   655  if [[ "$TIMESCALEDB_HEALTH_CHECK_NEEDED" == "true" ]]; then
   656:   yq write -i $CONFIG_FILE timescaledb.isHealthCheckNeeded "$TIMESCALEDB_HEALTH_CHECK_NEEDED"
   657  fi

   659  if [[ "$SEARCH_ENABLED" == "true" ]]; then
   660:   yq write -i $CONFIG_FILE searchEnabled true
   661  fi

   663  if [[ "$GRAPHQL_ENABLED" == "false" ]]; then
   664:   yq write -i $CONFIG_FILE graphQLEnabled false
   665  fi

   667  if [[ "$MONGO_DEBUGGING_ENABLED" == "true" ]]; then
   668:   yq write -i $CONFIG_FILE logging.loggers.[org.mongodb.morphia.query] TRACE
   669:   yq write -i $CONFIG_FILE logging.loggers.connection TRACE
   670  fi

   672  if [[ "" != "$AZURE_MARKETPLACE_ACCESSKEY" ]]; then
   673:   yq write -i $CONFIG_FILE mktPlaceConfig.azureMarketplaceAccessKey "$AZURE_MARKETPLACE_ACCESSKEY"
   674  fi

   676  if [[ "" != "$AZURE_MARKETPLACE_SECRETKEY" ]]; then
   677:   yq write -i $CONFIG_FILE mktPlaceConfig.azureMarketplaceSecretKey "$AZURE_MARKETPLACE_SECRETKEY"
   678  fi

   684      WORKER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
   685:     yq write -i $CONFIG_FILE workers.active.[$WORKER] "${WORKER_FLAG}"
   686    done

   693      PUBLISHER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
   694:     yq write -i $CONFIG_FILE publishers.active.[$PUBLISHER] "${PUBLISHER_FLAG}"
   695    done

   698  if [[ "" != "$DISTRIBUTED_LOCK_IMPLEMENTATION" ]]; then
   699:   yq write -i $CONFIG_FILE distributedLockImplementation "$DISTRIBUTED_LOCK_IMPLEMENTATION"
   700  fi

   702  if [[ "" != "$ATMOSPHERE_BACKEND" ]]; then
   703:   yq write -i $CONFIG_FILE atmosphereBroadcaster "$ATMOSPHERE_BACKEND"
   704  fi

   708  if [[ "" != "$REDIS_URL" ]]; then
   709:   yq write -i $CONFIG_FILE redisLockConfig.redisUrl "$REDIS_URL"
   710:   yq write -i $CONFIG_FILE redisAtmosphereConfig.redisUrl "$REDIS_URL"
   711:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$REDIS_URL"
   712  fi

   714  if [[ "$REDIS_SENTINEL" == "true" ]]; then
   715:   yq write -i $CONFIG_FILE redisLockConfig.sentinel true
   716:   yq write -i $CONFIG_FILE redisAtmosphereConfig.sentinel true
   717    yq delete -i $REDISSON_CACHE_FILE singleServerConfig

   720  if [[ "" != "$REDIS_MASTER_NAME" ]]; then
   721:   yq write -i $CONFIG_FILE redisLockConfig.masterName "$REDIS_MASTER_NAME"
   722:   yq write -i $CONFIG_FILE redisAtmosphereConfig.masterName "$REDIS_MASTER_NAME"
   723:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$REDIS_MASTER_NAME"
   724  fi

   729    for REDIS_SENTINEL_URL in "${REDIS_SENTINEL_URLS[@]}"; do
   730:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
   731:     yq write -i $CONFIG_FILE redisAtmosphereConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
   732:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
   733      INDEX=$(expr $INDEX + 1)

   737  if [[ "" != "$REDIS_ENV_NAMESPACE" ]]; then
   738:     yq write -i $CONFIG_FILE redisLockConfig.envNamespace "$REDIS_ENV_NAMESPACE"
   739:     yq write -i $CONFIG_FILE redisAtmosphereConfig.envNamespace "$REDIS_ENV_NAMESPACE"
   740  fi

   742  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
   743:   yq write -i $CONFIG_FILE redisLockConfig.nettyThreads "$REDIS_NETTY_THREADS"
   744:   yq write -i $CONFIG_FILE redisAtmosphereConfig.nettyThreads "$REDIS_NETTY_THREADS"
   745:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
   746  fi

   748  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
   749:   yq write -i $CONFIG_FILE redisLockConfig.useScriptCache false
   750:   yq write -i $CONFIG_FILE redisAtmosphereConfig.useScriptCache false
   751:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
   752  fi

   754  if [[ "" != "$CACHE_NAMESPACE" ]]; then
   755:     yq write -i $CONFIG_FILE cacheConfig.cacheNamespace "$CACHE_NAMESPACE"
   756  fi

   758  if [[ "" != "$CACHE_BACKEND" ]]; then
   759:     yq write -i $CONFIG_FILE cacheConfig.cacheBackend "$CACHE_BACKEND"
   760  fi

   762  if [[ "" != "$GCP_MARKETPLACE_ENABLED" ]]; then
   763:     yq write -i $CONFIG_FILE gcpMarketplaceConfig.enabled "$GCP_MARKETPLACE_ENABLED"
   764  fi

   766  if [[ "" != "$GCP_MARKETPLACE_SUBSCRIPTION_NAME" ]]; then
   767:     yq write -i $CONFIG_FILE gcpMarketplaceConfig.subscriptionName "$GCP_MARKETPLACE_SUBSCRIPTION_NAME"
   768  fi

   770  if [[ "" != "$CURRENT_JRE" ]]; then
   771:   yq write -i $CONFIG_FILE currentJre "$CURRENT_JRE"
   772  fi

   774  if [[ "" != "$MIGRATE_TO_JRE" ]]; then
   775:   yq write -i $CONFIG_FILE migrateToJre "$MIGRATE_TO_JRE"
   776  fi

   778  if [[ "" != "$ORACLE_JRE_TAR_PATH" ]]; then
   779:   yq write -i $CONFIG_FILE jreConfigs.oracle8u191.jreTarPath "$ORACLE_JRE_TAR_PATH"
   780  fi

   782  if [[ "" != "$OPENJDK_JRE_TAR_PATH" ]]; then
   783:   yq write -i $CONFIG_FILE jreConfigs.openjdk8u242.jreTarPath "$OPENJDK_JRE_TAR_PATH"
   784  fi

   786  if [[ "" != "$CDN_URL" ]]; then
   787:   yq write -i $CONFIG_FILE cdnConfig.url "$CDN_URL"
   788  fi

   790  if [[ "" != "$CDN_KEY" ]]; then
   791:   yq write -i $CONFIG_FILE cdnConfig.keyName "$CDN_KEY"
   792  fi

   794  if [[ "" != "$CDN_KEY_SECRET" ]]; then
   795:   yq write -i $CONFIG_FILE cdnConfig.keySecret "$CDN_KEY_SECRET"
   796  fi

   798  if [[ "" != "$CDN_DELEGATE_JAR_PATH" ]]; then
   799:   yq write -i $CONFIG_FILE cdnConfig.delegateJarPath "$CDN_DELEGATE_JAR_PATH"
   800  fi

   802  if [[ "" != "$CDN_WATCHER_JAR_BASE_PATH" ]]; then
   803:   yq write -i $CONFIG_FILE cdnConfig.watcherJarBasePath "$CDN_WATCHER_JAR_BASE_PATH"
   804  fi

   806  if [[ "" != "$CDN_WATCHER_JAR_PATH" ]]; then
   807:   yq write -i $CONFIG_FILE cdnConfig.watcherJarPath "$CDN_WATCHER_JAR_PATH"
   808  fi

   810  if [[ "" != "$CDN_WATCHER_METADATA_FILE_PATH" ]]; then
   811:   yq write -i $CONFIG_FILE cdnConfig.watcherMetaDataFilePath "$CDN_WATCHER_METADATA_FILE_PATH"
   812  fi

   814  if [[ "" != "$CDN_ORACLE_JRE_TAR_PATH" ]]; then
   815:   yq write -i $CONFIG_FILE cdnConfig.cdnJreTarPaths.oracle8u191 "$CDN_ORACLE_JRE_TAR_PATH"
   816  fi

   818  if [[ "" != "$CDN_OPENJDK_JRE_TAR_PATH" ]]; then
   819:   yq write -i $CONFIG_FILE cdnConfig.cdnJreTarPaths.openjdk8u242 "$CDN_OPENJDK_JRE_TAR_PATH"
   820  fi

   822  if [[ "" != "$COMMAND_LIBRARY_SERVICE_BASE_URL" ]]; then
   823:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.baseUrl "$COMMAND_LIBRARY_SERVICE_BASE_URL"
   824  fi

   826  if [[ "" != "$BUGSNAG_API_KEY" ]]; then
   827:   yq write -i $CONFIG_FILE bugsnagApiKey "$BUGSNAG_API_KEY"
   828  fi

   830  if [[ "" != "$ACCOUNT_LICENSE_CHECK_JOB_FREQUENCY" ]]; then
   831:   yq write -i $CONFIG_FILE jobsFrequencyConfig.accountLicenseCheckJobFrequencyInMinutes "$ACCOUNT_LICENSE_CHECK_JOB_FREQUENCY"
   832  fi

   834  if [[ "" != "$ACCOUNT_DELETION_JOB_FREQUENCY" ]]; then
   835:   yq write -i $CONFIG_FILE jobsFrequencyConfig.accountDeletionJobFrequencyInMinutes "$ACCOUNT_DELETION_JOB_FREQUENCY"
   836  fi

   838  if [[ "" != "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET" ]]; then
   839:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.managerToCommandLibraryServiceSecret "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET"
   840  fi

   842  if [[ "" != "$DELEGATE_SERVICE_TARGET" ]]; then
   843:   yq write -i $CONFIG_FILE grpcDelegateServiceClientConfig.target "$DELEGATE_SERVICE_TARGET"
   844  fi

   846  if [[ "" != "$DELEGATE_SERVICE_AUTHORITY" ]]; then
   847:   yq write -i $CONFIG_FILE grpcDelegateServiceClientConfig.authority "$DELEGATE_SERVICE_AUTHORITY"
   848  fi

   850  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_AUTHORITY" ]]; then
   851:   yq write -i $CONFIG_FILE grpcDMSClientConfig.authority "$DELEGATE_SERVICE_MANAGEMENT_AUTHORITY"
   852  fi

   854  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_TARGET" ]]; then
   855:   yq write -i $CONFIG_FILE grpcDMSClientConfig.target "$DELEGATE_SERVICE_MANAGEMENT_TARGET"
   856  fi

   858  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_SECRET" ]]; then
   859:   yq write -i $CONFIG_FILE dmsSecret "$DELEGATE_SERVICE_MANAGEMENT_SECRET"
   860  fi

   863  if [[ "" != "$DELEGATE_GRPC_TARGET" ]]; then
   864:   yq write -i $CONFIG_FILE grpcOnpremDelegateClientConfig.target "$DELEGATE_GRPC_TARGET"
   865  fi

   867  if [[ "" != "$DELEGATE_GRPC_AUTHORITY" ]]; then
   868:   yq write -i $CONFIG_FILE grpcOnpremDelegateClientConfig.authority "$DELEGATE_GRPC_AUTHORITY"
   869  fi

   871  if [[ "" != "$NG_MANAGER_AUTHORITY" ]]; then
   872:   yq write -i $CONFIG_FILE grpcClientConfig.authority "$NG_MANAGER_AUTHORITY"
   873  fi

   875  if [[ "" != "$NG_MANAGER_TARGET" ]]; then
   876:   yq write -i $CONFIG_FILE grpcClientConfig.target "$NG_MANAGER_TARGET"
   877  fi

   879  if [[ "" != "$REMINDERS_BEFORE_ACCOUNT_DELETION" ]]; then
   880:   yq write -i $CONFIG_FILE numberOfRemindersBeforeAccountDeletion "$REMINDERS_BEFORE_ACCOUNT_DELETION"
   881  fi

   883  if [[ "" != "$EXPORT_DATA_BATCH_SIZE" ]]; then
   884:   yq write -i $CONFIG_FILE exportAccountDataBatchSize "$EXPORT_DATA_BATCH_SIZE"
   885  fi

   887  if [[ "" != "$COMMAND_LIBRARY_PUBLISHING_ALLOWED" ]]; then
   888:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.publishingAllowed "$COMMAND_LIBRARY_PUBLISHING_ALLOWED"
   889  fi

   891  if [[ "" != "$COMMAND_LIBRARY_PUBLISHING_SECRET" ]]; then
   892:   yq write -i $CONFIG_FILE commandLibraryServiceConfig.publishingSecret "$COMMAND_LIBRARY_PUBLISHING_SECRET"
   893  fi

   895  if [[ "" != "$LOG_STREAMING_SERVICE_BASEURL" ]]; then
   896:   yq write -i $CONFIG_FILE logStreamingServiceConfig.baseUrl "$LOG_STREAMING_SERVICE_BASEURL"
   897  fi

   899  if [[ "" != "$LOG_STREAMING_SERVICE_TOKEN" ]]; then
   900:   yq write -i $CONFIG_FILE logStreamingServiceConfig.serviceToken "$LOG_STREAMING_SERVICE_TOKEN"
   901  fi

   903  if [[ "" != "$ACCESS_CONTROL_ENABLED" ]]; then
   904:   yq write -i $CONFIG_FILE accessControlClient.enableAccessControl $ACCESS_CONTROL_ENABLED
   905  fi

   907  if [[ "" != "$ACCESS_CONTROL_BASE_URL" ]]; then
   908:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceConfig.baseUrl $ACCESS_CONTROL_BASE_URL
   909  fi

   911  if [[ "" != "$ACCESS_CONTROL_SECRET" ]]; then
   912:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceSecret $ACCESS_CONTROL_SECRET
   913  fi

   915  if [[ "" != "$ENABLE_AUDIT" ]]; then
   916:   yq write -i $CONFIG_FILE enableAudit $ENABLE_AUDIT
   917  fi

   919  if [[ "" != "$AUDIT_CLIENT_BASEURL" ]]; then
   920:   yq write -i $CONFIG_FILE auditClientConfig.baseUrl "$AUDIT_CLIENT_BASEURL"
   921  fi

   926    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
   927:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
   928      INDEX=$(expr $INDEX + 1)

   946  if [[ "" != ${GATEWAY_PATH_PREFIX+x} ]]; then
   947:   yq write -i $CONFIG_FILE portal.gatewayPathPrefix "$GATEWAY_PATH_PREFIX"
   948  fi

   950  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
   951:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl "$NG_MANAGER_BASE_URL"
   952  fi

   954  if [[ "" != "$ENABLE_USER_CHANGESTREAM" ]]; then
   955:   yq write -i $CONFIG_FILE userChangeStreamEnabled "$ENABLE_USER_CHANGESTREAM"
   956  fi

   958  if [[ "" != "$DISABLE_DELEGATE_MGMT_IN_MANAGER" ]]; then
   959:   yq write -i $CONFIG_FILE disableDelegateMgmtInManager "$DISABLE_DELEGATE_MGMT_IN_MANAGER"
   960  fi

   962  if [[ "" != "$GCP_SECRET_MANAGER_PROJECT" ]]; then
   963:   yq write -i $CONFIG_FILE secretsConfiguration.gcpSecretManagerProject "$GCP_SECRET_MANAGER_PROJECT"
   964  fi

   966  if [[ "" != "$RESOLVE_SECRETS" ]]; then
   967:   yq write -i $CONFIG_FILE secretsConfiguration.secretResolutionEnabled "$RESOLVE_SECRETS"
   968  fi

   970  if [[ "" != "$LDAP_GROUP_SYNC_INTERVAL" ]]; then
   971:   yq write -i $CONFIG_FILE ldapSyncJobConfig.syncInterval "$LDAP_GROUP_SYNC_INTERVAL"
   972  fi

   974  if [[ "" != "$LDAP_GROUP_SYNC_POOL_SIZE" ]]; then
   975:   yq write -i $CONFIG_FILE ldapSyncJobConfig.poolSize "$LDAP_GROUP_SYNC_POOL_SIZE"
   976  fi

   978  if [[ "" != "$LDAP_GROUP_SYNC_DEFAULT_CRON" ]]; then
   979:   yq write -i $CONFIG_FILE ldapSyncJobConfig.defaultCronExpression "$LDAP_GROUP_SYNC_DEFAULT_CRON"
   980  fi

   982  if [[ "" != "$USE_GLOBAL_KMS_AS_BASE_ALGO" ]]; then
   983:   yq write -i $CONFIG_FILE useGlobalKMSAsBaseAlgo "$USE_GLOBAL_KMS_AS_BASE_ALGO"
   984  fi

   986  if [[ "" != "$SEGMENT_ENABLED_NG" ]]; then
   987:   yq write -i $CONFIG_FILE segmentConfiguration.enabled "$SEGMENT_ENABLED_NG"
   988  fi

   990  if [[ "" != "$SEGMENT_URL_NG" ]]; then
   991:   yq write -i $CONFIG_FILE segmentConfiguration.url "$SEGMENT_URL_NG"
   992  fi

   994  if [[ "" != "$SEGMENT_APIKEY_NG" ]]; then
   995:   yq write -i $CONFIG_FILE segmentConfiguration.apiKey "$SEGMENT_APIKEY_NG"
   996  fi

   998  if [[ "" != "$SEGMENT_VERIFY_CERT_NG" ]]; then
   999:   yq write -i $CONFIG_FILE segmentConfiguration.certValidationRequired "$SEGMENT_VERIFY_CERT_NG"
  1000  fi

  1002  if [[ "" != "$SECOPS_EMAIL" ]]; then
  1003:  yq write -i config.yml totp.secOpsEmail "$SECOPS_EMAIL"
  1004  fi

  1006  if [[ "" != "$INCORRECT_ATTEMPTS_UNTIL_SECOPS_NOTIFIED" ]]; then
  1007:  yq write -i config.yml totp.incorrectAttemptsUntilSecOpsNotified "$INCORRECT_ATTEMPTS_UNTIL_SECOPS_NOTIFIED"
  1008  fi

  1010  if [[ "" != "$DELEGATE_MTLS_SUBDOMAIN" ]]; then
  1011:   yq write -i $CONFIG_FILE delegateMtlsSubdomain "$DELEGATE_MTLS_SUBDOMAIN"
  1012  fi

harness/harness-core/dockerization/migrator/scripts/replace_configs.sh:
   14    if [[ "" != "$CONFIG_VALUE" ]]; then
   15:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   16    fi

   24  
   25:     yq write -i $CONFIG_FILE $1.hosts[$INDEX].host "$HOST"
   26      if [[ "" != "$PORT" ]]; then
   27:       yq write -i $CONFIG_FILE $1.hosts[$INDEX].port "$PORT"
   28      fi

   36      VALUE=$(cut -d= -f 2 <<< "$PARAM_PAIR")
   37:     yq write -i $CONFIG_FILE $1.params.$NAME "$VALUE"
   38    done

   43  
   44: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   45  
   46  if [[ "" != "$LOGGING_LEVEL" ]]; then
   47:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   48  fi

   54      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   55:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   56    done

   59  if [[ "" != "$SERVER_PORT" ]]; then
   60:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
   61  else
   62:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "9080"
   63  fi

   65  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
   66:   yq write -i $CONFIG_FILE cg.grpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
   67  fi

   69  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
   70:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
   71  fi

   73  if [[ "" != "$UI_SERVER_URL" ]]; then
   74:   yq write -i $CONFIG_FILE cg.portal.url "$UI_SERVER_URL"
   75  fi

   77  if [[ "" != "$AUTHTOKENEXPIRYINMILLIS" ]]; then
   78:   yq write -i $CONFIG_FILE cg.portal.authTokenExpiryInMillis "$AUTHTOKENEXPIRYINMILLIS"
   79  fi

   81  if [[ "" != "$EXTERNAL_GRAPHQL_RATE_LIMIT" ]]; then
   82:   yq write -i $CONFIG_FILE cg.portal.externalGraphQLRateLimitPerMinute "$EXTERNAL_GRAPHQL_RATE_LIMIT"
   83  fi

   85  if [[ "" != "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT" ]]; then
   86:   yq write -i $CONFIG_FILE cg.portal.customDashGraphQLRateLimitPerMinute "$CUSTOM_DASH_GRAPHQL_RATE_LIMIT"
   87  fi

   89  if [[ "" != "$ALLOWED_ORIGINS" ]]; then
   90:   yq write -i $CONFIG_FILE cg.portal.allowedOrigins "$ALLOWED_ORIGINS"
   91  fi

   93  if [[ "" != "$STORE_REQUEST_PAYLOAD" ]]; then
   94:   yq write -i $CONFIG_FILE cg.auditConfig.storeRequestPayload "$STORE_REQUEST_PAYLOAD"
   95  fi

   97  if [[ "" != "$STORE_RESPONSE_PAYLOAD" ]]; then
   98:   yq write -i $CONFIG_FILE cg.auditConfig.storeResponsePayload "$STORE_RESPONSE_PAYLOAD"
   99  fi

  101  if [[ "" != "$MONGO_URI" ]]; then
  102:   yq write -i $CONFIG_FILE cg.mongo.uri "${MONGO_URI//\\&/&}"
  103  fi

  106    yq delete -i $CONFIG_FILE cg.mongo.uri
  107:   yq write -i $CONFIG_FILE cg.mongo.username "$MONGO_USERNAME"
  108:   yq write -i $CONFIG_FILE cg.mongo.password "$MONGO_PASSWORD"
  109:   yq write -i $CONFIG_FILE cg.mongo.database "$MONGO_DATABASE"
  110:   yq write -i $CONFIG_FILE cg.mongo.schema "$MONGO_SCHEMA"
  111    write_mongo_hosts_and_ports cg.mongo "$MONGO_HOSTS_AND_PORTS"

  115  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
  116:   yq write -i $CONFIG_FILE cg.mongo.traceMode $MONGO_TRACE_MODE
  117  fi

  119  if [[ "" != "$MONGO_SSL_CONFIG" ]]; then
  120:   yq write -i $CONFIG_FILE cg.mongo.mongoSSLConfig.mongoSSLEnabled "$MONGO_SSL_CONFIG"
  121  fi

  123  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PATH" ]]; then
  124:   yq write -i $CONFIG_FILE cg.mongo.mongoSSLConfig.mongoTrustStorePath "$MONGO_SSL_CA_TRUST_STORE_PATH"
  125  fi

  127  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PASSWORD" ]]; then
  128:   yq write -i $CONFIG_FILE cg.mongo.mongoSSLConfig.mongoTrustStorePassword "$MONGO_SSL_CA_TRUST_STORE_PASSWORD"
  129  fi

  131  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
  132:   yq write -i $CONFIG_FILE cg.mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
  133  fi

  135  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
  136:   yq write -i $CONFIG_FILE cg.mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
  137  fi

  139  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
  140:   yq write -i $CONFIG_FILE cg.mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
  141  fi

  143  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
  144:   yq write -i $CONFIG_FILE cg.mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
  145  fi

  147  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  148:   yq write -i $CONFIG_FILE cg.mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  149  fi

  151  if [[ "" != "$EVEMTS_MONGO_INDEX_MANAGER_MODE" ]]; then
  152:   yq write -i $CONFIG_FILE cg.events-mongo.indexManagerMode $EVEMTS_MONGO_INDEX_MANAGER_MODE
  153  fi

  155  if [[ "" != "$EVENTS_MONGO_URI" ]]; then
  156:   yq write -i $CONFIG_FILE cg.events-mongo.uri "$EVENTS_MONGO_URI"
  157  else

  159      yq delete -i $CONFIG_FILE cg.events-mongo.uri
  160:     yq write -i $CONFIG_FILE cg.events-mongo.username "$EVENTS_MONGO_USERNAME"
  161:     yq write -i $CONFIG_FILE cg.events-mongo.password "$EVENTS_MONGO_PASSWORD"
  162:     yq write -i $CONFIG_FILE cg.events-mongo.database "$EVENTS_MONGO_DATABASE"
  163:     yq write -i $CONFIG_FILE cg.events-mongo.schema "$EVENTS_MONGO_SCHEMA"
  164      write_mongo_hosts_and_ports cg.events-mongo "$EVENTS_MONGO_HOSTS_AND_PORTS"

  171  if [[ "" != "$CF_CLIENT_API_KEY" ]]; then
  172:   yq write -i $CONFIG_FILE cg.cfClientConfig.apiKey "$CF_CLIENT_API_KEY"
  173  fi

  175  if [[ "" != "$CF_CLIENT_CONFIG_URL" ]]; then
  176:   yq write -i $CONFIG_FILE cg.cfClientConfig.configUrl "$CF_CLIENT_CONFIG_URL"
  177  fi

  179  if [[ "" != "$CF_CLIENT_EVENT_URL" ]]; then
  180:   yq write -i $CONFIG_FILE cg.cfClientConfig.eventUrl "$CF_CLIENT_EVENT_URL"
  181  fi

  183  if [[ "" != "$CF_CLIENT_ANALYTICS_ENABLED" ]]; then
  184:   yq write -i $CONFIG_FILE cg.cfClientConfig.analyticsEnabled "$CF_CLIENT_ANALYTICS_ENABLED"
  185  fi

  187  if [[ "" != "$CF_CLIENT_CONNECTION_TIMEOUT" ]]; then
  188:   yq write -i $CONFIG_FILE cg.cfClientConfig.connectionTimeout "$CF_CLIENT_CONNECTION_TIMEOUT"
  189  fi

  191  if [[ "" != "$CF_CLIENT_READ_TIMEOUT" ]]; then
  192:   yq write -i $CONFIG_FILE cg.cfClientConfig.readTimeout "$CF_CLIENT_READ_TIMEOUT"
  193  fi

  195  if [[ "" != "$CF_MIGRATION_ENABLED" ]]; then
  196:   yq write -i $CONFIG_FILE cg.cfMigrationConfig.enabled "$CF_MIGRATION_ENABLED"
  197  fi

  199  if [[ "" != "$CF_MIGRATION_ADMIN_URL" ]]; then
  200:   yq write -i $CONFIG_FILE cg.cfMigrationConfig.adminUrl "$CF_MIGRATION_ADMIN_URL"
  201  fi

  203  if [[ "" != "$CF_MIGRATION_API_KEY" ]]; then
  204:   yq write -i $CONFIG_FILE cg.cfMigrationConfig.apiKey "$CF_MIGRATION_API_KEY"
  205  fi

  207  if [[ "" != "$CF_MIGRATION_ACCOUNT" ]]; then
  208:   yq write -i $CONFIG_FILE cg.cfMigrationConfig.account "$CF_MIGRATION_ACCOUNT"
  209  fi

  211  if [[ "" != "$CF_MIGRATION_ORG" ]]; then
  212:   yq write -i $CONFIG_FILE cg.cfMigrationConfig.org "$CF_MIGRATION_ORG"
  213  fi

  215  if [[ "" != "$CF_MIGRATION_PROJECT" ]]; then
  216:   yq write -i $CONFIG_FILE cg.cfMigrationConfig.project "$CF_MIGRATION_PROJECT"
  217  fi

  219  if [[ "" != "$CF_MIGRATION_ENVIRONMENT" ]]; then
  220:   yq write -i $CONFIG_FILE cg.cfMigrationConfig.environment "$CF_MIGRATION_ENVIRONMENT"
  221  fi

  227  if [[ "" != "$ELASTICSEARCH_URI" ]]; then
  228:   yq write -i $CONFIG_FILE cg.elasticsearch.uri "$ELASTICSEARCH_URI"
  229  fi

  231  if [[ "" != "$ELASTICSEARCH_INDEX_SUFFIX" ]]; then
  232:   yq write -i $CONFIG_FILE cg.elasticsearch.indexSuffix "$ELASTICSEARCH_INDEX_SUFFIX"
  233  fi

  235  if [[ "" != "$ELASTICSEARCH_MONGO_TAG_NAME" ]]; then
  236:  yq write -i $CONFIG_FILE cg.elasticsearch.mongoTagKey "$ELASTICSEARCH_MONGO_TAG_NAME"
  237  fi

  239  if [[ "" != "$ELASTICSEARCH_MONGO_TAG_VALUE" ]]; then
  240:  yq write -i $CONFIG_FILE cg.elasticsearch.mongoTagValue "$ELASTICSEARCH_MONGO_TAG_VALUE"
  241  fi

  243  if [[ "" != "$MONGO_LOCK_URI" ]]; then
  244:   yq write -i $CONFIG_FILE cg.mongo.locksUri "${MONGO_LOCK_URI//\\&/&}"
  245  fi
  246  
  247: yq write -i $CONFIG_FILE server.requestLog.appenders[0].threshold "TRACE"
  248  

  251    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  252:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  253  else

  255      yq delete -i $CONFIG_FILE 'logging.appenders.(type==gke-console)'
  256:     yq write -i $CONFIG_FILE 'logging.appenders.(type==file).currentLogFilename' "/opt/harness/logs/portal.log"
  257:     yq write -i $CONFIG_FILE 'logging.appenders.(type==file).archivedLogFilenamePattern' "/opt/harness/logs/portal.%d.%i.log"
  258    else

  264  if [[ "" != "$WATCHER_METADATA_URL" ]]; then
  265:   yq write -i $CONFIG_FILE cg.watcherMetadataUrl "$WATCHER_METADATA_URL"
  266  fi

  268  if [[ "" != "$DELEGATE_METADATA_URL" ]]; then
  269:   yq write -i $CONFIG_FILE cg.delegateMetadataUrl "$DELEGATE_METADATA_URL"
  270  fi

  272  if [[ "" != "$API_URL" ]]; then
  273:   yq write -i $CONFIG_FILE cg.apiUrl "$API_URL"
  274  fi

  276  if [[ "" != "$ENV_PATH" ]]; then
  277:   yq write -i $CONFIG_FILE cg.envPath "$ENV_PATH"
  278  fi

  280  if [[ "" != "$DEPLOY_MODE" ]]; then
  281:   yq write -i $CONFIG_FILE cg.deployMode "$DEPLOY_MODE"
  282  fi
  283  
  284: yq write -i $NEWRELIC_FILE cg.common.license_key "$NEWRELIC_LICENSE_KEY"
  285  
  286  if [[ "$DISABLE_NEW_RELIC" == "true" ]]; then
  287:   yq write -i $NEWRELIC_FILE cg.common.agent_enabled false
  288  fi

  290  if [[ "" != "$jwtPasswordSecret" ]]; then
  291:   yq write -i $CONFIG_FILE cg.portal.jwtPasswordSecret "$jwtPasswordSecret"
  292  fi

  294  if [[ "" != "$jwtExternalServiceSecret" ]]; then
  295:   yq write -i $CONFIG_FILE cg.portal.jwtExternalServiceSecret "$jwtExternalServiceSecret"
  296  fi

  298  if [[ "" != "$jwtZendeskSecret" ]]; then
  299:   yq write -i $CONFIG_FILE cg.portal.jwtZendeskSecret "$jwtZendeskSecret"
  300  fi

  302  if [[ "" != "$jwtMultiAuthSecret" ]]; then
  303:   yq write -i $CONFIG_FILE cg.portal.jwtMultiAuthSecret "$jwtMultiAuthSecret"
  304  fi

  306  if [[ "" != "$jwtSsoRedirectSecret" ]]; then
  307:   yq write -i $CONFIG_FILE cg.portal.jwtSsoRedirectSecret "$jwtSsoRedirectSecret"
  308  fi

  310  if [[ "" != "$jwtAuthSecret" ]]; then
  311:   yq write -i $CONFIG_FILE cg.portal.jwtAuthSecret "$jwtAuthSecret"
  312  fi

  314  if [[ "" != "$jwtMarketPlaceSecret" ]]; then
  315:   yq write -i $CONFIG_FILE cg.portal.jwtMarketPlaceSecret "$jwtMarketPlaceSecret"
  316  fi

  318  if [[ "" != "$jwtIdentityServiceSecret" ]]; then
  319:   yq write -i $CONFIG_FILE cg.portal.jwtIdentityServiceSecret "$jwtIdentityServiceSecret"
  320  fi

  322  if [[ "" != "$jwtDataHandlerSecret" ]]; then
  323:   yq write -i $CONFIG_FILE cg.portal.jwtDataHandlerSecret "$jwtDataHandlerSecret"
  324  fi

  326  if [[ "" != "$jwtNextGenManagerSecret" ]]; then
  327:   yq write -i $CONFIG_FILE cg.portal.jwtNextGenManagerSecret "$jwtNextGenManagerSecret"
  328  fi

  331  if [[ "" != "$FEATURES" ]]; then
  332:   yq write -i $CONFIG_FILE cg.featuresEnabled "$FEATURES"
  333  fi

  335  if [[ "" != "$SAMPLE_TARGET_ENV" ]]; then
  336:   yq write -i $CONFIG_FILE cg.sampleTargetEnv "$SAMPLE_TARGET_ENV"
  337  fi

  339  if [[ "" != "$SAMPLE_TARGET_STATUS_HOST" ]]; then
  340:   yq write -i $CONFIG_FILE cg.sampleTargetStatusHost "$SAMPLE_TARGET_STATUS_HOST"
  341  fi

  343  if [[ "" != "$GLOBAL_WHITELIST" ]]; then
  344:   yq write -i $CONFIG_FILE cg.globalWhitelistConfig.filters "$GLOBAL_WHITELIST"
  345  fi

  347  if [[ "" != "$SMTP_HOST" ]]; then
  348:   yq write -i $CONFIG_FILE cg.smtp.host "$SMTP_HOST"
  349  fi

  351  if [[ "" != "$SMTP_USERNAME" ]]; then
  352:   yq write -i $CONFIG_FILE cg.smtp.username "$SMTP_USERNAME"
  353  fi

  355  if [[ "" != "$SMTP_PASSWORD" ]]; then
  356:   yq write -i $CONFIG_FILE cg.smtp.password "$SMTP_PASSWORD"
  357  fi

  359  if [[ "" != "$SMTP_USE_SSL" ]]; then
  360:   yq write -i $CONFIG_FILE cg.smtp.useSSL "$SMTP_USE_SSL"
  361  fi

  363  if [[ "" != "$MARKETO_ENABLED" ]]; then
  364:   yq write -i $CONFIG_FILE cg.marketoConfig.enabled "$MARKETO_ENABLED"
  365  fi

  367  if [[ "" != "$MARKETO_URL" ]]; then
  368:   yq write -i $CONFIG_FILE cg.marketoConfig.url "$MARKETO_URL"
  369  fi

  371  if [[ "" != "$MARKETO_CLIENT_ID" ]]; then
  372:   yq write -i $CONFIG_FILE cg.marketoConfig.clientId "$MARKETO_CLIENT_ID"
  373  fi

  375  if [[ "" != "$MARKETO_CLIENT_SECRET" ]]; then
  376:   yq write -i $CONFIG_FILE cg.marketoConfig.clientSecret "$MARKETO_CLIENT_SECRET"
  377  fi

  379  if [[ "" != "$SEGMENT_ENABLED" ]]; then
  380:   yq write -i $CONFIG_FILE cg.segmentConfig.enabled "$SEGMENT_ENABLED"
  381  fi

  383  if [[ "" != "$SEGMENT_URL" ]]; then
  384:   yq write -i $CONFIG_FILE cg.segmentConfig.url "$SEGMENT_URL"
  385  fi

  387  if [[ "" != "$SEGMENT_APIKEY" ]]; then
  388:   yq write -i $CONFIG_FILE cg.segmentConfig.apiKey "$SEGMENT_APIKEY"
  389  fi

  391  if [[ "" != "$SALESFORCE_USERNAME" ]]; then
  392:   yq write -i $CONFIG_FILE cg.salesforceConfig.userName "$SALESFORCE_USERNAME"
  393  fi

  395  if [[ "" != "$SALESFORCE_PASSWORD" ]]; then
  396:   yq write -i $CONFIG_FILE cg.salesforceConfig.password "$SALESFORCE_PASSWORD"
  397  fi

  399  if [[ "" != "$SALESFORCE_CONSUMER_KEY" ]]; then
  400:   yq write -i $CONFIG_FILE cg.salesforceConfig.consumerKey "$SALESFORCE_CONSUMER_KEY"
  401  fi

  403  if [[ "" != "$SALESFORCE_CONSUMER_SECRET" ]]; then
  404:   yq write -i $CONFIG_FILE cg.salesforceConfig.consumerSecret "$SALESFORCE_CONSUMER_SECRET"
  405  fi

  407  if [[ "" != "$SALESFORCE_GRANT_TYPE" ]]; then
  408:   yq write -i $CONFIG_FILE cg.salesforceConfig.grantType "$SALESFORCE_GRANT_TYPE"
  409  fi

  411  if [[ "" != "$SALESFORCE_LOGIN_INSTANCE_DOMAIN" ]]; then
  412:   yq write -i $CONFIG_FILE cg.salesforceConfig.loginInstanceDomain "$SALESFORCE_LOGIN_INSTANCE_DOMAIN"
  413  fi

  415  if [[ "" != "$SALESFORCE_API_VERSION" ]]; then
  416:   yq write -i $CONFIG_FILE cg.salesforceConfig.apiVersion "$SALESFORCE_API_VERSION"
  417  fi

  419  if [[ "" != "$SALESFORCE_INTEGRATION_ENABLED" ]]; then
  420:   yq write -i $CONFIG_FILE cg.salesforceConfig.enabled "$SALESFORCE_INTEGRATION_ENABLED"
  421  fi

  423  if [[ "" != "$CE_SETUP_CONFIG_AWS_ACCOUNT_ID" ]]; then
  424:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.awsAccountId "$CE_SETUP_CONFIG_AWS_ACCOUNT_ID"
  425  fi

  427  if [[ "" != "$CE_SETUP_CONFIG_AWS_S3_BUCKET_NAME" ]]; then
  428:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.awsS3BucketName "$CE_SETUP_CONFIG_AWS_S3_BUCKET_NAME"
  429  fi

  431  if [[ "" != "$CE_SETUP_CONFIG_GCP_PROJECT_ID" ]]; then
  432:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.gcpProjectId "$CE_SETUP_CONFIG_GCP_PROJECT_ID"
  433  fi

  435  if [[ "" != "$CE_SETUP_CONFIG_AWS_ROLE_NAME" ]]; then
  436:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.awsRoleName "$CE_SETUP_CONFIG_AWS_ROLE_NAME"
  437  fi

  439  if [[ "" != "$CE_SETUP_CONFIG_SAMPLE_ACCOUNT_ID" ]]; then
  440:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.sampleAccountId "$CE_SETUP_CONFIG_SAMPLE_ACCOUNT_ID"
  441  fi

  443  if [[ "" != "$CE_SETUP_CONFIG_AWS_ACCESS_KEY" ]]; then
  444:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.awsAccessKey "$CE_SETUP_CONFIG_AWS_ACCESS_KEY"
  445  fi

  447  if [[ "" != "$CE_SETUP_CONFIG_AWS_SECRET_KEY" ]]; then
  448:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.awsSecretKey "$CE_SETUP_CONFIG_AWS_SECRET_KEY"
  449  fi

  451  if [[ "" != "$CE_SETUP_CONFIG_MASTER_CLOUD_FORMATION" ]]; then
  452:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.masterAccountCloudFormationTemplateLink "$CE_SETUP_CONFIG_MASTER_CLOUD_FORMATION"
  453  fi

  455  if [[ "" != "$CE_SETUP_CONFIG_LINKED_CLOUD_FORMATION" ]]; then
  456:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.linkedAccountCloudFormationTemplateLink "$CE_SETUP_CONFIG_LINKED_CLOUD_FORMATION"
  457  fi

  459  if [[ "" != "$CE_SETUP_CONFIG_AZURE_CLIENTSECRET" ]]; then
  460:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.azureAppClientSecret "$CE_SETUP_CONFIG_AZURE_CLIENTSECRET"
  461  fi

  463  if [[ "" != "$CE_SETUP_CONFIG_AZURE_CLIENTID" ]]; then
  464:   yq write -i $CONFIG_FILE cg.ceSetUpConfig.azureAppClientId "$CE_SETUP_CONFIG_AZURE_CLIENTID"
  465  fi

  467  if [[ "" != "$DATADOG_ENABLED" ]]; then
  468:   yq write -i $CONFIG_FILE cg.datadogConfig.enabled "$DATADOG_ENABLED"
  469  fi

  471  if [[ "" != "$DATADOG_APIKEY" ]]; then
  472:   yq write -i $CONFIG_FILE cg.datadogConfig.apiKey "$DATADOG_APIKEY"
  473  fi

  475  if [[ "" != "$DELEGATE_DOCKER_IMAGE" ]]; then
  476:   yq write -i $CONFIG_FILE cg.portal.delegateDockerImage "$DELEGATE_DOCKER_IMAGE"
  477  fi

  479  if [[ "" != "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT" ]]; then
  480:   yq write -i $CONFIG_FILE portal.optionalDelegateTaskRejectAtLimit "$OPTIONAL_DELEGATE_TASK_REJECT_AT_LIMIT"
  481  fi

  483  if [[ "" != "$EXECUTION_LOG_DATA_STORE" ]]; then
  484:   yq write -i $CONFIG_FILE cg.executionLogStorageMode "$EXECUTION_LOG_DATA_STORE"
  485  fi

  487  if [[ "" != "$FILE_STORAGE" ]]; then
  488:   yq write -i $CONFIG_FILE cg.fileStorageMode "$FILE_STORAGE"
  489  fi

  491  if [[ "" != "$CLUSTER_NAME" ]]; then
  492:   yq write -i $CONFIG_FILE cg.clusterName "$CLUSTER_NAME"
  493  fi

  495  if [[ "" != "$DEPLOYMENT_CLUSTER_NAME" ]]; then
  496:   yq write -i $CONFIG_FILE cg.deploymentClusterName "$DEPLOYMENT_CLUSTER_NAME"
  497  fi

  499  if [[ "" != "$BACKGROUND_SCHEDULER_CLUSTERED" ]]; then
  500:   yq write -i $CONFIG_FILE cg.backgroundScheduler.clustered "$BACKGROUND_SCHEDULER_CLUSTERED"
  501  fi

  503  if [[ "" != "$ALLOW_TRIAL_REGISTRATION" ]]; then
  504:   yq write -i $CONFIG_FILE cg.trialRegistrationAllowed "$ALLOW_TRIAL_REGISTRATION"
  505  fi

  507  if [[ "" != "$GITHUB_OAUTH_CLIENT" ]]; then
  508:   yq write -i $CONFIG_FILE cg.githubConfig.clientId "$GITHUB_OAUTH_CLIENT"
  509  fi

  511  if [[ "" != "$GITHUB_OAUTH_SECRET" ]]; then
  512:   yq write -i $CONFIG_FILE cg.githubConfig.clientSecret "$GITHUB_OAUTH_SECRET"
  513  fi

  515  if [[ "" != "$GITHUB_OAUTH_CALLBACK_URL" ]]; then
  516:   yq write -i $CONFIG_FILE cg.githubConfig.callbackUrl "$GITHUB_OAUTH_CALLBACK_URL"
  517  fi

  519  if [[ "" != "$AZURE_OAUTH_CLIENT" ]]; then
  520:   yq write -i $CONFIG_FILE cg.azureConfig.clientId "$AZURE_OAUTH_CLIENT"
  521  fi

  523  if [[ "" != "$AZURE_OAUTH_SECRET" ]]; then
  524:   yq write -i $CONFIG_FILE cg.azureConfig.clientSecret "$AZURE_OAUTH_SECRET"
  525  fi

  527  if [[ "" != "$AZURE_OAUTH_CALLBACK_URL" ]]; then
  528:   yq write -i $CONFIG_FILE cg.azureConfig.callbackUrl "$AZURE_OAUTH_CALLBACK_URL"
  529  fi

  531  if [[ "" != "$GOOGLE_OAUTH_CLIENT" ]]; then
  532:   yq write -i $CONFIG_FILE cg.googleConfig.clientId "$GOOGLE_OAUTH_CLIENT"
  533  fi

  535  if [[ "" != "$GOOGLE_OAUTH_SECRET" ]]; then
  536:   yq write -i $CONFIG_FILE cg.googleConfig.clientSecret "$GOOGLE_OAUTH_SECRET"
  537  fi

  539  if [[ "" != "$GOOGLE_OAUTH_CALLBACK_URL" ]]; then
  540:   yq write -i $CONFIG_FILE cg.googleConfig.callbackUrl "$GOOGLE_OAUTH_CALLBACK_URL"
  541  fi

  543  if [[ "" != "$BITBUCKET_OAUTH_CLIENT" ]]; then
  544:   yq write -i $CONFIG_FILE cg.bitbucketConfig.clientId "$BITBUCKET_OAUTH_CLIENT"
  545  fi

  547  if [[ "" != "$BITBUCKET_OAUTH_SECRET" ]]; then
  548:   yq write -i $CONFIG_FILE cg.bitbucketConfig.clientSecret "$BITBUCKET_OAUTH_SECRET"
  549  fi

  551  if [[ "" != "$BITBUCKET_OAUTH_CALLBACK_URL" ]]; then
  552:   yq write -i $CONFIG_FILE cg.bitbucketConfig.callbackUrl "$BITBUCKET_OAUTH_CALLBACK_URL"
  553  fi

  555  if [[ "" != "$GITLAB_OAUTH_CLIENT" ]]; then
  556:   yq write -i $CONFIG_FILE cg.gitlabConfig.clientId "$GITLAB_OAUTH_CLIENT"
  557  fi

  559  if [[ "" != "$GITLAB_OAUTH_SECRET" ]]; then
  560:   yq write -i $CONFIG_FILE cg.gitlabConfig.clientSecret "$GITLAB_OAUTH_SECRET"
  561  fi

  563  if [[ "" != "$GITLAB_OAUTH_CALLBACK_URL" ]]; then
  564:   yq write -i $CONFIG_FILE cg.gitlabConfig.callbackUrl "$GITLAB_OAUTH_CALLBACK_URL"
  565  fi

  567  if [[ "" != "$LINKEDIN_OAUTH_CLIENT" ]]; then
  568:   yq write -i $CONFIG_FILE cg.linkedinConfig.clientId "$LINKEDIN_OAUTH_CLIENT"
  569  fi

  571  if [[ "" != "$LINKEDIN_OAUTH_SECRET" ]]; then
  572:   yq write -i $CONFIG_FILE cg.linkedinConfig.clientSecret "$LINKEDIN_OAUTH_SECRET"
  573  fi

  575  if [[ "" != "$LINKEDIN_OAUTH_CALLBACK_URL" ]]; then
  576:   yq write -i $CONFIG_FILE cg.linkedinConfig.callbackUrl "$LINKEDIN_OAUTH_CALLBACK_URL"
  577  fi

  579  if [[ "" != "$AWS_MARKETPLACE_ACCESSKEY" ]]; then
  580:   yq write -i $CONFIG_FILE cg.mktPlaceConfig.awsAccessKey "$AWS_MARKETPLACE_ACCESSKEY"
  581  fi

  583  if [[ "" != "$AWS_MARKETPLACE_SECRETKEY" ]]; then
  584:   yq write -i $CONFIG_FILE cg.mktPlaceConfig.awsSecretKey "$AWS_MARKETPLACE_SECRETKEY"
  585  fi

  587  if [[ "" != "$AWS_MARKETPLACE_PRODUCTCODE" ]]; then
  588:   yq write -i $CONFIG_FILE cg.mktPlaceConfig.awsMarketPlaceProductCode "$AWS_MARKETPLACE_PRODUCTCODE"
  589  fi

  591  if [[ "" != "$AWS_MARKETPLACE_CE_PRODUCTCODE" ]]; then
  592:   yq write -i $CONFIG_FILE cg.mktPlaceConfig.awsMarketPlaceCeProductCode "$AWS_MARKETPLACE_CE_PRODUCTCODE"
  593  fi

  595  if [[ "" != "$ALLOW_BLACKLISTED_EMAIL_DOMAINS" ]]; then
  596:   yq write -i $CONFIG_FILE cg.blacklistedEmailDomainsAllowed "$ALLOW_BLACKLISTED_EMAIL_DOMAINS"
  597  fi

  599  if [[ "" != "$ALLOW_PWNED_PASSWORDS" ]]; then
  600:   yq write -i $CONFIG_FILE cg.pwnedPasswordsAllowed "$ALLOW_PWNED_PASSWORDS"
  601  fi

  603  if [[ "" != "$TIMESCALEDB_URI" ]]; then
  604:   yq write -i $CONFIG_FILE cg.timescaledb.timescaledbUrl "$TIMESCALEDB_URI"
  605  fi

  607  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
  608:   yq write -i $CONFIG_FILE cg.timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
  609  fi

  611  if [[ "" != "$TIMESCALEDB_PASSWORD" ]]; then
  612:   yq write -i $CONFIG_FILE cg.timescaledb.timescaledbPassword "$TIMESCALEDB_PASSWORD"
  613  fi

  615  if [[ "" != "$TIMESCALEDB_CONNECT_TIMEOUT" ]]; then
  616:   yq write -i $CONFIG_FILE cg.timescaledb.connectTimeout "$TIMESCALEDB_CONNECT_TIMEOUT"
  617  fi

  619  if [[ "" != "$TIMESCALEDB_SOCKET_TIMEOUT" ]]; then
  620:   yq write -i $CONFIG_FILE cg.timescaledb.socketTimeout "$TIMESCALEDB_SOCKET_TIMEOUT"
  621  fi

  623  if [[ "" != "$TIMESCALEDB_LOGUNCLOSED" ]]; then
  624:   yq write -i $CONFIG_FILE cg.timescaledb.logUnclosedConnections "$TIMESCALEDB_LOGUNCLOSED"
  625  fi

  627  if [[ "" != "$TIMESCALEDB_LOGGERLEVEL" ]]; then
  628:   yq write -i $CONFIG_FILE cg.timescaledb.loggerLevel "$TIMESCALEDB_LOGGERLEVEL"
  629  fi

  631  if [[ "$TIMESCALEDB_HEALTH_CHECK_NEEDED" == "true" ]]; then
  632:   yq write -i $CONFIG_FILE cg.timescaledb.isHealthCheckNeeded "$TIMESCALEDB_HEALTH_CHECK_NEEDED"
  633  fi

  635  if [[ "$MONGO_DEBUGGING_ENABLED" == "true" ]]; then
  636:   yq write -i $CONFIG_FILE logging.loggers.[org.mongodb.morphia.query] TRACE
  637:   yq write -i $CONFIG_FILE logging.loggers.connection TRACE
  638  fi

  640  if [[ "" != "$AZURE_MARKETPLACE_ACCESSKEY" ]]; then
  641:   yq write -i $CONFIG_FILE cg.mktPlaceConfig.azureMarketplaceAccessKey "$AZURE_MARKETPLACE_ACCESSKEY"
  642  fi

  644  if [[ "" != "$AZURE_MARKETPLACE_SECRETKEY" ]]; then
  645:   yq write -i $CONFIG_FILE cg.mktPlaceConfig.azureMarketplaceSecretKey "$AZURE_MARKETPLACE_SECRETKEY"
  646  fi

  652      WORKER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
  653:     yq write -i $CONFIG_FILE cg.workers.active.[$WORKER] "${WORKER_FLAG}"
  654    done

  661      PUBLISHER_FLAG=`echo $ITEM | awk -F= '{print $2}'`
  662:     yq write -i $CONFIG_FILE cg.publishers.active.[$PUBLISHER] "${PUBLISHER_FLAG}"
  663    done

  666  if [[ "" != "$DISTRIBUTED_LOCK_IMPLEMENTATION" ]]; then
  667:   yq write -i $CONFIG_FILE cg.distributedLockImplementation "$DISTRIBUTED_LOCK_IMPLEMENTATION"
  668  fi

  670  if [[ "" != "$ATMOSPHERE_BACKEND" ]]; then
  671:   yq write -i $CONFIG_FILE cg.atmosphereBroadcaster "$ATMOSPHERE_BACKEND"
  672  fi

  676  if [[ "" != "$REDIS_URL" ]]; then
  677:   yq write -i $CONFIG_FILE cg.redisLockConfig.redisUrl "$REDIS_URL"
  678:   yq write -i $CONFIG_FILE cg.redisAtmosphereConfig.redisUrl "$REDIS_URL"
  679:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$REDIS_URL"
  680  fi

  682  if [[ "$REDIS_SENTINEL" == "true" ]]; then
  683:   yq write -i $CONFIG_FILE cg.redisLockConfig.sentinel true
  684:   yq write -i $CONFIG_FILE cg.redisAtmosphereConfig.sentinel true
  685    yq delete -i $REDISSON_CACHE_FILE singleServerConfig

  688  if [[ "" != "$REDIS_MASTER_NAME" ]]; then
  689:   yq write -i $CONFIG_FILE cg.redisLockConfig.masterName "$REDIS_MASTER_NAME"
  690:   yq write -i $CONFIG_FILE cg.redisAtmosphereConfig.masterName "$REDIS_MASTER_NAME"
  691:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$REDIS_MASTER_NAME"
  692  fi

  697    for REDIS_SENTINEL_URL in "${REDIS_SENTINEL_URLS[@]}"; do
  698:     yq write -i $CONFIG_FILE cg.redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  699:     yq write -i $CONFIG_FILE cg.redisAtmosphereConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  700:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
  701      INDEX=$(expr $INDEX + 1)

  705  if [[ "" != "$REDIS_ENV_NAMESPACE" ]]; then
  706:     yq write -i $CONFIG_FILE cg.redisLockConfig.envNamespace "$REDIS_ENV_NAMESPACE"
  707:     yq write -i $CONFIG_FILE cg.redisAtmosphereConfig.envNamespace "$REDIS_ENV_NAMESPACE"
  708  fi

  710  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  711:   yq write -i $CONFIG_FILE cg.redisLockConfig.nettyThreads "$REDIS_NETTY_THREADS"
  712:   yq write -i $CONFIG_FILE cg.redisAtmosphereConfig.nettyThreads "$REDIS_NETTY_THREADS"
  713:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  714  fi

  716  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  717:   yq write -i $CONFIG_FILE cg.redisLockConfig.useScriptCache false
  718:   yq write -i $CONFIG_FILE cg.redisAtmosphereConfig.useScriptCache false
  719:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  720  fi

  722  if [[ "" != "$CACHE_NAMESPACE" ]]; then
  723:     yq write -i $CONFIG_FILE cg.cacheConfig.cacheNamespace "$CACHE_NAMESPACE"
  724  fi

  726  if [[ "" != "$CACHE_BACKEND" ]]; then
  727:     yq write -i $CONFIG_FILE cg.cacheConfig.cacheBackend "$CACHE_BACKEND"
  728  fi

  730  if [[ "" != "$GCP_MARKETPLACE_ENABLED" ]]; then
  731:     yq write -i $CONFIG_FILE cg.gcpMarketplaceConfig.enabled "$GCP_MARKETPLACE_ENABLED"
  732  fi

  734  if [[ "" != "$GCP_MARKETPLACE_SUBSCRIPTION_NAME" ]]; then
  735:     yq write -i $CONFIG_FILE cg.gcpMarketplaceConfig.subscriptionName "$GCP_MARKETPLACE_SUBSCRIPTION_NAME"
  736  fi

  738  if [[ "" != "$CURRENT_JRE" ]]; then
  739:   yq write -i $CONFIG_FILE cg.currentJre "$CURRENT_JRE"
  740  fi

  742  if [[ "" != "$MIGRATE_TO_JRE" ]]; then
  743:   yq write -i $CONFIG_FILE cg.migrateToJre "$MIGRATE_TO_JRE"
  744  fi

  746  if [[ "" != "$ORACLE_JRE_TAR_PATH" ]]; then
  747:   yq write -i $CONFIG_FILE cg.jreConfigs.oracle8u191.jreTarPath "$ORACLE_JRE_TAR_PATH"
  748  fi

  750  if [[ "" != "$OPENJDK_JRE_TAR_PATH" ]]; then
  751:   yq write -i $CONFIG_FILE cg.jreConfigs.openjdk8u242.jreTarPath "$OPENJDK_JRE_TAR_PATH"
  752  fi

  754  if [[ "" != "$CDN_URL" ]]; then
  755:   yq write -i $CONFIG_FILE cg.cdnConfig.url "$CDN_URL"
  756  fi

  758  if [[ "" != "$CDN_KEY" ]]; then
  759:   yq write -i $CONFIG_FILE cg.cdnConfig.keyName "$CDN_KEY"
  760  fi

  762  if [[ "" != "$CDN_KEY_SECRET" ]]; then
  763:   yq write -i $CONFIG_FILE cg.cdnConfig.keySecret "$CDN_KEY_SECRET"
  764  fi

  766  if [[ "" != "$CDN_DELEGATE_JAR_PATH" ]]; then
  767:   yq write -i $CONFIG_FILE cg.cdnConfig.delegateJarPath "$CDN_DELEGATE_JAR_PATH"
  768  fi

  770  if [[ "" != "$CDN_WATCHER_JAR_BASE_PATH" ]]; then
  771:   yq write -i $CONFIG_FILE cg.cdnConfig.watcherJarBasePath "$CDN_WATCHER_JAR_BASE_PATH"
  772  fi

  774  if [[ "" != "$CDN_WATCHER_JAR_PATH" ]]; then
  775:   yq write -i $CONFIG_FILE cg.cdnConfig.watcherJarPath "$CDN_WATCHER_JAR_PATH"
  776  fi

  778  if [[ "" != "$CDN_WATCHER_METADATA_FILE_PATH" ]]; then
  779:   yq write -i $CONFIG_FILE cg.cdnConfig.watcherMetaDataFilePath "$CDN_WATCHER_METADATA_FILE_PATH"
  780  fi

  782  if [[ "" != "$CDN_ORACLE_JRE_TAR_PATH" ]]; then
  783:   yq write -i $CONFIG_FILE cg.cdnConfig.cdnJreTarPaths.oracle8u191 "$CDN_ORACLE_JRE_TAR_PATH"
  784  fi

  786  if [[ "" != "$CDN_OPENJDK_JRE_TAR_PATH" ]]; then
  787:   yq write -i $CONFIG_FILE cg.cdnConfig.cdnJreTarPaths.openjdk8u242 "$CDN_OPENJDK_JRE_TAR_PATH"
  788  fi

  790  if [[ "" != "$COMMAND_LIBRARY_SERVICE_BASE_URL" ]]; then
  791:   yq write -i $CONFIG_FILE cg.commandLibraryServiceConfig.baseUrl "$COMMAND_LIBRARY_SERVICE_BASE_URL"
  792  fi

  794  if [[ "" != "$BUGSNAG_API_KEY" ]]; then
  795:   yq write -i $CONFIG_FILE cg.bugsnagApiKey "$BUGSNAG_API_KEY"
  796  fi

  798  if [[ "" != "$ACCOUNT_LICENSE_CHECK_JOB_FREQUENCY" ]]; then
  799:   yq write -i $CONFIG_FILE cg.jobsFrequencyConfig.accountLicenseCheckJobFrequencyInMinutes "$ACCOUNT_LICENSE_CHECK_JOB_FREQUENCY"
  800  fi

  802  if [[ "" != "$ACCOUNT_DELETION_JOB_FREQUENCY" ]]; then
  803:   yq write -i $CONFIG_FILE cg.jobsFrequencyConfig.accountDeletionJobFrequencyInMinutes "$ACCOUNT_DELETION_JOB_FREQUENCY"
  804  fi

  806  if [[ "" != "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET" ]]; then
  807:   yq write -i $CONFIG_FILE cg.commandLibraryServiceConfig.managerToCommandLibraryServiceSecret "$MANAGER_TO_COMMAND_LIBRARY_SERVICE_SECRET"
  808  fi

  810  if [[ "" != "$DELEGATE_SERVICE_TARGET" ]]; then
  811:   yq write -i $CONFIG_FILE cg.grpcDelegateServiceClientConfig.target "$DELEGATE_SERVICE_TARGET"
  812  fi

  814  if [[ "" != "$DELEGATE_SERVICE_AUTHORITY" ]]; then
  815:   yq write -i $CONFIG_FILE cg.grpcDelegateServiceClientConfig.authority "$DELEGATE_SERVICE_AUTHORITY"
  816  fi

  818  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_AUTHORITY" ]]; then
  819:   yq write -i $CONFIG_FILE cg.grpcDMSClientConfig.authority "$DELEGATE_SERVICE_MANAGEMENT_AUTHORITY"
  820  fi

  822  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_TARGET" ]]; then
  823:   yq write -i $CONFIG_FILE cg.grpcDMSClientConfig.target "$DELEGATE_SERVICE_MANAGEMENT_TARGET"
  824  fi

  826  if [[ "" != "$DELEGATE_SERVICE_MANAGEMENT_SECRET" ]]; then
  827:   yq write -i $CONFIG_FILE cg.dmsSecret "$DELEGATE_SERVICE_MANAGEMENT_SECRET"
  828  fi

  831  if [[ "" != "$DELEGATE_GRPC_TARGET" ]]; then
  832:   yq write -i $CONFIG_FILE cg.grpcOnpremDelegateClientConfig.target "$DELEGATE_GRPC_TARGET"
  833  fi

  835  if [[ "" != "$DELEGATE_GRPC_AUTHORITY" ]]; then
  836:   yq write -i $CONFIG_FILE cg.grpcOnpremDelegateClientConfig.authority "$DELEGATE_GRPC_AUTHORITY"
  837  fi

  839  if [[ "" != "$NG_MANAGER_AUTHORITY" ]]; then
  840:   yq write -i $CONFIG_FILE cg.grpcClientConfig.authority "$NG_MANAGER_AUTHORITY"
  841  fi

  843  if [[ "" != "$NG_MANAGER_TARGET" ]]; then
  844:   yq write -i $CONFIG_FILE cg.grpcClientConfig.target "$NG_MANAGER_TARGET"
  845  fi

  847  if [[ "" != "$REMINDERS_BEFORE_ACCOUNT_DELETION" ]]; then
  848:   yq write -i $CONFIG_FILE cg.numberOfRemindersBeforeAccountDeletion "$REMINDERS_BEFORE_ACCOUNT_DELETION"
  849  fi

  851  if [[ "" != "$EXPORT_DATA_BATCH_SIZE" ]]; then
  852:   yq write -i $CONFIG_FILE cg.exportAccountDataBatchSize "$EXPORT_DATA_BATCH_SIZE"
  853  fi

  855  if [[ "" != "$COMMAND_LIBRARY_PUBLISHING_ALLOWED" ]]; then
  856:   yq write -i $CONFIG_FILE cg.commandLibraryServiceConfig.publishingAllowed "$COMMAND_LIBRARY_PUBLISHING_ALLOWED"
  857  fi

  859  if [[ "" != "$COMMAND_LIBRARY_PUBLISHING_SECRET" ]]; then
  860:   yq write -i $CONFIG_FILE cg.commandLibraryServiceConfig.publishingSecret "$COMMAND_LIBRARY_PUBLISHING_SECRET"
  861  fi

  863  if [[ "" != "$LOG_STREAMING_SERVICE_BASEURL" ]]; then
  864:   yq write -i $CONFIG_FILE cg.logStreamingServiceConfig.baseUrl "$LOG_STREAMING_SERVICE_BASEURL"
  865  fi

  867  if [[ "" != "$LOG_STREAMING_SERVICE_TOKEN" ]]; then
  868:   yq write -i $CONFIG_FILE cg.logStreamingServiceConfig.serviceToken "$LOG_STREAMING_SERVICE_TOKEN"
  869  fi

  871  if [[ "" != "$ACCESS_CONTROL_ENABLED" ]]; then
  872:   yq write -i $CONFIG_FILE cg.accessControlClient.enableAccessControl $ACCESS_CONTROL_ENABLED
  873  fi

  875  if [[ "" != "$ACCESS_CONTROL_BASE_URL" ]]; then
  876:   yq write -i $CONFIG_FILE cg.accessControlClient.accessControlServiceConfig.baseUrl $ACCESS_CONTROL_BASE_URL
  877  fi

  879  if [[ "" != "$ACCESS_CONTROL_SECRET" ]]; then
  880:   yq write -i $CONFIG_FILE cg.accessControlClient.accessControlServiceSecret $ACCESS_CONTROL_SECRET
  881  fi

  883  if [[ "" != "$ENABLE_AUDIT" ]]; then
  884:   yq write -i $CONFIG_FILE cg.enableAudit $ENABLE_AUDIT
  885  fi

  887  if [[ "" != "$AUDIT_CLIENT_BASEURL" ]]; then
  888:   yq write -i $CONFIG_FILE cg.auditClientConfig.baseUrl "$AUDIT_CLIENT_BASEURL"
  889  fi

  894    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  895:     yq write -i $CONFIG_FILE cg.eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  896      INDEX=$(expr $INDEX + 1)

  914  if [[ "" != ${GATEWAY_PATH_PREFIX+x} ]]; then
  915:   yq write -i $CONFIG_FILE cg.portal.gatewayPathPrefix "$GATEWAY_PATH_PREFIX"
  916  fi

  918  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
  919:   yq write -i $CONFIG_FILE cg.ngManagerServiceHttpClientConfig.baseUrl "$NG_MANAGER_BASE_URL"
  920  fi

  922  if [[ "" != "$ENABLE_USER_CHANGESTREAM" ]]; then
  923:   yq write -i $CONFIG_FILE cg.userChangeStreamEnabled "$ENABLE_USER_CHANGESTREAM"
  924  fi

  926  if [[ "" != "$DISABLE_DELEGATE_MGMT_IN_MANAGER" ]]; then
  927:   yq write -i $CONFIG_FILE cg.disableDelegateMgmtInManager "$DISABLE_DELEGATE_MGMT_IN_MANAGER"
  928  fi

  930  if [[ "" != "$GCP_SECRET_MANAGER_PROJECT" ]]; then
  931:   yq write -i $CONFIG_FILE cg.secretsConfiguration.gcpSecretManagerProject "$GCP_SECRET_MANAGER_PROJECT"
  932  fi

  934  if [[ "" != "$RESOLVE_SECRETS" ]]; then
  935:   yq write -i $CONFIG_FILE cg.secretsConfiguration.secretResolutionEnabled "$RESOLVE_SECRETS"
  936  fi

  938  if [[ "" != "$LDAP_GROUP_SYNC_INTERVAL" ]]; then
  939:   yq write -i $CONFIG_FILE cg.ldapSyncJobConfig.syncInterval "$LDAP_GROUP_SYNC_INTERVAL"
  940  fi

  942  if [[ "" != "$LDAP_GROUP_SYNC_POOL_SIZE" ]]; then
  943:   yq write -i $CONFIG_FILE cg.ldapSyncJobConfig.poolSize "$LDAP_GROUP_SYNC_POOL_SIZE"
  944  fi

  946  if [[ "" != "$LDAP_GROUP_SYNC_DEFAULT_CRON" ]]; then
  947:   yq write -i $CONFIG_FILE cg.ldapSyncJobConfig.defaultCronExpression "$LDAP_GROUP_SYNC_DEFAULT_CRON"
  948  fi

  950  if [[ "" != "$USE_GLOBAL_KMS_AS_BASE_ALGO" ]]; then
  951:   yq write -i $CONFIG_FILE cg.useGlobalKMSAsBaseAlgo "$USE_GLOBAL_KMS_AS_BASE_ALGO"
  952  fi

  954  if [[ "" != "$SEGMENT_ENABLED_NG" ]]; then
  955:   yq write -i $CONFIG_FILE cg.segmentConfiguration.enabled "$SEGMENT_ENABLED_NG"
  956  fi

  958  if [[ "" != "$SEGMENT_URL_NG" ]]; then
  959:   yq write -i $CONFIG_FILE cg.segmentConfiguration.url "$SEGMENT_URL_NG"
  960  fi

  962  if [[ "" != "$SEGMENT_APIKEY_NG" ]]; then
  963:   yq write -i $CONFIG_FILE cg.segmentConfiguration.apiKey "$SEGMENT_APIKEY_NG"
  964  fi

  966  if [[ "" != "$SEGMENT_VERIFY_CERT_NG" ]]; then
  967:   yq write -i $CONFIG_FILE cg.segmentConfiguration.certValidationRequired "$SEGMENT_VERIFY_CERT_NG"
  968  fi

  970  if [[ "" != "$SECOPS_EMAIL" ]]; then
  971:  yq write -i config.yml cg.totp.secOpsEmail "$SECOPS_EMAIL"
  972  fi

  974  if [[ "" != "$INCORRECT_ATTEMPTS_UNTIL_SECOPS_NOTIFIED" ]]; then
  975:  yq write -i config.yml cg.totp.incorrectAttemptsUntilSecOpsNotified "$INCORRECT_ATTEMPTS_UNTIL_SECOPS_NOTIFIED"
  976  fi

  978  if [[ "" != "$PIPELINE_SERVICE_CLIENT_BASEURL" ]]; then
  979:   yq write -i $CONFIG_FILE pipelineServiceClientConfig.baseUrl "$PIPELINE_SERVICE_CLIENT_BASEURL"
  980  fi

  982  if [[ "" != "$NG_MANAGER_CLIENT_BASEURL" ]]; then
  983:   yq write -i $CONFIG_FILE ngClientConfig.baseUrl "$NG_MANAGER_CLIENT_BASEURL"
  984  fi

  986  if [[ "" != "$TEMPLATE_SERVICE_ENDPOINT" ]]; then
  987:   yq write -i $CONFIG_FILE templateServiceClientConfig.baseUrl "$TEMPLATE_SERVICE_ENDPOINT"
  988  fi

harness/harness-core/dockerization/ng-dashboard-service/scripts/replace_configs.sh:
  10    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  11:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  12  else

  20  if [[ "" != "$SERVER_PORT" ]]; then
  21:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
  22  else
  23:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "7100"
  24  fi

  27  if [[ "" != "$CD_CLIENT_BASEURL" ]]; then
  28:   yq write -i $CONFIG_FILE cdServiceClientConfig.baseUrl $CD_CLIENT_BASEURL
  29  fi

  31  if [[ "" != "$CI_CLIENT_BASEURL" ]]; then
  32:   yq write -i $CONFIG_FILE ciServiceClientConfig.baseUrl $CI_CLIENT_BASEURL
  33  fi

  35  if [[ "" != "$NG_MANAGER_CLIENT_BASEURL" ]]; then
  36:   yq write -i $CONFIG_FILE ngManagerClientConfig.baseUrl $NG_MANAGER_CLIENT_BASEURL
  37  fi

  41  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  42:   yq write -i $CONFIG_FILE secrets.ngManagerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  43  fi

  45  if [[ "" != "$PIPELINE_SERVICE_SECRET" ]]; then
  46:   yq write -i $CONFIG_FILE secrets.pipelineServiceSecret "$PIPELINE_SERVICE_SECRET"
  47  fi

  49  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  50:   yq write -i $CONFIG_FILE secrets.jwtAuthSecret "$JWT_AUTH_SECRET"
  51  fi

  53  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  54:   yq write -i $CONFIG_FILE secrets.jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  55  fi

  58    yq delete -i $CONFIG_FILE allowedOrigins
  59:   yq write -i $CONFIG_FILE allowedOrigins "$ALLOWED_ORIGINS"
  60  fi

harness/harness-core/dockerization/ng-manager/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   23  
   24:     yq write -i $CONFIG_FILE $1.hosts[$INDEX].host "$HOST"
   25      if [[ "" != "$PORT" ]]; then
   26:       yq write -i $CONFIG_FILE $1.hosts[$INDEX].port "$PORT"
   27      fi

   35      VALUE=$(cut -d= -f 2 <<< "$PARAM_PAIR")
   36:     yq write -i $CONFIG_FILE $1.params.$NAME "$VALUE"
   37    done

   40  yq delete -i $CONFIG_FILE 'server.applicationConnectors.(type==https)'
   41: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   42  

   47  if [[ "" != "$LOGGING_LEVEL" ]]; then
   48:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   49  fi

   55      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   56:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   57    done

   60  if [[ "" != "$SERVER_PORT" ]]; then
   61:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
   62  else
   63:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "7090"
   64  fi

   67  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
   68:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
   69  fi

   72    yq delete -i $CONFIG_FILE allowedOrigins
   73:   yq write -i $CONFIG_FILE allowedOrigins "$ALLOWED_ORIGINS"
   74  fi

   76  if [[ "" != "$MONGO_URI" ]]; then
   77:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   78  fi

   81    yq delete -i $CONFIG_FILE mongo.uri
   82:   yq write -i $CONFIG_FILE mongo.username "$MONGO_USERNAME"
   83:   yq write -i $CONFIG_FILE mongo.password "$MONGO_PASSWORD"
   84:   yq write -i $CONFIG_FILE mongo.database "$MONGO_DATABASE"
   85:   yq write -i $CONFIG_FILE mongo.schema "$MONGO_SCHEMA"
   86    write_mongo_hosts_and_ports mongo "$MONGO_HOSTS_AND_PORTS"

   90  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   91:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   92  fi

   94  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
   95:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
   96  fi

   98  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
   99:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
  100  fi

  102  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
  103:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
  104  fi

  106  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
  107:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
  108  fi

  110  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
  111:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
  112  fi

  114  if [[ "" != "$MONGO_TRANSACTIONS_ALLOWED" ]]; then
  115:   yq write -i $CONFIG_FILE mongo.transactionsEnabled $MONGO_TRANSACTIONS_ALLOWED
  116  fi

  118  if [[ "" != "$PMS_MONGO_URI" ]]; then
  119:   yq write -i $CONFIG_FILE pmsMongo.uri "${PMS_MONGO_URI//\\&/&}"
  120  fi

  123    yq delete -i $CONFIG_FILE pmsMongo.uri
  124:   yq write -i $CONFIG_FILE pmsMongo.username "$PMS_MONGO_USERNAME"
  125:   yq write -i $CONFIG_FILE pmsMongo.password "$PMS_MONGO_PASSWORD"
  126:   yq write -i $CONFIG_FILE pmsMongo.database "$PMS_MONGO_DATABASE"
  127:   yq write -i $CONFIG_FILE pmsMongo.schema "$PMS_MONGO_SCHEMA"
  128    write_mongo_hosts_and_ports pmsMongo "$PMS_MONGO_HOSTS_AND_PORTS"

  132  if [[ "" != "$MANAGER_TARGET" ]]; then
  133:   yq write -i $CONFIG_FILE grpcClient.target $MANAGER_TARGET
  134  fi

  136  if [[ "" != "$MANAGER_AUTHORITY" ]]; then
  137:   yq write -i $CONFIG_FILE grpcClient.authority $MANAGER_AUTHORITY
  138  fi

  140  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
  141:   yq write -i $CONFIG_FILE grpcServer.connectors[0].port "$GRPC_SERVER_PORT"
  142  fi

  144  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  145:   yq write -i $CONFIG_FILE nextGen.managerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  146  fi

  148  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  149:   yq write -i $CONFIG_FILE nextGen.ngManagerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  150  fi

  152  if [[ "" != "$USER_VERIFICATION_SECRET" ]]; then
  153:   yq write -i $CONFIG_FILE nextGen.userVerificationSecret "$USER_VERIFICATION_SECRET"
  154  fi

  156  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  157:   yq write -i $CONFIG_FILE nextGen.jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  158  fi

  160  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  161:   yq write -i $CONFIG_FILE nextGen.pipelineServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  162  fi

  164  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  165:   yq write -i $CONFIG_FILE nextGen.ciManagerSecret "$NEXT_GEN_MANAGER_SECRET"
  166  fi

  168  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  169:   yq write -i $CONFIG_FILE nextGen.ceNextGenServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  170  fi

  172  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  173:   yq write -i $CONFIG_FILE nextGen.ffServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  174  fi

  176  if [[ "" != "$AUTH_ENABLED" ]]; then
  177:   yq write -i $CONFIG_FILE enableAuth "$AUTH_ENABLED"
  178  fi

  180  if [[ "" != "$AUDIT_ENABLED" ]]; then
  181:   yq write -i $CONFIG_FILE enableAudit "$AUDIT_ENABLED"
  182  fi

  184  if [[ "" != "$MANAGER_CLIENT_BASEURL" ]]; then
  185:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl "$MANAGER_CLIENT_BASEURL"
  186  fi

  188  if [[ "" != "$NG_MANAGER_CLIENT_BASEURL" ]]; then
  189:   yq write -i $CONFIG_FILE ngManagerClientConfig.baseUrl "$NG_MANAGER_CLIENT_BASEURL"
  190  fi

  192  if [[ "" != "$CENG_CLIENT_BASEURL" ]]; then
  193:   yq write -i $CONFIG_FILE ceNextGenClientConfig.baseUrl "$CENG_CLIENT_BASEURL"
  194  fi

  196  if [[ "" != "$CENG_CLIENT_READ_TIMEOUT" ]]; then
  197:   yq write -i $CONFIG_FILE ceNextGenClientConfig.readTimeOutSeconds "$CENG_CLIENT_READ_TIMEOUT"
  198  fi

  200  if [[ "" != "$CENG_CLIENT_CONNECT_TIMEOUT" ]]; then
  201:   yq write -i $CONFIG_FILE ceNextGenClientConfig.connectTimeOutSeconds "$CENG_CLIENT_CONNECT_TIMEOUT"
  202  fi

  204  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  205:   yq write -i $CONFIG_FILE nextGen.jwtAuthSecret "$JWT_AUTH_SECRET"
  206  fi

  211    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  212:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  213      INDEX=$(expr $INDEX + 1)

  217  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
  218:   yq write -i $CONFIG_FILE pmsSdkGrpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
  219  fi

  222  if [[ "" != "$SHOULD_CONFIGURE_WITH_PMS" ]]; then
  223:   yq write -i $CONFIG_FILE shouldConfigureWithPMS $SHOULD_CONFIGURE_WITH_PMS
  224  fi

  226  if [[ "" != "$PMS_TARGET" ]]; then
  227:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.target $PMS_TARGET
  228  fi

  230  if [[ "" != "$PMS_AUTHORITY" ]]; then
  231:   yq write -i $CONFIG_FILE pmsGrpcClientConfig.authority $PMS_AUTHORITY
  232  fi

  234  if [[ "" != "$NG_MANAGER_TARGET" ]]; then
  235:  yq write -i $CONFIG_FILE gitGrpcClientConfigs.core.target $NG_MANAGER_TARGET
  236  fi

  238  if [[ "" != "$NG_MANAGER_AUTHORITY" ]]; then
  239:   yq write -i $CONFIG_FILE gitGrpcClientConfigs.core.authority $NG_MANAGER_AUTHORITY
  240  fi

  242  if [[ "" != "$NG_MANAGER_TARGET" ]]; then
  243:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.target $NG_MANAGER_TARGET
  244  fi

  246  if [[ "" != "$NG_MANAGER_AUTHORITY" ]]; then
  247:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.authority $NG_MANAGER_AUTHORITY
  248  fi

  251  if [[ "" != "$HARNESS_IMAGE_USER_NAME" ]]; then
  252:   yq write -i $CONFIG_FILE ciDefaultEntityConfiguration.harnessImageUseName $HARNESS_IMAGE_USER_NAME
  253  fi

  255  if [[ "" != "$HARNESS_IMAGE_PASSWORD" ]]; then
  256:   yq write -i $CONFIG_FILE ciDefaultEntityConfiguration.harnessImagePassword $HARNESS_IMAGE_PASSWORD
  257  fi

  259  if [[ "" != "$CE_NG_CLIENT_BASEURL" ]]; then
  260:   yq write -i $CONFIG_FILE ceNextGenClientConfig.baseUrl "$CE_NG_CLIENT_BASEURL"
  261  fi

  263  if [[ "" != "$LW_CLIENT_BASEURL" ]]; then
  264:   yq write -i $CONFIG_FILE lightwingClientConfig.baseUrl "$LW_CLIENT_BASEURL"
  265  fi

  267  if [[ "" != "$CF_CLIENT_BASEURL" ]]; then
  268:   yq write -i $CONFIG_FILE ffServerClientConfig.baseUrl "$CF_CLIENT_BASEURL"
  269  fi

  271  if [[ "" != "$AUDIT_CLIENT_BASEURL" ]]; then
  272:   yq write -i $CONFIG_FILE auditClientConfig.baseUrl "$AUDIT_CLIENT_BASEURL"
  273  fi

  275  if [[ "" != "$SCM_SERVICE_URI" ]]; then
  276:   yq write -i $CONFIG_FILE gitSdkConfiguration.scmConnectionConfig.url "$SCM_SERVICE_URI"
  277  fi

  279  if [[ "" != "$LOG_STREAMING_SERVICE_BASEURL" ]]; then
  280:   yq write -i $CONFIG_FILE logStreamingServiceConfig.baseUrl "$LOG_STREAMING_SERVICE_BASEURL"
  281  fi

  283  if [[ "" != "$LOG_STREAMING_SERVICE_TOKEN" ]]; then
  284:   yq write -i $CONFIG_FILE logStreamingServiceConfig.serviceToken "$LOG_STREAMING_SERVICE_TOKEN"
  285  fi

  288    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  289:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  290  else

  294  if [[ "" != "$TIMESCALE_PASSWORD" ]]; then
  295:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALE_PASSWORD"
  296  fi

  298  if [[ "" != "$TIMESCALE_URI" ]]; then
  299:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALE_URI"
  300  fi

  302  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
  303:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
  304  fi

  306  if [[ "" != "$ENABLE_DASHBOARD_TIMESCALE" ]]; then
  307:   yq write -i $CONFIG_FILE enableDashboardTimescale $ENABLE_DASHBOARD_TIMESCALE
  308  fi

  310  if [[ "" != "$FILE_STORAGE_MODE" ]]; then
  311:   yq write -i $CONFIG_FILE fileServiceConfiguration.fileStorageMode "$FILE_STORAGE_MODE"
  312  fi

  314  if [[ "" != "$FILE_STORAGE_CLUSTER_NAME" ]]; then
  315:   yq write -i $CONFIG_FILE fileServiceConfiguration.clusterName "$FILE_STORAGE_CLUSTER_NAME"
  316  fi

  320  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  321:   yq write -i $CONFIG_FILE redisLockConfig.useScriptCache false
  322:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  323  fi

  335  if [[ "" != "$LOCK_CONFIG_REDIS_URL" ]]; then
  336:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$LOCK_CONFIG_REDIS_URL"
  337  fi

  343  if [[ "" != "$LOCK_CONFIG_SENTINEL_MASTER_NAME" ]]; then
  344:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$LOCK_CONFIG_SENTINEL_MASTER_NAME"
  345  fi

  350    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  351:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  352:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
  353      INDEX=$(expr $INDEX + 1)

  357  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  358:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  359  fi

harness/harness-core/dockerization/pipeline-service/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   18  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
   19:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
   20  fi
   21  
   22: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   23  

   27  if [[ "" != "$LOGGING_LEVEL" ]]; then
   28:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   29  fi

   35      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   36:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   37    done

   40  if [[ "" != "$MONGO_URI" ]]; then
   41:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   42  fi

   44  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   45:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   46  fi

   48  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
   49:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
   50  fi

   52  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
   53:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
   54  fi

   56  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
   57:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
   58  fi

   60  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
   61:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
   62  fi

   64  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
   65:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
   66  fi

   68  if [[ "" != "$MONGO_TRANSACTIONS_ALLOWED" ]]; then
   69:   yq write -i $CONFIG_FILE mongo.transactionsEnabled $MONGO_TRANSACTIONS_ALLOWED
   70  fi

   72  if [[ "" != "$DISTRIBUTED_LOCK_IMPLEMENTATION" ]]; then
   73:   yq write -i $CONFIG_FILE distributedLockImplementation "$DISTRIBUTED_LOCK_IMPLEMENTATION"
   74  fi

   76  if [[ "" != "$GRPC_SERVER_PORT" ]]; then
   77:   yq write -i $CONFIG_FILE grpcServerConfig.connectors[0].port "$GRPC_SERVER_PORT"
   78  fi

   80  if [[ "" != "$MANAGER_TARGET" ]]; then
   81:   yq write -i $CONFIG_FILE managerTarget $MANAGER_TARGET
   82  fi

   84  if [[ "" != "$MANAGER_AUTHORITY" ]]; then
   85:   yq write -i $CONFIG_FILE managerAuthority $MANAGER_AUTHORITY
   86  fi

   88  if [[ "" != "$MANAGER_BASE_URL" ]]; then
   89:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl $MANAGER_BASE_URL
   90  fi

   92  if [[ "" != "$MANAGER_SERVICE_SECRET" ]]; then
   93:   yq write -i $CONFIG_FILE managerServiceSecret $MANAGER_SERVICE_SECRET
   94  fi

   96  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
   97:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl $NG_MANAGER_BASE_URL
   98  fi

  100  if [[ "" != "$NG_MANAGER_SERVICE_SECRET" ]]; then
  101:   yq write -i $CONFIG_FILE ngManagerServiceSecret $NG_MANAGER_SERVICE_SECRET
  102  fi

  104  if [[ "" != "$PIPELINE_SERVICE_ENDPOINT" ]]; then
  105:   yq write -i $CONFIG_FILE pipelineServiceClientConfig.baseUrl $PIPELINE_SERVICE_ENDPOINT
  106  fi

  108  if [[ "" != "$PIPELINE_SERVICE_SECRET" ]]; then
  109:   yq write -i $CONFIG_FILE pipelineServiceSecret $PIPELINE_SERVICE_SECRET
  110  fi

  112  if [[ "" != "$TEMPLATE_SERVICE_ENDPOINT" ]]; then
  113:   yq write -i $CONFIG_FILE templateServiceClientConfig.baseUrl $TEMPLATE_SERVICE_ENDPOINT
  114  fi

  116  if [[ "" != "$TEMPLATE_SERVICE_SECRET" ]]; then
  117:   yq write -i $CONFIG_FILE templateServiceSecret $TEMPLATE_SERVICE_SECRET
  118  fi

  120  if [[ "" != "$CI_MANAGER_BASE_URL" ]]; then
  121:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.ci.serviceHttpClientConfig.baseUrl $CI_MANAGER_BASE_URL
  122  fi

  124  if [[ "" != "$CI_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS" ]]; then
  125:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.ci.serviceHttpClientConfig.connectTimeOutSeconds $CI_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS
  126  fi

  128  if [[ "" != "$CI_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS" ]]; then
  129:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.ci.serviceHttpClientConfig.readTimeOutSeconds $CI_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS
  130  fi

  132  if [[ "" != "$CI_MANAGER_SERVICE_SECRET" ]]; then
  133:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.ci.secret $CI_MANAGER_SERVICE_SECRET
  134  fi

  136  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
  137:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cd.serviceHttpClientConfig.baseUrl $NG_MANAGER_BASE_URL
  138  fi

  140  if [[ "" != "$NG_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS" ]]; then
  141:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cd.serviceHttpClientConfig.connectTimeOutSeconds $NG_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS
  142  fi

  144  if [[ "" != "$NG_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS" ]]; then
  145:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cd.serviceHttpClientConfig.readTimeOutSeconds $NG_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS
  146  fi

  148  if [[ "" != "$NG_MANAGER_SERVICE_SECRET" ]]; then
  149:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cd.secret $NG_MANAGER_SERVICE_SECRET
  150  fi

  152  if [[ "" != "$CV_MANAGER_BASE_URL" ]]; then
  153:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cv.serviceHttpClientConfig.baseUrl $CV_MANAGER_BASE_URL
  154  fi

  156  if [[ "" != "$CV_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS" ]]; then
  157:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cv.serviceHttpClientConfig.connectTimeOutSeconds $CV_MANAGER_SERVICE_CONNECT_TIMEOUT_IN_SECONDS
  158  fi

  160  if [[ "" != "$CV_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS" ]]; then
  161:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cv.serviceHttpClientConfig.readTimeOutSeconds $CV_MANAGER_SERVICE_READ_TIMEOUT_IN_SECONDS
  162  fi

  164  if [[ "" != "$CV_MANAGER_SERVICE_SECRET" ]]; then
  165:   yq write -i $CONFIG_FILE yamlSchemaClientConfig.yamlSchemaHttpClientMap.cv.secret $CV_MANAGER_SERVICE_SECRET
  166  fi

  168  if [[ "" != "$NG_MANAGER_TARGET" ]]; then
  169:   yq write -i $CONFIG_FILE grpcClientConfigs.cd.target $NG_MANAGER_TARGET
  170  fi

  172  if [[ "" != "$NG_MANAGER_AUTHORITY" ]]; then
  173:   yq write -i $CONFIG_FILE grpcClientConfigs.cd.authority $NG_MANAGER_AUTHORITY
  174  fi

  176  if [[ "" != "$CVNG_MANAGER_TARGET" ]]; then
  177:   yq write -i $CONFIG_FILE grpcClientConfigs.cv.target $CVNG_MANAGER_TARGET
  178  fi

  180  if [[ "" != "$CVNG_MANAGER_AUTHORITY" ]]; then
  181:   yq write -i $CONFIG_FILE grpcClientConfigs.cv.authority $CVNG_MANAGER_AUTHORITY
  182  fi

  184  if [[ "" != "$CI_MANAGER_TARGET" ]]; then
  185:   yq write -i $CONFIG_FILE grpcClientConfigs.ci.target $CI_MANAGER_TARGET
  186  fi

  188  if [[ "" != "$CI_MANAGER_AUTHORITY" ]]; then
  189:   yq write -i $CONFIG_FILE grpcClientConfigs.ci.authority $CI_MANAGER_AUTHORITY
  190  fi

  192  if [[ "" != "$NG_MANAGER_GITSYNC_TARGET" ]]; then
  193:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.target $NG_MANAGER_GITSYNC_TARGET
  194  fi

  196  if [[ "" != "$NG_MANAGER_GITSYNC_AUTHORITY" ]]; then
  197:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.authority $NG_MANAGER_GITSYNC_AUTHORITY
  198  fi

  200  if [[ "" != "$SCM_SERVICE_URI" ]]; then
  201:   yq write -i $CONFIG_FILE gitSdkConfiguration.scmConnectionConfig.url "$SCM_SERVICE_URI"
  202  fi

  204  if [[ "" != "$PIPELINE_SERVICE_BASE_URL" ]]; then
  205:   yq write -i $CONFIG_FILE pipelineServiceBaseUrl "$PIPELINE_SERVICE_BASE_URL"
  206  fi

  208  if [[ "" != "$PMS_API_BASE_URL" ]]; then
  209:   yq write -i $CONFIG_FILE pmsApiBaseUrl "$PMS_API_BASE_URL"
  210  fi

  213    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  214:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  215  else

  219  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  220:   yq write -i $CONFIG_FILE jwtAuthSecret "$JWT_AUTH_SECRET"
  221  fi

  223  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  224:   yq write -i $CONFIG_FILE jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  225  fi

  230    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  231:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  232      INDEX=$(expr $INDEX + 1)

  236  if [[ "" != "$NOTIFICATION_BASE_URL" ]]; then
  237:   yq write -i $CONFIG_FILE notificationClient.httpClient.baseUrl "$NOTIFICATION_BASE_URL"
  238  fi

  240  if [[ "" != "$NOTIFICATION_MONGO_URI" ]]; then
  241:   yq write -i $CONFIG_FILE notificationClient.messageBroker.uri "${NOTIFICATION_MONGO_URI//\\&/&}"
  242  fi

  244  if [[ "" != "$MANAGER_CLIENT_BASEURL" ]]; then
  245:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl "$MANAGER_CLIENT_BASEURL"
  246  fi

  248  if [[ "" != "$TIMESCALE_PASSWORD" ]]; then
  249:   yq write -i $CONFIG_FILE timescaledb.timescaledbPassword "$TIMESCALE_PASSWORD"
  250  fi

  252  if [[ "" != "$TIMESCALE_URI" ]]; then
  253:   yq write -i $CONFIG_FILE timescaledb.timescaledbUrl "$TIMESCALE_URI"
  254  fi

  256  if [[ "" != "$TIMESCALEDB_USERNAME" ]]; then
  257:   yq write -i $CONFIG_FILE timescaledb.timescaledbUsername "$TIMESCALEDB_USERNAME"
  258  fi

  260  if [[ "" != "$ENABLE_DASHBOARD_TIMESCALE" ]]; then
  261:   yq write -i $CONFIG_FILE enableDashboardTimescale $ENABLE_DASHBOARD_TIMESCALE
  262  fi

  266  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  267:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  268  fi

  271  if [[ "" != "$CACHE_CONFIG_REDIS_URL" ]]; then
  272:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$CACHE_CONFIG_REDIS_URL"
  273  fi

  279  if [[ "" != "$CACHE_CONFIG_SENTINEL_MASTER_NAME" ]]; then
  280:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$CACHE_CONFIG_SENTINEL_MASTER_NAME"
  281  fi

  286    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  287:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
  288      INDEX=$(expr $INDEX + 1)

  292  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  293:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  294  fi

  313    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  314:     yq write -i $CONFIG_FILE redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  315      INDEX=$(expr $INDEX + 1)

harness/harness-core/dockerization/platform-service/scripts/replace_configs.sh:
   12    if [[ "" != "$CONFIG_VALUE" ]]; then
   13:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   14    fi

   21      VALUE=$(cut -d= -f 2 <<< "$PARAM_PAIR")
   22:     yq write -i $CONFIG_FILE $1.params.$NAME "$VALUE"
   23    done

   31  
   32:     yq write -i $CONFIG_FILE $1.hosts[$INDEX].host "$HOST"
   33      if [[ "" != "$PORT" ]]; then
   34:       yq write -i $CONFIG_FILE $1.hosts[$INDEX].port "$PORT"
   35      fi

   38  
   39: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   40  
   41  if [[ "" != "$LOGGING_LEVEL" ]]; then
   42:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   43  fi

   49      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   50:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   51    done

   54  if [[ "" != "$SERVER_PORT" ]]; then
   55:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
   56  else
   57:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "9005"
   58  fi

   60  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
   61:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
   62  fi

   65    yq delete -i $CONFIG_FILE allowedOrigins
   66:   yq write -i $CONFIG_FILE allowedOrigins "$ALLOWED_ORIGINS"
   67  fi

   69  if [[ "" != "$MONGO_URI" ]]; then
   70:   yq write -i $CONFIG_FILE notificationServiceConfig.mongo.uri "${MONGO_URI//\\&/&}"
   71  fi

   73  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
   74:   yq write -i $CONFIG_FILE notificationServiceConfig.mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
   75  fi

   77  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
   78:   yq write -i $CONFIG_FILE notificationServiceConfig.mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
   79  fi

   81  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
   82:   yq write -i $CONFIG_FILE notificationServiceConfig.mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
   83  fi

   85  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
   86:   yq write -i $CONFIG_FILE notificationServiceConfig.mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
   87  fi

   89  if [[ "" != "$MANAGER_CLIENT_SECRET" ]]; then
   90:   yq write -i $CONFIG_FILE secrets.managerServiceSecret "$MANAGER_CLIENT_SECRET"
   91  fi

   93  if [[ "" != "$AUTH_ENABLED" ]]; then
   94:   yq write -i $CONFIG_FILE enableAuth "$AUTH_ENABLED"
   95  fi

   97  if [[ "" != "$MANAGER_CLIENT_BASEURL" ]]; then
   98:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl "$MANAGER_CLIENT_BASEURL"
   99  fi

  101  if [[ "" != "$SMTP_HOST" ]]; then
  102:   yq write -i $CONFIG_FILE notificationServiceConfig.smtp.host "$SMTP_HOST"
  103  fi

  105  if [[ "" != "$SMTP_PORT" ]]; then
  106:   yq write -i $CONFIG_FILE notificationServiceConfig.smtp.port "$SMTP_PORT"
  107  fi

  109  if [[ "" != "$SMTP_USERNAME" ]]; then
  110:   yq write -i $CONFIG_FILE notificationServiceConfig.smtp.username "$SMTP_USERNAME"
  111  fi

  113  if [[ "" != "$SMTP_PASSWORD" ]]; then
  114:   yq write -i $CONFIG_FILE notificationServiceConfig.smtp.password "$SMTP_PASSWORD"
  115  fi

  117  if [[ "" != "$SMTP_USE_SSL" ]]; then
  118:   yq write -i $CONFIG_FILE notificationServiceConfig.smtp.useSSL "$SMTP_USE_SSL"
  119  fi

  121  if [[ "" != "$OVERRIDE_PREDEFINED_TEMPLATES" ]]; then
  122:   yq write -i $CONFIG_FILE notificationServiceConfig.seedDataConfiguration.shouldOverrideAllPredefinedTemplates "$OVERRIDE_PREDEFINED_TEMPLATES"
  123  fi

  125  if [[ "" != "$MONGO_MESSAGE_BROKER_URI" ]]; then
  126:   yq write -i $CONFIG_FILE notificationClient.messageBroker.uri "$MONGO_MESSAGE_BROKER_URI"
  127  fi

  129  if [[ "" != "$RBAC_URL" ]]; then
  130:   yq write -i $CONFIG_FILE rbacServiceConfig.baseUrl "$RBAC_URL"
  131  fi

  133  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  134:   yq write -i $CONFIG_FILE secrets.ngManagerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  135  fi

  137  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  138:   yq write -i $CONFIG_FILE secrets.jwtAuthSecret "$JWT_AUTH_SECRET"
  139  fi

  141  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  142:   yq write -i $CONFIG_FILE secrets.jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  143  fi

  145  if [[ "" != "$GRPC_MANAGER_TARGET" ]]; then
  146:   yq write -i $CONFIG_FILE notificationServiceConfig.delegateServiceGrpcConfig.target $GRPC_MANAGER_TARGET
  147  fi

  149  if [[ "" != "$GRPC_MANAGER_AUTHORITY" ]]; then
  150:   yq write -i $CONFIG_FILE notificationServiceConfig.delegateServiceGrpcConfig.authority $GRPC_MANAGER_AUTHORITY
  151  fi

  154    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  155:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  156  else

  160  if [[ "" != "$AUDIT_MONGO_URI" ]]; then
  161:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.uri "${AUDIT_MONGO_URI//\\&/&}"
  162  fi

  164  if [[ "" != "$AUDIT_MONGO_CONNECT_TIMEOUT" ]]; then
  165:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.connectTimeout $AUDIT_MONGO_CONNECT_TIMEOUT
  166  fi

  168  if [[ "" != "$AUDIT_MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
  169:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.serverSelectionTimeout $AUDIT_MONGO_SERVER_SELECTION_TIMEOUT
  170  fi

  172  if [[ "" != "$AUDIT_MAX_CONNECTION_IDLE_TIME" ]]; then
  173:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.maxConnectionIdleTime $AUDIT_MAX_CONNECTION_IDLE_TIME
  174  fi

  176  if [[ "" != "$AUDIT_MONGO_CONNECTIONS_PER_HOST" ]]; then
  177:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.connectionsPerHost $AUDIT_MONGO_CONNECTIONS_PER_HOST
  178  fi

  180  if [[ "" != "$AUDIT_MONGO_INDEX_MANAGER_MODE" ]]; then
  181:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.indexManagerMode $AUDIT_MONGO_INDEX_MANAGER_MODE
  182  fi

  184  if [[ "" != "$ENABLE_AUDIT_SERVICE" ]]; then
  185:   yq write -i $CONFIG_FILE auditServiceConfig.enableAuditService $ENABLE_AUDIT_SERVICE
  186  fi

  188  if [[ "" != "$ACCESS_CONTROL_ENABLED" ]]; then
  189:   yq write -i $CONFIG_FILE accessControlClient.enableAccessControl $ACCESS_CONTROL_ENABLED
  190  fi

  192  if [[ "" != "$ACCESS_CONTROL_BASE_URL" ]]; then
  193:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceConfig.baseUrl $ACCESS_CONTROL_BASE_URL
  194  fi

  196  if [[ "" != "$ACCESS_CONTROL_SECRET" ]]; then
  197:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceSecret $ACCESS_CONTROL_SECRET
  198  fi
  199  if [[ "" != "$EVENTS_FRAMEWORK_REDIS_URL" ]]; then
  200:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.redisUrl "$EVENTS_FRAMEWORK_REDIS_URL"
  201  fi

  203  if [[ "" != "$EVENTS_FRAMEWORK_ENV_NAMESPACE" ]]; then
  204:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.envNamespace "$EVENTS_FRAMEWORK_ENV_NAMESPACE"
  205  fi

  207  if [[ "" != "$EVENTS_FRAMEWORK_USE_SENTINEL" ]]; then
  208:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.sentinel "$EVENTS_FRAMEWORK_USE_SENTINEL"
  209  fi

  211  if [[ "" != "$EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME" ]]; then
  212:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.masterName "$EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME"
  213  fi

  215  if [[ "" != "$EVENTS_FRAMEWORK_REDIS_USERNAME" ]]; then
  216:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.userName "$EVENTS_FRAMEWORK_REDIS_USERNAME"
  217  fi

  219  if [[ "" != "$EVENTS_FRAMEWORK_REDIS_PASSWORD" ]]; then
  220:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.password "$EVENTS_FRAMEWORK_REDIS_PASSWORD"
  221  fi

  226    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  227:     yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  228      INDEX=$(expr $INDEX + 1)

  235    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  236:     yq write -i $CONFIG_FILE resourceGroupServiceConfig.redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  237      INDEX=$(expr $INDEX + 1)

harness/harness-core/dockerization/template-service/scripts/replace_configs.sh:
   13    if [[ "" != "$CONFIG_VALUE" ]]; then
   14:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   15    fi

   17  
   18: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   19  

   22  if [[ "" != "$LOGGING_LEVEL" ]]; then
   23:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   24  fi

   30      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   31:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   32    done

   35  if [[ "" != "$MONGO_URI" ]]; then
   36:   yq write -i $CONFIG_FILE mongo.uri "${MONGO_URI//\\&/&}"
   37  fi

   39  if [[ "" != "$MONGO_TRACE_MODE" ]]; then
   40:   yq write -i $CONFIG_FILE mongo.traceMode $MONGO_TRACE_MODE
   41  fi

   43  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
   44:   yq write -i $CONFIG_FILE mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
   45  fi

   47  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
   48:   yq write -i $CONFIG_FILE mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
   49  fi

   51  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
   52:   yq write -i $CONFIG_FILE mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
   53  fi

   55  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
   56:   yq write -i $CONFIG_FILE mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
   57  fi

   59  if [[ "" != "$MONGO_INDEX_MANAGER_MODE" ]]; then
   60:   yq write -i $CONFIG_FILE mongo.indexManagerMode $MONGO_INDEX_MANAGER_MODE
   61  fi

   63  if [[ "" != "$MONGO_TRANSACTIONS_ALLOWED" ]]; then
   64:   yq write -i $CONFIG_FILE mongo.transactionsEnabled $MONGO_TRANSACTIONS_ALLOWED
   65  fi

   67  if [[ "" != "$MANAGER_TARGET" ]]; then
   68:   yq write -i $CONFIG_FILE managerTarget $MANAGER_TARGET
   69  fi

   71  if [[ "" != "$MANAGER_AUTHORITY" ]]; then
   72:   yq write -i $CONFIG_FILE managerAuthority $MANAGER_AUTHORITY
   73  fi

   75  if [[ "" != "$MANAGER_SERVICE_SECRET" ]]; then
   76:   yq write -i $CONFIG_FILE managerServiceSecret $MANAGER_SERVICE_SECRET
   77  fi

   79  if [[ "" != "$NG_MANAGER_BASE_URL" ]]; then
   80:   yq write -i $CONFIG_FILE ngManagerServiceHttpClientConfig.baseUrl $NG_MANAGER_BASE_URL
   81  fi

   83  if [[ "" != "$MANAGER_CLIENT_BASEURL" ]]; then
   84:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl $MANAGER_CLIENT_BASEURL
   85  fi

   87  if [[ "" != "$NG_MANAGER_SERVICE_SECRET" ]]; then
   88:   yq write -i $CONFIG_FILE ngManagerServiceSecret $NG_MANAGER_SERVICE_SECRET
   89  fi

   91  if [[ "" != "$NG_MANAGER_GITSYNC_TARGET" ]]; then
   92:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.target $NG_MANAGER_GITSYNC_TARGET
   93  fi

   95  if [[ "" != "$NG_MANAGER_GITSYNC_AUTHORITY" ]]; then
   96:   yq write -i $CONFIG_FILE gitSdkConfiguration.gitManagerGrpcClientConfig.authority $NG_MANAGER_GITSYNC_AUTHORITY
   97  fi

   99  if [[ "" != "$SCM_SERVICE_URI" ]]; then
  100:   yq write -i $CONFIG_FILE gitSdkConfiguration.scmConnectionConfig.url "$SCM_SERVICE_URI"
  101  fi

  104    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  105:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  106  else

  110  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  111:   yq write -i $CONFIG_FILE jwtAuthSecret "$JWT_AUTH_SECRET"
  112  fi

  114  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  115:   yq write -i $CONFIG_FILE jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  116  fi

  121    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  122:     yq write -i $CONFIG_FILE eventsFramework.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  123      INDEX=$(expr $INDEX + 1)

  129  if [[ "$REDIS_SCRIPT_CACHE" == "false" ]]; then
  130:   yq write -i $REDISSON_CACHE_FILE useScriptCache false
  131  fi

  134  if [[ "" != "$CACHE_CONFIG_REDIS_URL" ]]; then
  135:   yq write -i $REDISSON_CACHE_FILE singleServerConfig.address "$CACHE_CONFIG_REDIS_URL"
  136  fi

  142  if [[ "" != "$CACHE_CONFIG_SENTINEL_MASTER_NAME" ]]; then
  143:   yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.masterName "$CACHE_CONFIG_SENTINEL_MASTER_NAME"
  144  fi

  149    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  150:     yq write -i $REDISSON_CACHE_FILE sentinelServersConfig.sentinelAddresses.[$INDEX] "${REDIS_SENTINEL_URL}"
  151      INDEX=$(expr $INDEX + 1)

  155  if [[ "" != "$REDIS_NETTY_THREADS" ]]; then
  156:   yq write -i $REDISSON_CACHE_FILE nettyThreads "$REDIS_NETTY_THREADS"
  157  fi

harness/harness-core/dockerization/verification/scripts/replace_configs.sh:
  12    if [[ "" != "$CONFIG_VALUE" ]]; then
  13:     yq write -i "$CONFIG_FILE" "$CONFIG_KEY" "$CONFIG_VALUE"
  14    fi

  20  if [[ "" != "$LOGGING_LEVEL" ]]; then
  21:   yq write -i /opt/harness/verification-config.yml logging.level "$LOGGING_LEVEL"
  22  fi

  24  if [[ "" != "$VERIFICATION_PORT" ]]; then
  25:   yq write -i /opt/harness/verification-config.yml server.applicationConnectors[0].port "$VERIFICATION_PORT"
  26  else
  27:   yq write -i /opt/harness/verification-config.yml server.applicationConnectors[0].port "7070"
  28  fi

  30  if [[ "" != "$MONGO_URI" ]]; then
  31:   yq write -i /opt/harness/verification-config.yml mongo.uri "${MONGO_URI//\\&/&}"
  32  fi

  34  if [[ "" != "$MONGO_SSL_CONFIG" ]]; then
  35:   yq write -i /opt/harness/verification-config.yml mongo.mongoSSLConfig.mongoSSLEnabled "$MONGO_SSL_CONFIG"
  36  fi

  38  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PATH" ]]; then
  39:   yq write -i /opt/harness/verification-config.yml mongo.mongoSSLConfig.mongoTrustStorePath "$MONGO_SSL_CA_TRUST_STORE_PATH"
  40  fi

  42  if [[ "" != "$MONGO_SSL_CA_TRUST_STORE_PASSWORD" ]]; then
  43:   yq write -i /opt/harness/verification-config.yml mongo.mongoSSLConfig.mongoTrustStorePassword "$MONGO_SSL_CA_TRUST_STORE_PASSWORD"
  44  fi

  46  if [[ "" != "$MANAGER_URL" ]]; then
  47:   yq write -i /opt/harness/verification-config.yml managerUrl "$MANAGER_URL"
  48  fi
  49  
  50:   yq write -i /opt/harness/verification-config.yml server.requestLog.appenders[0].type "console"
  51:   yq write -i /opt/harness/verification-config.yml server.requestLog.appenders[0].threshold "TRACE"
  52:   yq write -i /opt/harness/verification-config.yml server.requestLog.appenders[0].target "STDOUT"
  53  

  56    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  57:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  58  else

  60      yq delete -i $CONFIG_FILE 'logging.appenders.(type==gke-console)'
  61:     yq write -i $CONFIG_FILE 'logging.appenders.(type==file).currentLogFilename' "/opt/harness/logs/verification.log"
  62:     yq write -i $CONFIG_FILE 'logging.appenders.(type==file).archivedLogFilenamePattern' "/opt/harness/logs/verification.%d.%i.log"
  63    else

  69  if [[ "" != "$DATA_STORE" ]]; then
  70:   yq write -i /opt/harness/verification-config.yml dataStorageMode "$DATA_STORE"
  71  fi

harness/harness-core/platform-service/build/container/scripts/replace_configs.sh:
   12    if [[ "" != "$CONFIG_VALUE" ]]; then
   13:     yq write -i $CONFIG_FILE $CONFIG_KEY $CONFIG_VALUE
   14    fi

   21      VALUE=$(cut -d= -f 2 <<< "$PARAM_PAIR")
   22:     yq write -i $CONFIG_FILE $1.params.$NAME "$VALUE"
   23    done

   31  
   32:     yq write -i $CONFIG_FILE $1.hosts[$INDEX].host "$HOST"
   33      if [[ "" != "$PORT" ]]; then
   34:       yq write -i $CONFIG_FILE $1.hosts[$INDEX].port "$PORT"
   35      fi

   38  
   39: yq write -i $CONFIG_FILE server.adminConnectors "[]"
   40  
   41  if [[ "" != "$LOGGING_LEVEL" ]]; then
   42:     yq write -i $CONFIG_FILE logging.level "$LOGGING_LEVEL"
   43  fi

   49      LOGGER_LEVEL=`echo $ITEM | awk -F= '{print $2}'`
   50:     yq write -i $CONFIG_FILE logging.loggers.[$LOGGER] "${LOGGER_LEVEL}"
   51    done

   54  if [[ "" != "$SERVER_PORT" ]]; then
   55:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "$SERVER_PORT"
   56  else
   57:   yq write -i $CONFIG_FILE server.applicationConnectors[0].port "9005"
   58  fi

   60  if [[ "" != "$SERVER_MAX_THREADS" ]]; then
   61:   yq write -i $CONFIG_FILE server.maxThreads "$SERVER_MAX_THREADS"
   62  fi

   65    yq delete -i $CONFIG_FILE allowedOrigins
   66:   yq write -i $CONFIG_FILE allowedOrigins "$ALLOWED_ORIGINS"
   67  fi

   69  if [[ "" != "$MONGO_URI" ]]; then
   70:   yq write -i $CONFIG_FILE notificationServiceConfig.mongo.uri "${MONGO_URI//\\&/&}"
   71  fi

   73  if [[ "" != "$MONGO_CONNECT_TIMEOUT" ]]; then
   74:   yq write -i $CONFIG_FILE notificationServiceConfig.mongo.connectTimeout $MONGO_CONNECT_TIMEOUT
   75  fi

   77  if [[ "" != "$MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
   78:   yq write -i $CONFIG_FILE notificationServiceConfig.mongo.serverSelectionTimeout $MONGO_SERVER_SELECTION_TIMEOUT
   79  fi

   81  if [[ "" != "$MAX_CONNECTION_IDLE_TIME" ]]; then
   82:   yq write -i $CONFIG_FILE notificationServiceConfig.mongo.maxConnectionIdleTime $MAX_CONNECTION_IDLE_TIME
   83  fi

   85  if [[ "" != "$MONGO_CONNECTIONS_PER_HOST" ]]; then
   86:   yq write -i $CONFIG_FILE notificationServiceConfig.mongo.connectionsPerHost $MONGO_CONNECTIONS_PER_HOST
   87  fi

   89  if [[ "" != "$MANAGER_CLIENT_SECRET" ]]; then
   90:   yq write -i $CONFIG_FILE secrets.managerServiceSecret "$MANAGER_CLIENT_SECRET"
   91  fi

   93  if [[ "" != "$AUTH_ENABLED" ]]; then
   94:   yq write -i $CONFIG_FILE enableAuth "$AUTH_ENABLED"
   95  fi

   97  if [[ "" != "$MANAGER_CLIENT_BASEURL" ]]; then
   98:   yq write -i $CONFIG_FILE managerClientConfig.baseUrl "$MANAGER_CLIENT_BASEURL"
   99  fi

  101  if [[ "" != "$SMTP_HOST" ]]; then
  102:   yq write -i $CONFIG_FILE notificationServiceConfig.smtp.host "$SMTP_HOST"
  103  fi

  105  if [[ "" != "$SMTP_PORT" ]]; then
  106:   yq write -i $CONFIG_FILE notificationServiceConfig.smtp.port "$SMTP_PORT"
  107  fi

  109  if [[ "" != "$SMTP_USERNAME" ]]; then
  110:   yq write -i $CONFIG_FILE notificationServiceConfig.smtp.username "$SMTP_USERNAME"
  111  fi

  113  if [[ "" != "$SMTP_PASSWORD" ]]; then
  114:   yq write -i $CONFIG_FILE notificationServiceConfig.smtp.password "$SMTP_PASSWORD"
  115  fi

  117  if [[ "" != "$SMTP_USE_SSL" ]]; then
  118:   yq write -i $CONFIG_FILE notificationServiceConfig.smtp.useSSL "$SMTP_USE_SSL"
  119  fi

  121  if [[ "" != "$OVERRIDE_PREDEFINED_TEMPLATES" ]]; then
  122:   yq write -i $CONFIG_FILE notificationServiceConfig.seedDataConfiguration.shouldOverrideAllPredefinedTemplates "$OVERRIDE_PREDEFINED_TEMPLATES"
  123  fi

  125  if [[ "" != "$MONGO_MESSAGE_BROKER_URI" ]]; then
  126:   yq write -i $CONFIG_FILE notificationClient.messageBroker.uri "$MONGO_MESSAGE_BROKER_URI"
  127  fi

  129  if [[ "" != "$RBAC_URL" ]]; then
  130:   yq write -i $CONFIG_FILE rbacServiceConfig.baseUrl "$RBAC_URL"
  131  fi

  133  if [[ "" != "$NEXT_GEN_MANAGER_SECRET" ]]; then
  134:   yq write -i $CONFIG_FILE secrets.ngManagerServiceSecret "$NEXT_GEN_MANAGER_SECRET"
  135  fi

  137  if [[ "" != "$JWT_AUTH_SECRET" ]]; then
  138:   yq write -i $CONFIG_FILE secrets.jwtAuthSecret "$JWT_AUTH_SECRET"
  139  fi

  141  if [[ "" != "$JWT_IDENTITY_SERVICE_SECRET" ]]; then
  142:   yq write -i $CONFIG_FILE secrets.jwtIdentityServiceSecret "$JWT_IDENTITY_SERVICE_SECRET"
  143  fi

  145  if [[ "" != "$GRPC_MANAGER_TARGET" ]]; then
  146:   yq write -i $CONFIG_FILE notificationServiceConfig.delegateServiceGrpcConfig.target $GRPC_MANAGER_TARGET
  147  fi

  149  if [[ "" != "$GRPC_MANAGER_AUTHORITY" ]]; then
  150:   yq write -i $CONFIG_FILE notificationServiceConfig.delegateServiceGrpcConfig.authority $GRPC_MANAGER_AUTHORITY
  151  fi

  154    yq delete -i $CONFIG_FILE 'logging.appenders.(type==console)'
  155:   yq write -i $CONFIG_FILE 'logging.appenders.(type==gke-console).stackdriverLogEnabled' "true"
  156  else

  160  if [[ "" != "$AUDIT_MONGO_URI" ]]; then
  161:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.uri "${AUDIT_MONGO_URI//\\&/&}"
  162  fi

  164  if [[ "" != "$AUDIT_MONGO_CONNECT_TIMEOUT" ]]; then
  165:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.connectTimeout $AUDIT_MONGO_CONNECT_TIMEOUT
  166  fi

  168  if [[ "" != "$AUDIT_MONGO_SERVER_SELECTION_TIMEOUT" ]]; then
  169:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.serverSelectionTimeout $AUDIT_MONGO_SERVER_SELECTION_TIMEOUT
  170  fi

  172  if [[ "" != "$AUDIT_MAX_CONNECTION_IDLE_TIME" ]]; then
  173:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.maxConnectionIdleTime $AUDIT_MAX_CONNECTION_IDLE_TIME
  174  fi

  176  if [[ "" != "$AUDIT_MONGO_CONNECTIONS_PER_HOST" ]]; then
  177:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.connectionsPerHost $AUDIT_MONGO_CONNECTIONS_PER_HOST
  178  fi

  180  if [[ "" != "$AUDIT_MONGO_INDEX_MANAGER_MODE" ]]; then
  181:   yq write -i $CONFIG_FILE auditServiceConfig.mongo.indexManagerMode $AUDIT_MONGO_INDEX_MANAGER_MODE
  182  fi

  184  if [[ "" != "$ENABLE_AUDIT_SERVICE" ]]; then
  185:   yq write -i $CONFIG_FILE auditServiceConfig.enableAuditService $ENABLE_AUDIT_SERVICE
  186  fi

  188  if [[ "" != "$ACCESS_CONTROL_ENABLED" ]]; then
  189:   yq write -i $CONFIG_FILE accessControlClient.enableAccessControl $ACCESS_CONTROL_ENABLED
  190  fi

  192  if [[ "" != "$ACCESS_CONTROL_BASE_URL" ]]; then
  193:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceConfig.baseUrl $ACCESS_CONTROL_BASE_URL
  194  fi

  196  if [[ "" != "$ACCESS_CONTROL_SECRET" ]]; then
  197:   yq write -i $CONFIG_FILE accessControlClient.accessControlServiceSecret $ACCESS_CONTROL_SECRET
  198  fi
  199  if [[ "" != "$EVENTS_FRAMEWORK_REDIS_URL" ]]; then
  200:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.redisUrl "$EVENTS_FRAMEWORK_REDIS_URL"
  201  fi

  203  if [[ "" != "$EVENTS_FRAMEWORK_ENV_NAMESPACE" ]]; then
  204:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.envNamespace "$EVENTS_FRAMEWORK_ENV_NAMESPACE"
  205  fi

  207  if [[ "" != "$EVENTS_FRAMEWORK_USE_SENTINEL" ]]; then
  208:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.sentinel "$EVENTS_FRAMEWORK_USE_SENTINEL"
  209  fi

  211  if [[ "" != "$EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME" ]]; then
  212:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.masterName "$EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME"
  213  fi

  215  if [[ "" != "$EVENTS_FRAMEWORK_REDIS_USERNAME" ]]; then
  216:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.userName "$EVENTS_FRAMEWORK_REDIS_USERNAME"
  217  fi

  219  if [[ "" != "$EVENTS_FRAMEWORK_REDIS_PASSWORD" ]]; then
  220:   yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.password "$EVENTS_FRAMEWORK_REDIS_PASSWORD"
  221  fi

  226    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  227:     yq write -i $CONFIG_FILE resourceGroupServiceConfig.redis.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  228      INDEX=$(expr $INDEX + 1)

  235    for REDIS_SENTINEL_URL in "${SENTINEL_URLS[@]}"; do
  236:     yq write -i $CONFIG_FILE resourceGroupServiceConfig.redisLockConfig.sentinelUrls.[$INDEX] "${REDIS_SENTINEL_URL}"
  237      INDEX=$(expr $INDEX + 1)
